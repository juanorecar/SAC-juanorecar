
SAC_Tarea3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af8  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08006cf0  08006cf0  00016cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f20  08006f20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006f20  08006f20  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f20  08006f20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f20  08006f20  00016f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f24  08006f24  00016f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006f28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  2000000c  08006f34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000668  08006f34  00020668  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013399  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002989  00000000  00000000  0003341e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  00035da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e75  00000000  00000000  00037078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029a7a  00000000  00000000  00037eed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013c8f  00000000  00000000  00061967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00112eb8  00000000  00000000  000755f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005434  00000000  00000000  001884b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0018d8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08006cd8 	.word	0x08006cd8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08006cd8 	.word	0x08006cd8

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b3a:	f000 fda0 	bl	800167e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3e:	f000 f85d 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b42:	f000 fa23 	bl	8000f8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b46:	f000 f9ef 	bl	8000f28 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b4a:	f000 f8a9 	bl	8000ca0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000b4e:	f000 f969 	bl	8000e24 <MX_TIM2_Init>
  MX_DAC1_Init();
 8000b52:	f000 f91f 	bl	8000d94 <MX_DAC1_Init>
  MX_ICACHE_Init();
 8000b56:	f000 f951 	bl	8000dfc <MX_ICACHE_Init>
  MX_TIM6_Init();
 8000b5a:	f000 f9af 	bl	8000ebc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
//  	Alternar_DAC();
    //Crear_LUTC(); //Descomentar esta linea para usar la señal cuadrada
    Crear_LUT(); //Descomentar esta linea para usar la señal senoidal
 8000b5e:	f000 fa9b 	bl	8001098 <Crear_LUT>
    int j = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]

    for(int i = 0; i < 50; i = i + 10) //Descomentar este for para crear la LUT10 para la señal senoidal de 10kHz
 8000b66:	2300      	movs	r3, #0
 8000b68:	603b      	str	r3, [r7, #0]
 8000b6a:	e00d      	b.n	8000b88 <main+0x54>
    {

  	  LUT10[j] = LUT[i]; //Toma 5 muestras de las 50 que teniamos en la LUT de 1 kHz
 8000b6c:	4a1c      	ldr	r2, [pc, #112]	; (8000be0 <main+0xac>)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000b74:	4a1b      	ldr	r2, [pc, #108]	; (8000be4 <main+0xb0>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  	  j++;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	607b      	str	r3, [r7, #4]
    for(int i = 0; i < 50; i = i + 10) //Descomentar este for para crear la LUT10 para la señal senoidal de 10kHz
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	330a      	adds	r3, #10
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	2b31      	cmp	r3, #49	; 0x31
 8000b8c:	ddee      	ble.n	8000b6c <main+0x38>
    }


    if (HAL_TIM_Base_Start(&htim6) != HAL_OK) //Inicialización del timer6 para el DAC, configurado para que active el DAC en el flanco de bajada y a 50 kHz
 8000b8e:	4816      	ldr	r0, [pc, #88]	; (8000be8 <main+0xb4>)
 8000b90:	f004 fbe0 	bl	8005354 <HAL_TIM_Base_Start>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <main+0x6a>
       {
         /* Counter enable error */
         Error_Handler();
 8000b9a:	f000 facb 	bl	8001134 <Error_Handler>
       }

    if (HAL_TIM_Base_Start(&htim2) != HAL_OK) //Inicializacion del timer2 para el ADC, configurado para que active el ADC en el flanco de bajada y a 50kHz
 8000b9e:	4813      	ldr	r0, [pc, #76]	; (8000bec <main+0xb8>)
 8000ba0:	f004 fbd8 	bl	8005354 <HAL_TIM_Base_Start>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <main+0x7a>
    {
      /* Counter enable error */
      Error_Handler();
 8000baa:	f000 fac3 	bl	8001134 <Error_Handler>
    }




    if (HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)LUT10, 5, DAC_ALIGN_12B_R) != HAL_OK) //Activo el DAC con DMA para el buffer correpondiente (ahora LUT10 para la señal senoidal de 10kHz, cambiar para probar otras tablas seleccionando el correcto tamaño de buffer, usar LUTC para la señal cuadrada o LUT para la senoidal de 1kHz y cambiar el tamaño de 5 a 50)
 8000bae:	2300      	movs	r3, #0
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <main+0xb0>)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <main+0xbc>)
 8000bba:	f002 fb55 	bl	8003268 <HAL_DAC_Start_DMA>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <main+0x94>
     	     {
     	       /* Start Error */
     	       Error_Handler();
 8000bc4:	f000 fab6 	bl	8001134 <Error_Handler>
     	     }

    if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)aADCxConvertedData, ADC_CONVERTED_DATA_BUFFER_SIZE)!= HAL_OK)
 8000bc8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000bcc:	4909      	ldr	r1, [pc, #36]	; (8000bf4 <main+0xc0>)
 8000bce:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <main+0xc4>)
 8000bd0:	f001 f922 	bl	8001e18 <HAL_ADC_Start_DMA>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <main+0xaa>
      {
        /* ADC conversion start error */
        Error_Handler();
 8000bda:	f000 faab 	bl	8001134 <Error_Handler>
      /* Enable DAC Channel: channel corresponding to ADC channel ADC_CHANNEL_9 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <main+0xaa>
 8000be0:	200005f4 	.word	0x200005f4
 8000be4:	20000658 	.word	0x20000658
 8000be8:	200001c0 	.word	0x200001c0
 8000bec:	20000174 	.word	0x20000174
 8000bf0:	200000f8 	.word	0x200000f8
 8000bf4:	2000020c 	.word	0x2000020c
 8000bf8:	20000028 	.word	0x20000028

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b098      	sub	sp, #96	; 0x60
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0318 	add.w	r3, r7, #24
 8000c06:	2248      	movs	r2, #72	; 0x48
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f004 fff4 	bl	8005bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f003 fb0e 	bl	8004240 <HAL_PWREx_ControlVoltageScaling>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000c2a:	f000 fa83 	bl	8001134 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c2e:	2310      	movs	r3, #16
 8000c30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c32:	2301      	movs	r3, #1
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c3a:	2360      	movs	r3, #96	; 0x60
 8000c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c42:	2301      	movs	r3, #1
 8000c44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8000c4a:	2337      	movs	r3, #55	; 0x37
 8000c4c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c4e:	2307      	movs	r3, #7
 8000c50:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 fb7e 	bl	8004360 <HAL_RCC_OscConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c6a:	f000 fa63 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	230f      	movs	r3, #15
 8000c70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c72:	2303      	movs	r3, #3
 8000c74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2105      	movs	r1, #5
 8000c86:	4618      	mov	r0, r3
 8000c88:	f004 f840 	bl	8004d0c <HAL_RCC_ClockConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c92:	f000 fa4f 	bl	8001134 <Error_Handler>
  }
}
 8000c96:	bf00      	nop
 8000c98:	3760      	adds	r7, #96	; 0x60
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cc2:	4b31      	ldr	r3, [pc, #196]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000cc4:	4a31      	ldr	r2, [pc, #196]	; (8000d8c <MX_ADC1_Init+0xec>)
 8000cc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cc8:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000cca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd6:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce2:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000cf4:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cfa:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000d04:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8000d08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d10:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d28:	4817      	ldr	r0, [pc, #92]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000d2a:	f000 ff29 	bl	8001b80 <HAL_ADC_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000d34:	f000 f9fe 	bl	8001134 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4811      	ldr	r0, [pc, #68]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000d44:	f002 f8ba 	bl	8002ebc <HAL_ADCEx_MultiModeConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000d4e:	f000 f9f1 	bl	8001134 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_ADC1_Init+0xf0>)
 8000d54:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d56:	2306      	movs	r3, #6
 8000d58:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d5e:	237f      	movs	r3, #127	; 0x7f
 8000d60:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d62:	2304      	movs	r3, #4
 8000d64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_ADC1_Init+0xe8>)
 8000d70:	f001 fb48 	bl	8002404 <HAL_ADC_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000d7a:	f000 f9db 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000028 	.word	0x20000028
 8000d8c:	42028000 	.word	0x42028000
 8000d90:	04300002 	.word	0x04300002

08000d94 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2228      	movs	r2, #40	; 0x28
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f004 ff29 	bl	8005bf8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_DAC1_Init+0x60>)
 8000da8:	4a13      	ldr	r2, [pc, #76]	; (8000df8 <MX_DAC1_Init+0x64>)
 8000daa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000dac:	4811      	ldr	r0, [pc, #68]	; (8000df4 <MX_DAC1_Init+0x60>)
 8000dae:	f002 fa38 	bl	8003222 <HAL_DAC_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000db8:	f000 f9bc 	bl	8001134 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000dc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dc8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	2200      	movs	r2, #0
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_DAC1_Init+0x60>)
 8000dde:	f002 fb81 	bl	80034e4 <HAL_DAC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000de8:	f000 f9a4 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	; 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200000f8 	.word	0x200000f8
 8000df8:	40007400 	.word	0x40007400

08000dfc <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000e00:	2000      	movs	r0, #0
 8000e02:	f003 f9df 	bl	80041c4 <HAL_ICACHE_ConfigAssociativityMode>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000e0c:	f000 f992 	bl	8001134 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000e10:	f003 f9f8 	bl	8004204 <HAL_ICACHE_Enable>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000e1a:	f000 f98b 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 109;
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e4c:	226d      	movs	r2, #109	; 0x6d
 8000e4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e50:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e58:	2209      	movs	r2, #9
 8000e5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e68:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e6a:	f004 fa1b 	bl	80052a4 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e74:	f000 f95e 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	4619      	mov	r1, r3
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000e86:	f004 fbd4 	bl	8005632 <HAL_TIM_ConfigClockSource>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e90:	f000 f950 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e94:	2320      	movs	r3, #32
 8000e96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_TIM2_Init+0x94>)
 8000ea2:	f004 fe03 	bl	8005aac <HAL_TIMEx_MasterConfigSynchronization>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000eac:	f000 f942 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000174 	.word	0x20000174

08000ebc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_TIM6_Init+0x64>)
 8000ece:	4a15      	ldr	r2, [pc, #84]	; (8000f24 <MX_TIM6_Init+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 109;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <MX_TIM6_Init+0x64>)
 8000ed4:	226d      	movs	r2, #109	; 0x6d
 8000ed6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_TIM6_Init+0x64>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19;
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <MX_TIM6_Init+0x64>)
 8000ee0:	2213      	movs	r2, #19
 8000ee2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_TIM6_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <MX_TIM6_Init+0x64>)
 8000eec:	f004 f9da 	bl	80052a4 <HAL_TIM_Base_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000ef6:	f000 f91d 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000efa:	2320      	movs	r3, #32
 8000efc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <MX_TIM6_Init+0x64>)
 8000f08:	f004 fdd0 	bl	8005aac <HAL_TIMEx_MasterConfigSynchronization>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000f12:	f000 f90f 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001c0 	.word	0x200001c0
 8000f24:	40001000 	.word	0x40001000

08000f28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f2e:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_DMA_Init+0x60>)
 8000f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f32:	4a15      	ldr	r2, [pc, #84]	; (8000f88 <MX_DMA_Init+0x60>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6493      	str	r3, [r2, #72]	; 0x48
 8000f3a:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_DMA_Init+0x60>)
 8000f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_DMA_Init+0x60>)
 8000f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	; (8000f88 <MX_DMA_Init+0x60>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6493      	str	r3, [r2, #72]	; 0x48
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <MX_DMA_Init+0x60>)
 8000f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2100      	movs	r1, #0
 8000f62:	201d      	movs	r0, #29
 8000f64:	f002 f929 	bl	80031ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f68:	201d      	movs	r0, #29
 8000f6a:	f002 f940 	bl	80031ee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	201e      	movs	r0, #30
 8000f74:	f002 f921 	bl	80031ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f78:	201e      	movs	r0, #30
 8000f7a:	f002 f938 	bl	80031ee <HAL_NVIC_EnableIRQ>

}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b38      	ldr	r3, [pc, #224]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a37      	ldr	r2, [pc, #220]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fa8:	f043 0304 	orr.w	r3, r3, #4
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b35      	ldr	r3, [pc, #212]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b32      	ldr	r3, [pc, #200]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a31      	ldr	r2, [pc, #196]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b2f      	ldr	r3, [pc, #188]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b2c      	ldr	r3, [pc, #176]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a2b      	ldr	r2, [pc, #172]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <MX_GPIO_Init+0xf8>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	4826      	ldr	r0, [pc, #152]	; (8001088 <MX_GPIO_Init+0xfc>)
 8000ff0:	f003 f8d0 	bl	8004194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffa:	4824      	ldr	r0, [pc, #144]	; (800108c <MX_GPIO_Init+0x100>)
 8000ffc:	f003 f8ca 	bl	8004194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	21a0      	movs	r1, #160	; 0xa0
 8001004:	4822      	ldr	r0, [pc, #136]	; (8001090 <MX_GPIO_Init+0x104>)
 8001006:	f003 f8c5 	bl	8004194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800100a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800100e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001010:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001014:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4619      	mov	r1, r3
 8001020:	481b      	ldr	r0, [pc, #108]	; (8001090 <MX_GPIO_Init+0x104>)
 8001022:	f002 ff37 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	4619      	mov	r1, r3
 800103c:	4812      	ldr	r0, [pc, #72]	; (8001088 <MX_GPIO_Init+0xfc>)
 800103e:	f002 ff29 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001046:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001048:	2301      	movs	r3, #1
 800104a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	4619      	mov	r1, r3
 800105a:	480c      	ldr	r0, [pc, #48]	; (800108c <MX_GPIO_Init+0x100>)
 800105c:	f002 ff1a 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8001060:	23a0      	movs	r3, #160	; 0xa0
 8001062:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_GPIO_Init+0x104>)
 8001078:	f002 ff0c 	bl	8003e94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000
 8001088:	42020800 	.word	0x42020800
 800108c:	42020000 	.word	0x42020000
 8001090:	42020400 	.word	0x42020400
 8001094:	00000000 	.word	0x00000000

08001098 <Crear_LUT>:

	}
}

void Crear_LUT(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 50; i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	e033      	b.n	800110c <Crear_LUT+0x74>
	{
		LUT[i] = 950 + (int)(950 * sin(2 * PI * i / 50));
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fa19 	bl	80004dc <__aeabi_i2d>
 80010aa:	a320      	add	r3, pc, #128	; (adr r3, 800112c <Crear_LUT+0x94>)
 80010ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b0:	f7ff fa7e 	bl	80005b0 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b17      	ldr	r3, [pc, #92]	; (8001120 <Crear_LUT+0x88>)
 80010c2:	f7ff fb9f 	bl	8000804 <__aeabi_ddiv>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	ec43 2b17 	vmov	d7, r2, r3
 80010ce:	eeb0 0a47 	vmov.f32	s0, s14
 80010d2:	eef0 0a67 	vmov.f32	s1, s15
 80010d6:	f004 fdbb 	bl	8005c50 <sin>
 80010da:	ec51 0b10 	vmov	r0, r1, d0
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <Crear_LUT+0x8c>)
 80010e4:	f7ff fa64 	bl	80005b0 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4610      	mov	r0, r2
 80010ee:	4619      	mov	r1, r3
 80010f0:	f7ff fcf8 	bl	8000ae4 <__aeabi_d2iz>
 80010f4:	4603      	mov	r3, r0
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	f203 33b6 	addw	r3, r3, #950	; 0x3b6
 80010fc:	b299      	uxth	r1, r3
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <Crear_LUT+0x90>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i < 50; i++)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3301      	adds	r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b31      	cmp	r3, #49	; 0x31
 8001110:	ddc8      	ble.n	80010a4 <Crear_LUT+0xc>
	}
}
 8001112:	bf00      	nop
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	f3af 8000 	nop.w
 8001120:	40490000 	.word	0x40490000
 8001124:	408db000 	.word	0x408db000
 8001128:	200005f4 	.word	0x200005f4
 800112c:	54442d18 	.word	0x54442d18
 8001130:	401921fb 	.word	0x401921fb

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001146:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_MspInit+0x44>)
 8001148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <HAL_MspInit+0x44>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6613      	str	r3, [r2, #96]	; 0x60
 8001152:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <HAL_MspInit+0x44>)
 8001154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <HAL_MspInit+0x44>)
 8001160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001162:	4a08      	ldr	r2, [pc, #32]	; (8001184 <HAL_MspInit+0x44>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001168:	6593      	str	r3, [r2, #88]	; 0x58
 800116a:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_MspInit+0x44>)
 800116c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001176:	f003 f8bf 	bl	80042f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a33      	ldr	r2, [pc, #204]	; (8001274 <HAL_ADC_MspInit+0xec>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d160      	bne.n	800126c <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011aa:	4b33      	ldr	r3, [pc, #204]	; (8001278 <HAL_ADC_MspInit+0xf0>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	4a32      	ldr	r2, [pc, #200]	; (8001278 <HAL_ADC_MspInit+0xf0>)
 80011b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <HAL_ADC_MspInit+0xf0>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <HAL_ADC_MspInit+0xf0>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a2c      	ldr	r2, [pc, #176]	; (8001278 <HAL_ADC_MspInit+0xf0>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <HAL_ADC_MspInit+0xf0>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011da:	2301      	movs	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011de:	2303      	movs	r3, #3
 80011e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4823      	ldr	r0, [pc, #140]	; (800127c <HAL_ADC_MspInit+0xf4>)
 80011ee:	f002 fe51 	bl	8003e94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <HAL_ADC_MspInit+0xf8>)
 80011f4:	4a23      	ldr	r2, [pc, #140]	; (8001284 <HAL_ADC_MspInit+0xfc>)
 80011f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <HAL_ADC_MspInit+0xf8>)
 80011fa:	2205      	movs	r2, #5
 80011fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <HAL_ADC_MspInit+0xf8>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001204:	4b1e      	ldr	r3, [pc, #120]	; (8001280 <HAL_ADC_MspInit+0xf8>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_ADC_MspInit+0xf8>)
 800120c:	2280      	movs	r2, #128	; 0x80
 800120e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001210:	4b1b      	ldr	r3, [pc, #108]	; (8001280 <HAL_ADC_MspInit+0xf8>)
 8001212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001216:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_ADC_MspInit+0xf8>)
 800121a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800121e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001220:	4b17      	ldr	r3, [pc, #92]	; (8001280 <HAL_ADC_MspInit+0xf8>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <HAL_ADC_MspInit+0xf8>)
 8001228:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800122c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800122e:	4814      	ldr	r0, [pc, #80]	; (8001280 <HAL_ADC_MspInit+0xf8>)
 8001230:	f002 fb3c 	bl	80038ac <HAL_DMA_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800123a:	f7ff ff7b 	bl	8001134 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800123e:	2110      	movs	r1, #16
 8001240:	480f      	ldr	r0, [pc, #60]	; (8001280 <HAL_ADC_MspInit+0xf8>)
 8001242:	f002 fd56 	bl	8003cf2 <HAL_DMA_ConfigChannelAttributes>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800124c:	f7ff ff72 	bl	8001134 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <HAL_ADC_MspInit+0xf8>)
 8001254:	651a      	str	r2, [r3, #80]	; 0x50
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <HAL_ADC_MspInit+0xf8>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	2025      	movs	r0, #37	; 0x25
 8001262:	f001 ffaa 	bl	80031ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001266:	2025      	movs	r0, #37	; 0x25
 8001268:	f001 ffc1 	bl	80031ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	; 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	42028000 	.word	0x42028000
 8001278:	40021000 	.word	0x40021000
 800127c:	42020800 	.word	0x42020800
 8001280:	20000090 	.word	0x20000090
 8001284:	40020008 	.word	0x40020008

08001288 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a33      	ldr	r2, [pc, #204]	; (8001374 <HAL_DAC_MspInit+0xec>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d160      	bne.n	800136c <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80012aa:	4b33      	ldr	r3, [pc, #204]	; (8001378 <HAL_DAC_MspInit+0xf0>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	4a32      	ldr	r2, [pc, #200]	; (8001378 <HAL_DAC_MspInit+0xf0>)
 80012b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012b4:	6593      	str	r3, [r2, #88]	; 0x58
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <HAL_DAC_MspInit+0xf0>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <HAL_DAC_MspInit+0xf0>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c6:	4a2c      	ldr	r2, [pc, #176]	; (8001378 <HAL_DAC_MspInit+0xf0>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ce:	4b2a      	ldr	r3, [pc, #168]	; (8001378 <HAL_DAC_MspInit+0xf0>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012da:	2310      	movs	r3, #16
 80012dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012de:	2303      	movs	r3, #3
 80012e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4823      	ldr	r0, [pc, #140]	; (800137c <HAL_DAC_MspInit+0xf4>)
 80012ee:	f002 fdd1 	bl	8003e94 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <HAL_DAC_MspInit+0xf8>)
 80012f4:	4a23      	ldr	r2, [pc, #140]	; (8001384 <HAL_DAC_MspInit+0xfc>)
 80012f6:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80012f8:	4b21      	ldr	r3, [pc, #132]	; (8001380 <HAL_DAC_MspInit+0xf8>)
 80012fa:	2207      	movs	r2, #7
 80012fc:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012fe:	4b20      	ldr	r3, [pc, #128]	; (8001380 <HAL_DAC_MspInit+0xf8>)
 8001300:	2210      	movs	r2, #16
 8001302:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001304:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <HAL_DAC_MspInit+0xf8>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800130a:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <HAL_DAC_MspInit+0xf8>)
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <HAL_DAC_MspInit+0xf8>)
 8001312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001316:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001318:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_DAC_MspInit+0xf8>)
 800131a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800131e:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8001320:	4b17      	ldr	r3, [pc, #92]	; (8001380 <HAL_DAC_MspInit+0xf8>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_DAC_MspInit+0xf8>)
 8001328:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800132c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800132e:	4814      	ldr	r0, [pc, #80]	; (8001380 <HAL_DAC_MspInit+0xf8>)
 8001330:	f002 fabc 	bl	80038ac <HAL_DMA_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800133a:	f7ff fefb 	bl	8001134 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_dac1_ch1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800133e:	2110      	movs	r1, #16
 8001340:	480f      	ldr	r0, [pc, #60]	; (8001380 <HAL_DAC_MspInit+0xf8>)
 8001342:	f002 fcd6 	bl	8003cf2 <HAL_DMA_ConfigChannelAttributes>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 800134c:	f7ff fef2 	bl	8001134 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_DAC_MspInit+0xf8>)
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_DAC_MspInit+0xf8>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(DAC_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	2026      	movs	r0, #38	; 0x26
 8001362:	f001 ff2a 	bl	80031ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DAC_IRQn);
 8001366:	2026      	movs	r0, #38	; 0x26
 8001368:	f001 ff41 	bl	80031ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40007400 	.word	0x40007400
 8001378:	40021000 	.word	0x40021000
 800137c:	42020000 	.word	0x42020000
 8001380:	2000010c 	.word	0x2000010c
 8001384:	4002001c 	.word	0x4002001c

08001388 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001398:	d114      	bne.n	80013c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_TIM_Base_MspInit+0x68>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <HAL_TIM_Base_MspInit+0x68>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6593      	str	r3, [r2, #88]	; 0x58
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_TIM_Base_MspInit+0x68>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	202d      	movs	r0, #45	; 0x2d
 80013b8:	f001 feff 	bl	80031ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013bc:	202d      	movs	r0, #45	; 0x2d
 80013be:	f001 ff16 	bl	80031ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80013c2:	e010      	b.n	80013e6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <HAL_TIM_Base_MspInit+0x6c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d10b      	bne.n	80013e6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_TIM_Base_MspInit+0x68>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_TIM_Base_MspInit+0x68>)
 80013d4:	f043 0310 	orr.w	r3, r3, #16
 80013d8:	6593      	str	r3, [r2, #88]	; 0x58
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_TIM_Base_MspInit+0x68>)
 80013dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40001000 	.word	0x40001000

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013fc:	e7fe      	b.n	80013fc <NMI_Handler+0x4>

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <MemManage_Handler+0x4>

0800140a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <UsageFault_Handler+0x4>

08001416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001444:	f000 f972 	bl	800172c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <DMA1_Channel1_IRQHandler+0x10>)
 8001452:	f002 fb4e 	bl	8003af2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000090 	.word	0x20000090

08001460 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <DMA1_Channel2_IRQHandler+0x10>)
 8001466:	f002 fb44 	bl	8003af2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000010c 	.word	0x2000010c

08001474 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001478:	4802      	ldr	r0, [pc, #8]	; (8001484 <ADC1_2_IRQHandler+0x10>)
 800147a:	f000 fd81 	bl	8001f80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000028 	.word	0x20000028

08001488 <DAC_IRQHandler>:

/**
  * @brief This function handles DAC1 interrupt.
  */
void DAC_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DAC_IRQn 0 */

  /* USER CODE END DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 800148c:	4802      	ldr	r0, [pc, #8]	; (8001498 <DAC_IRQHandler+0x10>)
 800148e:	f001 ffab 	bl	80033e8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN DAC_IRQn 1 */

  /* USER CODE END DAC_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200000f8 	.word	0x200000f8

0800149c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <TIM2_IRQHandler+0x10>)
 80014a2:	f003 ffbf 	bl	8005424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000174 	.word	0x20000174

080014b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <SystemInit+0x20>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <SystemInit+0x20>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80014da:	4b4f      	ldr	r3, [pc, #316]	; (8001618 <SystemCoreClockUpdate+0x144>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d107      	bne.n	80014f6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80014e6:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <SystemCoreClockUpdate+0x144>)
 80014e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e005      	b.n	8001502 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80014f6:	4b48      	ldr	r3, [pc, #288]	; (8001618 <SystemCoreClockUpdate+0x144>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	f003 030f 	and.w	r3, r3, #15
 8001500:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001502:	4a46      	ldr	r2, [pc, #280]	; (800161c <SystemCoreClockUpdate+0x148>)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800150c:	4b42      	ldr	r3, [pc, #264]	; (8001618 <SystemCoreClockUpdate+0x144>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b0c      	cmp	r3, #12
 8001516:	d866      	bhi.n	80015e6 <SystemCoreClockUpdate+0x112>
 8001518:	a201      	add	r2, pc, #4	; (adr r2, 8001520 <SystemCoreClockUpdate+0x4c>)
 800151a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151e:	bf00      	nop
 8001520:	08001555 	.word	0x08001555
 8001524:	080015e7 	.word	0x080015e7
 8001528:	080015e7 	.word	0x080015e7
 800152c:	080015e7 	.word	0x080015e7
 8001530:	0800155d 	.word	0x0800155d
 8001534:	080015e7 	.word	0x080015e7
 8001538:	080015e7 	.word	0x080015e7
 800153c:	080015e7 	.word	0x080015e7
 8001540:	08001565 	.word	0x08001565
 8001544:	080015e7 	.word	0x080015e7
 8001548:	080015e7 	.word	0x080015e7
 800154c:	080015e7 	.word	0x080015e7
 8001550:	0800156d 	.word	0x0800156d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001554:	4a32      	ldr	r2, [pc, #200]	; (8001620 <SystemCoreClockUpdate+0x14c>)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	6013      	str	r3, [r2, #0]
      break;
 800155a:	e048      	b.n	80015ee <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800155c:	4b30      	ldr	r3, [pc, #192]	; (8001620 <SystemCoreClockUpdate+0x14c>)
 800155e:	4a31      	ldr	r2, [pc, #196]	; (8001624 <SystemCoreClockUpdate+0x150>)
 8001560:	601a      	str	r2, [r3, #0]
      break;
 8001562:	e044      	b.n	80015ee <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001564:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <SystemCoreClockUpdate+0x14c>)
 8001566:	4a2f      	ldr	r2, [pc, #188]	; (8001624 <SystemCoreClockUpdate+0x150>)
 8001568:	601a      	str	r2, [r3, #0]
      break;
 800156a:	e040      	b.n	80015ee <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800156c:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <SystemCoreClockUpdate+0x144>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001576:	4b28      	ldr	r3, [pc, #160]	; (8001618 <SystemCoreClockUpdate+0x144>)
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	3301      	adds	r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d003      	beq.n	8001592 <SystemCoreClockUpdate+0xbe>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d006      	beq.n	800159e <SystemCoreClockUpdate+0xca>
 8001590:	e00b      	b.n	80015aa <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001592:	4a24      	ldr	r2, [pc, #144]	; (8001624 <SystemCoreClockUpdate+0x150>)
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	fbb2 f3f3 	udiv	r3, r2, r3
 800159a:	613b      	str	r3, [r7, #16]
          break;
 800159c:	e00b      	b.n	80015b6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800159e:	4a21      	ldr	r2, [pc, #132]	; (8001624 <SystemCoreClockUpdate+0x150>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	613b      	str	r3, [r7, #16]
          break;
 80015a8:	e005      	b.n	80015b6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	613b      	str	r3, [r7, #16]
          break;
 80015b4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <SystemCoreClockUpdate+0x144>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	0a1b      	lsrs	r3, r3, #8
 80015bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <SystemCoreClockUpdate+0x144>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0e5b      	lsrs	r3, r3, #25
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	3301      	adds	r3, #1
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e0:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <SystemCoreClockUpdate+0x14c>)
 80015e2:	6013      	str	r3, [r2, #0]
      break;
 80015e4:	e003      	b.n	80015ee <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80015e6:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <SystemCoreClockUpdate+0x14c>)
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	6013      	str	r3, [r2, #0]
      break;
 80015ec:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <SystemCoreClockUpdate+0x144>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <SystemCoreClockUpdate+0x154>)
 80015fa:	5cd3      	ldrb	r3, [r2, r3]
 80015fc:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <SystemCoreClockUpdate+0x14c>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
 8001608:	4a05      	ldr	r2, [pc, #20]	; (8001620 <SystemCoreClockUpdate+0x14c>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	371c      	adds	r7, #28
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40021000 	.word	0x40021000
 800161c:	08006d08 	.word	0x08006d08
 8001620:	20000000 	.word	0x20000000
 8001624:	00f42400 	.word	0x00f42400
 8001628:	08006cf0 	.word	0x08006cf0

0800162c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001630:	f7ff ff3e 	bl	80014b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001634:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001636:	e003      	b.n	8001640 <LoopCopyDataInit>

08001638 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800163a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800163c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800163e:	3104      	adds	r1, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001640:	480a      	ldr	r0, [pc, #40]	; (800166c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001644:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001646:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001648:	d3f6      	bcc.n	8001638 <CopyDataInit>
	ldr	r2, =_sbss
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <LoopForever+0x12>)
	b	LoopFillZerobss
 800164c:	e002      	b.n	8001654 <LoopFillZerobss>

0800164e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800164e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001650:	f842 3b04 	str.w	r3, [r2], #4

08001654 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <LoopForever+0x16>)
	cmp	r2, r3
 8001656:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001658:	d3f9      	bcc.n	800164e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800165a:	f004 fad5 	bl	8005c08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800165e:	f7ff fa69 	bl	8000b34 <main>

08001662 <LoopForever>:

LoopForever:
    b LoopForever
 8001662:	e7fe      	b.n	8001662 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001664:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001668:	08006f28 	.word	0x08006f28
	ldr	r0, =_sdata
 800166c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001670:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001674:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001678:	20000668 	.word	0x20000668

0800167c <COMP_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800167c:	e7fe      	b.n	800167c <COMP_IRQHandler>

0800167e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001688:	2004      	movs	r0, #4
 800168a:	f001 fd8b 	bl	80031a4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800168e:	f7ff ff21 	bl	80014d4 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001692:	2007      	movs	r0, #7
 8001694:	f000 f80e 	bl	80016b4 <HAL_InitTick>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d002      	beq.n	80016a4 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	71fb      	strb	r3, [r7, #7]
 80016a2:	e001      	b.n	80016a8 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016a4:	f7ff fd4c 	bl	8001140 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016a8:	79fb      	ldrb	r3, [r7, #7]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <HAL_InitTick+0x6c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d023      	beq.n	8001710 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <HAL_InitTick+0x70>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <HAL_InitTick+0x6c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 fd93 	bl	800320a <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10f      	bne.n	800170a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b07      	cmp	r3, #7
 80016ee:	d809      	bhi.n	8001704 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f0:	2200      	movs	r2, #0
 80016f2:	6879      	ldr	r1, [r7, #4]
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	f001 fd5f 	bl	80031ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <HAL_InitTick+0x74>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e007      	b.n	8001714 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e004      	b.n	8001714 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	73fb      	strb	r3, [r7, #15]
 800170e:	e001      	b.n	8001714 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000008 	.word	0x20000008
 8001724:	20000000 	.word	0x20000000
 8001728:	20000004 	.word	0x20000004

0800172c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <HAL_IncTick+0x20>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x24>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <HAL_IncTick+0x24>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20000008 	.word	0x20000008
 8001750:	20000664 	.word	0x20000664

08001754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return uwTick;
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <HAL_GetTick+0x14>)
 800175a:	681b      	ldr	r3, [r3, #0]
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	20000664 	.word	0x20000664

0800176c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	609a      	str	r2, [r3, #8]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	609a      	str	r2, [r3, #8]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3360      	adds	r3, #96	; 0x60
 80017e6:	461a      	mov	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <LL_ADC_SetOffset+0x44>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	4313      	orrs	r3, r2
 8001804:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800180c:	bf00      	nop
 800180e:	371c      	adds	r7, #28
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	03fff000 	.word	0x03fff000

0800181c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3360      	adds	r3, #96	; 0x60
 800182a:	461a      	mov	r2, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800183c:	4618      	mov	r0, r3
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	3360      	adds	r3, #96	; 0x60
 8001858:	461a      	mov	r2, r3
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	431a      	orrs	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001872:	bf00      	nop
 8001874:	371c      	adds	r7, #28
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	431a      	orrs	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	615a      	str	r2, [r3, #20]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018b8:	2301      	movs	r3, #1
 80018ba:	e000      	b.n	80018be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b087      	sub	sp, #28
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	60f8      	str	r0, [r7, #12]
 80018d2:	60b9      	str	r1, [r7, #8]
 80018d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	3330      	adds	r3, #48	; 0x30
 80018da:	461a      	mov	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	0a1b      	lsrs	r3, r3, #8
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	4413      	add	r3, r2
 80018e8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f003 031f 	and.w	r3, r3, #31
 80018f4:	211f      	movs	r1, #31
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	401a      	ands	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	0e9b      	lsrs	r3, r3, #26
 8001902:	f003 011f 	and.w	r1, r3, #31
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	f003 031f 	and.w	r3, r3, #31
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	431a      	orrs	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001916:	bf00      	nop
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001948:	b480      	push	{r7}
 800194a:	b087      	sub	sp, #28
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	3314      	adds	r3, #20
 8001958:	461a      	mov	r2, r3
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	0e5b      	lsrs	r3, r3, #25
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	4413      	add	r3, r2
 8001966:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	0d1b      	lsrs	r3, r3, #20
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	2107      	movs	r1, #7
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	401a      	ands	r2, r3
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	0d1b      	lsrs	r3, r3, #20
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	fa01 f303 	lsl.w	r3, r1, r3
 800198c:	431a      	orrs	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001992:	bf00      	nop
 8001994:	371c      	adds	r7, #28
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b8:	43db      	mvns	r3, r3
 80019ba:	401a      	ands	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0318 	and.w	r3, r3, #24
 80019c2:	4908      	ldr	r1, [pc, #32]	; (80019e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019c4:	40d9      	lsrs	r1, r3
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	400b      	ands	r3, r1
 80019ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ce:	431a      	orrs	r2, r3
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	0007ffff 	.word	0x0007ffff

080019e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f003 031f 	and.w	r3, r3, #31
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6093      	str	r3, [r2, #8]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a58:	d101      	bne.n	8001a5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001aa8:	d101      	bne.n	8001aae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001acc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <LL_ADC_IsEnabled+0x18>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <LL_ADC_IsEnabled+0x1a>
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b1e:	f043 0204 	orr.w	r2, r3, #4
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d101      	bne.n	8001b4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d101      	bne.n	8001b70 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e12e      	b.n	8001df8 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff faed 	bl	8001188 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff3f 	bl	8001a44 <LL_ADC_IsDeepPowerDownEnabled>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff25 	bl	8001a20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff5a 	bl	8001a94 <LL_ADC_IsInternalRegulatorEnabled>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d115      	bne.n	8001c12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff3e 	bl	8001a6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bf0:	4b83      	ldr	r3, [pc, #524]	; (8001e00 <HAL_ADC_Init+0x280>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	099b      	lsrs	r3, r3, #6
 8001bf6:	4a83      	ldr	r2, [pc, #524]	; (8001e04 <HAL_ADC_Init+0x284>)
 8001bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfc:	099b      	lsrs	r3, r3, #6
 8001bfe:	3301      	adds	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c04:	e002      	b.n	8001c0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f9      	bne.n	8001c06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff3c 	bl	8001a94 <LL_ADC_IsInternalRegulatorEnabled>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10d      	bne.n	8001c3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	f043 0210 	orr.w	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c32:	f043 0201 	orr.w	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff75 	bl	8001b32 <LL_ADC_REG_IsConversionOngoing>
 8001c48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 80c7 	bne.w	8001de6 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 80c3 	bne.w	8001de6 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c68:	f043 0202 	orr.w	r2, r3, #2
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff35 	bl	8001ae4 <LL_ADC_IsEnabled>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d110      	bne.n	8001ca2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c80:	4861      	ldr	r0, [pc, #388]	; (8001e08 <HAL_ADC_Init+0x288>)
 8001c82:	f7ff ff2f 	bl	8001ae4 <LL_ADC_IsEnabled>
 8001c86:	4604      	mov	r4, r0
 8001c88:	4860      	ldr	r0, [pc, #384]	; (8001e0c <HAL_ADC_Init+0x28c>)
 8001c8a:	f7ff ff2b 	bl	8001ae4 <LL_ADC_IsEnabled>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4323      	orrs	r3, r4
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d105      	bne.n	8001ca2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	485c      	ldr	r0, [pc, #368]	; (8001e10 <HAL_ADC_Init+0x290>)
 8001c9e:	f7ff fd65 	bl	800176c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	7e5b      	ldrb	r3, [r3, #25]
 8001ca6:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cac:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001cb2:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001cb8:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc0:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d106      	bne.n	8001cde <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	045b      	lsls	r3, r3, #17
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cea:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68da      	ldr	r2, [r3, #12]
 8001d00:	4b44      	ldr	r3, [pc, #272]	; (8001e14 <HAL_ADC_Init+0x294>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	69b9      	ldr	r1, [r7, #24]
 8001d0a:	430b      	orrs	r3, r1
 8001d0c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff20 	bl	8001b58 <LL_ADC_INJ_IsConversionOngoing>
 8001d18:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d140      	bne.n	8001da2 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d13d      	bne.n	8001da2 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	7e1b      	ldrb	r3, [r3, #24]
 8001d2e:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d30:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d38:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d48:	f023 0306 	bic.w	r3, r3, #6
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	69b9      	ldr	r1, [r7, #24]
 8001d52:	430b      	orrs	r3, r1
 8001d54:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d118      	bne.n	8001d92 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d6a:	f023 0304 	bic.w	r3, r3, #4
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d76:	4311      	orrs	r1, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d7c:	4311      	orrs	r1, r2
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d82:	430a      	orrs	r2, r1
 8001d84:	431a      	orrs	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0201 	orr.w	r2, r2, #1
 8001d8e:	611a      	str	r2, [r3, #16]
 8001d90:	e007      	b.n	8001da2 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0201 	bic.w	r2, r2, #1
 8001da0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d10c      	bne.n	8001dc4 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f023 010f 	bic.w	r1, r3, #15
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	1e5a      	subs	r2, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc2:	e007      	b.n	8001dd4 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 020f 	bic.w	r2, r2, #15
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	f023 0303 	bic.w	r3, r3, #3
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	659a      	str	r2, [r3, #88]	; 0x58
 8001de4:	e007      	b.n	8001df6 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	f043 0210 	orr.w	r2, r3, #16
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001df6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3724      	adds	r7, #36	; 0x24
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd90      	pop	{r4, r7, pc}
 8001e00:	20000000 	.word	0x20000000
 8001e04:	053e2d63 	.word	0x053e2d63
 8001e08:	42028000 	.word	0x42028000
 8001e0c:	42028100 	.word	0x42028100
 8001e10:	42028300 	.word	0x42028300
 8001e14:	fff0c007 	.word	0xfff0c007

08001e18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e24:	4850      	ldr	r0, [pc, #320]	; (8001f68 <HAL_ADC_Start_DMA+0x150>)
 8001e26:	f7ff fddf 	bl	80019e8 <LL_ADC_GetMultimode>
 8001e2a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fe7e 	bl	8001b32 <LL_ADC_REG_IsConversionOngoing>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f040 808e 	bne.w	8001f5a <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_Start_DMA+0x34>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e089      	b.n	8001f60 <HAL_ADC_Start_DMA+0x148>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d005      	beq.n	8001e66 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b05      	cmp	r3, #5
 8001e5e:	d002      	beq.n	8001e66 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b09      	cmp	r3, #9
 8001e64:	d172      	bne.n	8001f4c <HAL_ADC_Start_DMA+0x134>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 feb6 	bl	8002bd8 <ADC_Enable>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001e70:	7dfb      	ldrb	r3, [r7, #23]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d165      	bne.n	8001f42 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e7e:	f023 0301 	bic.w	r3, r3, #1
 8001e82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a37      	ldr	r2, [pc, #220]	; (8001f6c <HAL_ADC_Start_DMA+0x154>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d002      	beq.n	8001e9a <HAL_ADC_Start_DMA+0x82>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	e000      	b.n	8001e9c <HAL_ADC_Start_DMA+0x84>
 8001e9a:	4b35      	ldr	r3, [pc, #212]	; (8001f70 <HAL_ADC_Start_DMA+0x158>)
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d002      	beq.n	8001eaa <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d105      	bne.n	8001eb6 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	659a      	str	r2, [r3, #88]	; 0x58
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d006      	beq.n	8001ed0 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	f023 0206 	bic.w	r2, r3, #6
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ece:	e002      	b.n	8001ed6 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eda:	4a26      	ldr	r2, [pc, #152]	; (8001f74 <HAL_ADC_Start_DMA+0x15c>)
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ee2:	4a25      	ldr	r2, [pc, #148]	; (8001f78 <HAL_ADC_Start_DMA+0x160>)
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eea:	4a24      	ldr	r2, [pc, #144]	; (8001f7c <HAL_ADC_Start_DMA+0x164>)
 8001eec:	63da      	str	r2, [r3, #60]	; 0x3c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	221c      	movs	r2, #28
 8001ef4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0210 	orr.w	r2, r2, #16
 8001f0c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f042 0201 	orr.w	r2, r2, #1
 8001f1c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3340      	adds	r3, #64	; 0x40
 8001f28:	4619      	mov	r1, r3
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f001 fd65 	bl	80039fc <HAL_DMA_Start_IT>
 8001f32:	4603      	mov	r3, r0
 8001f34:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fde5 	bl	8001b0a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001f40:	e00d      	b.n	8001f5e <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      if (tmp_hal_status == HAL_OK)
 8001f4a:	e008      	b.n	8001f5e <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001f58:	e001      	b.n	8001f5e <HAL_ADC_Start_DMA+0x146>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	42028300 	.word	0x42028300
 8001f6c:	42028100 	.word	0x42028100
 8001f70:	42028000 	.word	0x42028000
 8001f74:	08002ce5 	.word	0x08002ce5
 8001f78:	08002dbd 	.word	0x08002dbd
 8001f7c:	08002dd9 	.word	0x08002dd9

08001f80 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	; 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f9c:	4882      	ldr	r0, [pc, #520]	; (80021a8 <HAL_ADC_IRQHandler+0x228>)
 8001f9e:	f7ff fd23 	bl	80019e8 <LL_ADC_GetMultimode>
 8001fa2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d017      	beq.n	8001fde <HAL_ADC_IRQHandler+0x5e>
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d012      	beq.n	8001fde <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 ff69 	bl	8002ea8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d004      	beq.n	8001ff2 <HAL_ADC_IRQHandler+0x72>
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10a      	bne.n	8002008 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8083 	beq.w	8002104 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d07d      	beq.n	8002104 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fc3d 	bl	80018a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d062      	beq.n	80020f6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5d      	ldr	r2, [pc, #372]	; (80021ac <HAL_ADC_IRQHandler+0x22c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d002      	beq.n	8002040 <HAL_ADC_IRQHandler+0xc0>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	e000      	b.n	8002042 <HAL_ADC_IRQHandler+0xc2>
 8002040:	4b5b      	ldr	r3, [pc, #364]	; (80021b0 <HAL_ADC_IRQHandler+0x230>)
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	4293      	cmp	r3, r2
 8002048:	d008      	beq.n	800205c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b05      	cmp	r3, #5
 8002054:	d002      	beq.n	800205c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b09      	cmp	r3, #9
 800205a:	d104      	bne.n	8002066 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	623b      	str	r3, [r7, #32]
 8002064:	e00c      	b.n	8002080 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a50      	ldr	r2, [pc, #320]	; (80021ac <HAL_ADC_IRQHandler+0x22c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d002      	beq.n	8002076 <HAL_ADC_IRQHandler+0xf6>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	e000      	b.n	8002078 <HAL_ADC_IRQHandler+0xf8>
 8002076:	4b4e      	ldr	r3, [pc, #312]	; (80021b0 <HAL_ADC_IRQHandler+0x230>)
 8002078:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d135      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b08      	cmp	r3, #8
 8002096:	d12e      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fd48 	bl	8001b32 <LL_ADC_REG_IsConversionOngoing>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d11a      	bne.n	80020de <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 020c 	bic.w	r2, r2, #12
 80020b6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d112      	bne.n	80020f6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	f043 0201 	orr.w	r2, r3, #1
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	659a      	str	r2, [r3, #88]	; 0x58
 80020dc:	e00b      	b.n	80020f6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	f043 0210 	orr.w	r2, r3, #16
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	f043 0201 	orr.w	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f95c 	bl	80023b4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	220c      	movs	r2, #12
 8002102:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <HAL_ADC_IRQHandler+0x198>
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10b      	bne.n	8002130 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 809f 	beq.w	8002262 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 8099 	beq.w	8002262 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	d105      	bne.n	8002148 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fbe8 	bl	8001922 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002152:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fba3 	bl	80018a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800215e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a11      	ldr	r2, [pc, #68]	; (80021ac <HAL_ADC_IRQHandler+0x22c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d002      	beq.n	8002170 <HAL_ADC_IRQHandler+0x1f0>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	e000      	b.n	8002172 <HAL_ADC_IRQHandler+0x1f2>
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <HAL_ADC_IRQHandler+0x230>)
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	4293      	cmp	r3, r2
 8002178:	d008      	beq.n	800218c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d005      	beq.n	800218c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	2b06      	cmp	r3, #6
 8002184:	d002      	beq.n	800218c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b07      	cmp	r3, #7
 800218a:	d104      	bne.n	8002196 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	623b      	str	r3, [r7, #32]
 8002194:	e013      	b.n	80021be <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a04      	ldr	r2, [pc, #16]	; (80021ac <HAL_ADC_IRQHandler+0x22c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d009      	beq.n	80021b4 <HAL_ADC_IRQHandler+0x234>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	e007      	b.n	80021b6 <HAL_ADC_IRQHandler+0x236>
 80021a6:	bf00      	nop
 80021a8:	42028300 	.word	0x42028300
 80021ac:	42028100 	.word	0x42028100
 80021b0:	42028000 	.word	0x42028000
 80021b4:	4b7d      	ldr	r3, [pc, #500]	; (80023ac <HAL_ADC_IRQHandler+0x42c>)
 80021b6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d047      	beq.n	8002254 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80021c4:	6a3b      	ldr	r3, [r7, #32]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_ADC_IRQHandler+0x25e>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d03f      	beq.n	8002254 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80021d4:	6a3b      	ldr	r3, [r7, #32]
 80021d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d13a      	bne.n	8002254 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e8:	2b40      	cmp	r3, #64	; 0x40
 80021ea:	d133      	bne.n	8002254 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d12e      	bne.n	8002254 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fcac 	bl	8001b58 <LL_ADC_INJ_IsConversionOngoing>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d11a      	bne.n	800223c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002214:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	659a      	str	r2, [r3, #88]	; 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d112      	bne.n	8002254 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	659a      	str	r2, [r3, #88]	; 0x58
 800223a:	e00b      	b.n	8002254 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	f043 0210 	orr.w	r2, r3, #16
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	659a      	str	r2, [r3, #88]	; 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	f043 0201 	orr.w	r2, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	65da      	str	r2, [r3, #92]	; 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fdff 	bl	8002e58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2260      	movs	r2, #96	; 0x60
 8002260:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002268:	2b00      	cmp	r3, #0
 800226a:	d011      	beq.n	8002290 <HAL_ADC_IRQHandler+0x310>
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00c      	beq.n	8002290 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f8aa 	bl	80023dc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2280      	movs	r2, #128	; 0x80
 800228e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d012      	beq.n	80022c0 <HAL_ADC_IRQHandler+0x340>
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00d      	beq.n	80022c0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 fde5 	bl	8002e80 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d012      	beq.n	80022f0 <HAL_ADC_IRQHandler+0x370>
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00d      	beq.n	80022f0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fdd7 	bl	8002e94 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d036      	beq.n	8002368 <HAL_ADC_IRQHandler+0x3e8>
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d031      	beq.n	8002368 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 800230c:	2301      	movs	r3, #1
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
 8002310:	e014      	b.n	800233c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002318:	4825      	ldr	r0, [pc, #148]	; (80023b0 <HAL_ADC_IRQHandler+0x430>)
 800231a:	f7ff fb73 	bl	8001a04 <LL_ADC_GetMultiDMATransfer>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002324:	2301      	movs	r3, #1
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
 8002328:	e008      	b.n	800233c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002338:	2301      	movs	r3, #1
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	2b01      	cmp	r3, #1
 8002340:	d10e      	bne.n	8002360 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	f043 0202 	orr.w	r2, r3, #2
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f848 	bl	80023f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2210      	movs	r2, #16
 8002366:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236e:	2b00      	cmp	r3, #0
 8002370:	d018      	beq.n	80023a4 <HAL_ADC_IRQHandler+0x424>
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	f043 0208 	orr.w	r2, r3, #8
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800239c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fd64 	bl	8002e6c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80023a4:	bf00      	nop
 80023a6:	3728      	adds	r7, #40	; 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	42028000 	.word	0x42028000
 80023b0:	42028300 	.word	0x42028300

080023b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b0b7      	sub	sp, #220	; 0xdc
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x22>
 8002422:	2302      	movs	r3, #2
 8002424:	e3c1      	b.n	8002baa <HAL_ADC_ConfigChannel+0x7a6>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff fb7d 	bl	8001b32 <LL_ADC_REG_IsConversionOngoing>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 83a6 	bne.w	8002b8c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6818      	ldr	r0, [r3, #0]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	f7ff fa3c 	bl	80018ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fb6b 	bl	8001b32 <LL_ADC_REG_IsConversionOngoing>
 800245c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fb77 	bl	8001b58 <LL_ADC_INJ_IsConversionOngoing>
 800246a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800246e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 81c1 	bne.w	80027fa <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002478:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800247c:	2b00      	cmp	r3, #0
 800247e:	f040 81bc 	bne.w	80027fa <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800248a:	d10f      	bne.n	80024ac <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6818      	ldr	r0, [r3, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2200      	movs	r2, #0
 8002496:	4619      	mov	r1, r3
 8002498:	f7ff fa56 	bl	8001948 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff f9ea 	bl	800187e <LL_ADC_SetSamplingTimeCommonConfig>
 80024aa:	e00e      	b.n	80024ca <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	461a      	mov	r2, r3
 80024ba:	f7ff fa45 	bl	8001948 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff f9da 	bl	800187e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	08db      	lsrs	r3, r3, #3
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d00a      	beq.n	8002502 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6919      	ldr	r1, [r3, #16]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024fc:	f7ff f96a 	bl	80017d4 <LL_ADC_SetOffset>
 8002500:	e17b      	b.n	80027fa <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff f987 	bl	800181c <LL_ADC_GetOffsetChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10a      	bne.n	800252e <HAL_ADC_ConfigChannel+0x12a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f97c 	bl	800181c <LL_ADC_GetOffsetChannel>
 8002524:	4603      	mov	r3, r0
 8002526:	0e9b      	lsrs	r3, r3, #26
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	e01e      	b.n	800256c <HAL_ADC_ConfigChannel+0x168>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2100      	movs	r1, #0
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff f971 	bl	800181c <LL_ADC_GetOffsetChannel>
 800253a:	4603      	mov	r3, r0
 800253c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002544:	fa93 f3a3 	rbit	r3, r3
 8002548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800254c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002550:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002554:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 800255c:	2320      	movs	r3, #32
 800255e:	e004      	b.n	800256a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8002560:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002574:	2b00      	cmp	r3, #0
 8002576:	d105      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x180>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0e9b      	lsrs	r3, r3, #26
 800257e:	f003 031f 	and.w	r3, r3, #31
 8002582:	e018      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x1b2>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002598:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800259c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80025a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 80025a8:	2320      	movs	r3, #32
 80025aa:	e004      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 80025ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80025b0:	fab3 f383 	clz	r3, r3
 80025b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d106      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2200      	movs	r2, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff f940 	bl	8001848 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2101      	movs	r1, #1
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff f924 	bl	800181c <LL_ADC_GetOffsetChannel>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10a      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x1f0>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2101      	movs	r1, #1
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff f919 	bl	800181c <LL_ADC_GetOffsetChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	0e9b      	lsrs	r3, r3, #26
 80025ee:	f003 021f 	and.w	r2, r3, #31
 80025f2:	e01e      	b.n	8002632 <HAL_ADC_ConfigChannel+0x22e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2101      	movs	r1, #1
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f90e 	bl	800181c <LL_ADC_GetOffsetChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002616:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800261a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8002622:	2320      	movs	r3, #32
 8002624:	e004      	b.n	8002630 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8002626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263a:	2b00      	cmp	r3, #0
 800263c:	d105      	bne.n	800264a <HAL_ADC_ConfigChannel+0x246>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	0e9b      	lsrs	r3, r3, #26
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	e018      	b.n	800267c <HAL_ADC_ConfigChannel+0x278>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800265e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002662:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002666:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 800266e:	2320      	movs	r3, #32
 8002670:	e004      	b.n	800267c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8002672:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800267c:	429a      	cmp	r2, r3
 800267e:	d106      	bne.n	800268e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2200      	movs	r2, #0
 8002686:	2101      	movs	r1, #1
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff f8dd 	bl	8001848 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2102      	movs	r1, #2
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff f8c1 	bl	800181c <LL_ADC_GetOffsetChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x2b6>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2102      	movs	r1, #2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f8b6 	bl	800181c <LL_ADC_GetOffsetChannel>
 80026b0:	4603      	mov	r3, r0
 80026b2:	0e9b      	lsrs	r3, r3, #26
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	e01e      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x2f4>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2102      	movs	r1, #2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff f8ab 	bl	800181c <LL_ADC_GetOffsetChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80026d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80026e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80026e8:	2320      	movs	r3, #32
 80026ea:	e004      	b.n	80026f6 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80026ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002700:	2b00      	cmp	r3, #0
 8002702:	d105      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x30c>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	0e9b      	lsrs	r3, r3, #26
 800270a:	f003 031f 	and.w	r3, r3, #31
 800270e:	e016      	b.n	800273e <HAL_ADC_ConfigChannel+0x33a>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002728:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002730:	2320      	movs	r3, #32
 8002732:	e004      	b.n	800273e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8002734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002738:	fab3 f383 	clz	r3, r3
 800273c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800273e:	429a      	cmp	r2, r3
 8002740:	d106      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2200      	movs	r2, #0
 8002748:	2102      	movs	r1, #2
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff f87c 	bl	8001848 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2103      	movs	r1, #3
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff f860 	bl	800181c <LL_ADC_GetOffsetChannel>
 800275c:	4603      	mov	r3, r0
 800275e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10a      	bne.n	800277c <HAL_ADC_ConfigChannel+0x378>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2103      	movs	r1, #3
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff f855 	bl	800181c <LL_ADC_GetOffsetChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	0e9b      	lsrs	r3, r3, #26
 8002776:	f003 021f 	and.w	r2, r3, #31
 800277a:	e017      	b.n	80027ac <HAL_ADC_ConfigChannel+0x3a8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2103      	movs	r1, #3
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff f84a 	bl	800181c <LL_ADC_GetOffsetChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002796:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 800279e:	2320      	movs	r3, #32
 80027a0:	e003      	b.n	80027aa <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80027a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027a4:	fab3 f383 	clz	r3, r3
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x3c0>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	0e9b      	lsrs	r3, r3, #26
 80027be:	f003 031f 	and.w	r3, r3, #31
 80027c2:	e011      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x3e4>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80027d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80027d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80027dc:	2320      	movs	r3, #32
 80027de:	e003      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80027e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d106      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2200      	movs	r2, #0
 80027f2:	2103      	movs	r1, #3
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff f827 	bl	8001848 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff f970 	bl	8001ae4 <LL_ADC_IsEnabled>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	f040 81c9 	bne.w	8002b9e <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	6819      	ldr	r1, [r3, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	461a      	mov	r2, r3
 800281a:	f7ff f8c1 	bl	80019a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	4a8f      	ldr	r2, [pc, #572]	; (8002a60 <HAL_ADC_ConfigChannel+0x65c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	f040 8131 	bne.w	8002a8c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10b      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x44e>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	0e9b      	lsrs	r3, r3, #26
 8002840:	3301      	adds	r3, #1
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	2b09      	cmp	r3, #9
 8002848:	bf94      	ite	ls
 800284a:	2301      	movls	r3, #1
 800284c:	2300      	movhi	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	e019      	b.n	8002886 <HAL_ADC_ConfigChannel+0x482>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800285a:	fa93 f3a3 	rbit	r3, r3
 800285e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002862:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002864:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 800286a:	2320      	movs	r3, #32
 800286c:	e003      	b.n	8002876 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 800286e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002870:	fab3 f383 	clz	r3, r3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	3301      	adds	r3, #1
 8002878:	f003 031f 	and.w	r3, r3, #31
 800287c:	2b09      	cmp	r3, #9
 800287e:	bf94      	ite	ls
 8002880:	2301      	movls	r3, #1
 8002882:	2300      	movhi	r3, #0
 8002884:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002886:	2b00      	cmp	r3, #0
 8002888:	d079      	beq.n	800297e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002892:	2b00      	cmp	r3, #0
 8002894:	d107      	bne.n	80028a6 <HAL_ADC_ConfigChannel+0x4a2>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	0e9b      	lsrs	r3, r3, #26
 800289c:	3301      	adds	r3, #1
 800289e:	069b      	lsls	r3, r3, #26
 80028a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028a4:	e015      	b.n	80028d2 <HAL_ADC_ConfigChannel+0x4ce>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ae:	fa93 f3a3 	rbit	r3, r3
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80028b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80028be:	2320      	movs	r3, #32
 80028c0:	e003      	b.n	80028ca <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80028c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	069b      	lsls	r3, r3, #26
 80028ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x4ee>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	0e9b      	lsrs	r3, r3, #26
 80028e4:	3301      	adds	r3, #1
 80028e6:	f003 031f 	and.w	r3, r3, #31
 80028ea:	2101      	movs	r1, #1
 80028ec:	fa01 f303 	lsl.w	r3, r1, r3
 80028f0:	e017      	b.n	8002922 <HAL_ADC_ConfigChannel+0x51e>
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002902:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 800290a:	2320      	movs	r3, #32
 800290c:	e003      	b.n	8002916 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800290e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002910:	fab3 f383 	clz	r3, r3
 8002914:	b2db      	uxtb	r3, r3
 8002916:	3301      	adds	r3, #1
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	2101      	movs	r1, #1
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	ea42 0103 	orr.w	r1, r2, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10a      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x544>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	0e9b      	lsrs	r3, r3, #26
 8002938:	3301      	adds	r3, #1
 800293a:	f003 021f 	and.w	r2, r3, #31
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	051b      	lsls	r3, r3, #20
 8002946:	e018      	b.n	800297a <HAL_ADC_ConfigChannel+0x576>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002958:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800295a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002960:	2320      	movs	r3, #32
 8002962:	e003      	b.n	800296c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	3301      	adds	r3, #1
 800296e:	f003 021f 	and.w	r2, r3, #31
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800297a:	430b      	orrs	r3, r1
 800297c:	e081      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <HAL_ADC_ConfigChannel+0x596>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	0e9b      	lsrs	r3, r3, #26
 8002990:	3301      	adds	r3, #1
 8002992:	069b      	lsls	r3, r3, #26
 8002994:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002998:	e015      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x5c2>
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80029a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80029b2:	2320      	movs	r3, #32
 80029b4:	e003      	b.n	80029be <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80029b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	3301      	adds	r3, #1
 80029c0:	069b      	lsls	r3, r3, #26
 80029c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x5e2>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	3301      	adds	r3, #1
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	2101      	movs	r1, #1
 80029e0:	fa01 f303 	lsl.w	r3, r1, r3
 80029e4:	e017      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x612>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	61fb      	str	r3, [r7, #28]
  return result;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80029fe:	2320      	movs	r3, #32
 8002a00:	e003      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	fab3 f383 	clz	r3, r3
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2101      	movs	r1, #1
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	ea42 0103 	orr.w	r1, r2, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10d      	bne.n	8002a42 <HAL_ADC_ConfigChannel+0x63e>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	0e9b      	lsrs	r3, r3, #26
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f003 021f 	and.w	r2, r3, #31
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	3b1e      	subs	r3, #30
 8002a3a:	051b      	lsls	r3, r3, #20
 8002a3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a40:	e01e      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x67c>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	fa93 f3a3 	rbit	r3, r3
 8002a4e:	613b      	str	r3, [r7, #16]
  return result;
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002a5a:	2320      	movs	r3, #32
 8002a5c:	e006      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x668>
 8002a5e:	bf00      	nop
 8002a60:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f003 021f 	and.w	r2, r3, #31
 8002a72:	4613      	mov	r3, r2
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4413      	add	r3, r2
 8002a78:	3b1e      	subs	r3, #30
 8002a7a:	051b      	lsls	r3, r3, #20
 8002a7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a80:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fe ff5e 	bl	8001948 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b48      	ldr	r3, [pc, #288]	; (8002bb4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8082 	beq.w	8002b9e <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a9a:	4847      	ldr	r0, [pc, #284]	; (8002bb8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002a9c:	f7fe fe8c 	bl	80017b8 <LL_ADC_GetCommonPathInternalCh>
 8002aa0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa4:	4845      	ldr	r0, [pc, #276]	; (8002bbc <HAL_ADC_ConfigChannel+0x7b8>)
 8002aa6:	f7ff f81d 	bl	8001ae4 <LL_ADC_IsEnabled>
 8002aaa:	4604      	mov	r4, r0
 8002aac:	4844      	ldr	r0, [pc, #272]	; (8002bc0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002aae:	f7ff f819 	bl	8001ae4 <LL_ADC_IsEnabled>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4323      	orrs	r3, r4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d15e      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a41      	ldr	r2, [pc, #260]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d127      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ac4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d121      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a39      	ldr	r2, [pc, #228]	; (8002bbc <HAL_ADC_ConfigChannel+0x7b8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d161      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ada:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ade:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4834      	ldr	r0, [pc, #208]	; (8002bb8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002ae6:	f7fe fe54 	bl	8001792 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002aea:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	099b      	lsrs	r3, r3, #6
 8002af0:	4a36      	ldr	r2, [pc, #216]	; (8002bcc <HAL_ADC_ConfigChannel+0x7c8>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	099b      	lsrs	r3, r3, #6
 8002af8:	1c5a      	adds	r2, r3, #1
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002b02:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002b04:	e002      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f9      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b12:	e044      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a2d      	ldr	r2, [pc, #180]	; (8002bd0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d113      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10d      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a23      	ldr	r2, [pc, #140]	; (8002bbc <HAL_ADC_ConfigChannel+0x7b8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d134      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	481e      	ldr	r0, [pc, #120]	; (8002bb8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002b40:	f7fe fe27 	bl	8001792 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b44:	e02b      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d126      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d120      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a16      	ldr	r2, [pc, #88]	; (8002bbc <HAL_ADC_ConfigChannel+0x7b8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d11b      	bne.n	8002b9e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4811      	ldr	r0, [pc, #68]	; (8002bb8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002b72:	f7fe fe0e 	bl	8001792 <LL_ADC_SetCommonPathInternalCh>
 8002b76:	e012      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002b8a:	e008      	b.n	8002b9e <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	f043 0220 	orr.w	r2, r3, #32
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002ba6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	37dc      	adds	r7, #220	; 0xdc
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	80080000 	.word	0x80080000
 8002bb8:	42028300 	.word	0x42028300
 8002bbc:	42028000 	.word	0x42028000
 8002bc0:	42028100 	.word	0x42028100
 8002bc4:	c7520000 	.word	0xc7520000
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	053e2d63 	.word	0x053e2d63
 8002bd0:	cb840000 	.word	0xcb840000
 8002bd4:	80000001 	.word	0x80000001

08002bd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe ff7b 	bl	8001ae4 <LL_ADC_IsEnabled>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d169      	bne.n	8002cc8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <ADC_Enable+0xfc>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c06:	f043 0210 	orr.w	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e055      	b.n	8002cca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe ff4a 	bl	8001abc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c28:	482b      	ldr	r0, [pc, #172]	; (8002cd8 <ADC_Enable+0x100>)
 8002c2a:	f7fe fdc5 	bl	80017b8 <LL_ADC_GetCommonPathInternalCh>
 8002c2e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <ADC_Enable+0x104>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	4a28      	ldr	r2, [pc, #160]	; (8002ce0 <ADC_Enable+0x108>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c52:	e002      	b.n	8002c5a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f9      	bne.n	8002c54 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c60:	f7fe fd78 	bl	8001754 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c66:	e028      	b.n	8002cba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe ff39 	bl	8001ae4 <LL_ADC_IsEnabled>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d104      	bne.n	8002c82 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe ff1d 	bl	8001abc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c82:	f7fe fd67 	bl	8001754 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d914      	bls.n	8002cba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d00d      	beq.n	8002cba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	f043 0210 	orr.w	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	f043 0201 	orr.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e007      	b.n	8002cca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d1cf      	bne.n	8002c68 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	8000003f 	.word	0x8000003f
 8002cd8:	42028300 	.word	0x42028300
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	053e2d63 	.word	0x053e2d63

08002ce4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d14b      	bne.n	8002d96 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d021      	beq.n	8002d5c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe fdc1 	bl	80018a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d032      	beq.n	8002d8e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d12b      	bne.n	8002d8e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d11f      	bne.n	8002d8e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	659a      	str	r2, [r3, #88]	; 0x58
 8002d5a:	e018      	b.n	8002d8e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d111      	bne.n	8002d8e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d105      	bne.n	8002d8e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	f043 0201 	orr.w	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff fb10 	bl	80023b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d94:	e00e      	b.n	8002db4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f7ff fb24 	bl	80023f0 <HAL_ADC_ErrorCallback>
}
 8002da8:	e004      	b.n	8002db4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f7ff fafc 	bl	80023c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	f043 0204 	orr.w	r2, r3, #4
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f7ff faf6 	bl	80023f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <LL_ADC_IsEnabled>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <LL_ADC_IsEnabled+0x18>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <LL_ADC_IsEnabled+0x1a>
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e32:	b480      	push	{r7}
 8002e34:	b083      	sub	sp, #12
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0304 	and.w	r3, r3, #4
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d101      	bne.n	8002e4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ebc:	b590      	push	{r4, r7, lr}
 8002ebe:	b0a1      	sub	sp, #132	; 0x84
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e089      	b.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a42      	ldr	r2, [pc, #264]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d102      	bne.n	8002efa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ef4:	4b41      	ldr	r3, [pc, #260]	; (8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e001      	b.n	8002efe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e068      	b.n	8002fee <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff87 	bl	8002e32 <LL_ADC_REG_IsConversionOngoing>
 8002f24:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ff81 	bl	8002e32 <LL_ADC_REG_IsConversionOngoing>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d14a      	bne.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d147      	bne.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f3c:	4b30      	ldr	r3, [pc, #192]	; (8003000 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002f3e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d027      	beq.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f5a:	035b      	lsls	r3, r3, #13
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f62:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f64:	4824      	ldr	r0, [pc, #144]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002f66:	f7ff ff51 	bl	8002e0c <LL_ADC_IsEnabled>
 8002f6a:	4604      	mov	r4, r0
 8002f6c:	4823      	ldr	r0, [pc, #140]	; (8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f6e:	f7ff ff4d 	bl	8002e0c <LL_ADC_IsEnabled>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4323      	orrs	r3, r4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d132      	bne.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002f82:	f023 030f 	bic.w	r3, r3, #15
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	6811      	ldr	r1, [r2, #0]
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	6892      	ldr	r2, [r2, #8]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	431a      	orrs	r2, r3
 8002f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f94:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f96:	e023      	b.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fa4:	4814      	ldr	r0, [pc, #80]	; (8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002fa6:	f7ff ff31 	bl	8002e0c <LL_ADC_IsEnabled>
 8002faa:	4604      	mov	r4, r0
 8002fac:	4813      	ldr	r0, [pc, #76]	; (8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002fae:	f7ff ff2d 	bl	8002e0c <LL_ADC_IsEnabled>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4323      	orrs	r3, r4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d112      	bne.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fc2:	f023 030f 	bic.w	r3, r3, #15
 8002fc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002fc8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fca:	e009      	b.n	8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002fde:	e000      	b.n	8002fe2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fe0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002fea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3784      	adds	r7, #132	; 0x84
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd90      	pop	{r4, r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	42028000 	.word	0x42028000
 8002ffc:	42028100 	.word	0x42028100
 8003000:	42028300 	.word	0x42028300

08003004 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003020:	4013      	ands	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800302c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003036:	4a04      	ldr	r2, [pc, #16]	; (8003048 <__NVIC_SetPriorityGrouping+0x44>)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	60d3      	str	r3, [r2, #12]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003050:	4b04      	ldr	r3, [pc, #16]	; (8003064 <__NVIC_GetPriorityGrouping+0x18>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	0a1b      	lsrs	r3, r3, #8
 8003056:	f003 0307 	and.w	r3, r3, #7
}
 800305a:	4618      	mov	r0, r3
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	2b00      	cmp	r3, #0
 8003078:	db0b      	blt.n	8003092 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	f003 021f 	and.w	r2, r3, #31
 8003080:	4907      	ldr	r1, [pc, #28]	; (80030a0 <__NVIC_EnableIRQ+0x38>)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	095b      	lsrs	r3, r3, #5
 8003088:	2001      	movs	r0, #1
 800308a:	fa00 f202 	lsl.w	r2, r0, r2
 800308e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000e100 	.word	0xe000e100

080030a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	db0a      	blt.n	80030ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	490c      	ldr	r1, [pc, #48]	; (80030f0 <__NVIC_SetPriority+0x4c>)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	0152      	lsls	r2, r2, #5
 80030c4:	b2d2      	uxtb	r2, r2
 80030c6:	440b      	add	r3, r1
 80030c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030cc:	e00a      	b.n	80030e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4908      	ldr	r1, [pc, #32]	; (80030f4 <__NVIC_SetPriority+0x50>)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	3b04      	subs	r3, #4
 80030dc:	0152      	lsls	r2, r2, #5
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	440b      	add	r3, r1
 80030e2:	761a      	strb	r2, [r3, #24]
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000e100 	.word	0xe000e100
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f1c3 0307 	rsb	r3, r3, #7
 8003112:	2b03      	cmp	r3, #3
 8003114:	bf28      	it	cs
 8003116:	2303      	movcs	r3, #3
 8003118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	3303      	adds	r3, #3
 800311e:	2b06      	cmp	r3, #6
 8003120:	d902      	bls.n	8003128 <NVIC_EncodePriority+0x30>
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3b04      	subs	r3, #4
 8003126:	e000      	b.n	800312a <NVIC_EncodePriority+0x32>
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	f04f 32ff 	mov.w	r2, #4294967295
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	401a      	ands	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003140:	f04f 31ff 	mov.w	r1, #4294967295
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	fa01 f303 	lsl.w	r3, r1, r3
 800314a:	43d9      	mvns	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	4313      	orrs	r3, r2
         );
}
 8003152:	4618      	mov	r0, r3
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003170:	d301      	bcc.n	8003176 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003172:	2301      	movs	r3, #1
 8003174:	e00f      	b.n	8003196 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003176:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <SysTick_Config+0x40>)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3b01      	subs	r3, #1
 800317c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800317e:	2107      	movs	r1, #7
 8003180:	f04f 30ff 	mov.w	r0, #4294967295
 8003184:	f7ff ff8e 	bl	80030a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <SysTick_Config+0x40>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800318e:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <SysTick_Config+0x40>)
 8003190:	2207      	movs	r2, #7
 8003192:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	e000e010 	.word	0xe000e010

080031a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ff29 	bl	8003004 <__NVIC_SetPriorityGrouping>
}
 80031b2:	bf00      	nop
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b086      	sub	sp, #24
 80031be:	af00      	add	r7, sp, #0
 80031c0:	4603      	mov	r3, r0
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
 80031c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031c8:	f7ff ff40 	bl	800304c <__NVIC_GetPriorityGrouping>
 80031cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	6978      	ldr	r0, [r7, #20]
 80031d4:	f7ff ff90 	bl	80030f8 <NVIC_EncodePriority>
 80031d8:	4602      	mov	r2, r0
 80031da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff5f 	bl	80030a4 <__NVIC_SetPriority>
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff33 	bl	8003068 <__NVIC_EnableIRQ>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff ffa4 	bl	8003160 <SysTick_Config>
 8003218:	4603      	mov	r3, r0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e014      	b.n	800325e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	791b      	ldrb	r3, [r3, #4]
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d105      	bne.n	800324a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7fe f81f 	bl	8001288 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2202      	movs	r2, #2
 800324e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2201      	movs	r2, #1
 800325a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0a2      	b.n	80033c6 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	795b      	ldrb	r3, [r3, #5]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d101      	bne.n	800328c <HAL_DAC_Start_DMA+0x24>
 8003288:	2302      	movs	r3, #2
 800328a:	e09c      	b.n	80033c6 <HAL_DAC_Start_DMA+0x15e>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2201      	movs	r2, #1
 8003290:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2202      	movs	r2, #2
 8003296:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d129      	bne.n	80032f2 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	4a4b      	ldr	r2, [pc, #300]	; (80033d0 <HAL_DAC_Start_DMA+0x168>)
 80032a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	4a4a      	ldr	r2, [pc, #296]	; (80033d4 <HAL_DAC_Start_DMA+0x16c>)
 80032ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4a49      	ldr	r2, [pc, #292]	; (80033d8 <HAL_DAC_Start_DMA+0x170>)
 80032b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032c4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_DAC_Start_DMA+0x6c>
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d005      	beq.n	80032de <HAL_DAC_Start_DMA+0x76>
 80032d2:	e009      	b.n	80032e8 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3308      	adds	r3, #8
 80032da:	613b      	str	r3, [r7, #16]
        break;
 80032dc:	e033      	b.n	8003346 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	330c      	adds	r3, #12
 80032e4:	613b      	str	r3, [r7, #16]
        break;
 80032e6:	e02e      	b.n	8003346 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3310      	adds	r3, #16
 80032ee:	613b      	str	r3, [r7, #16]
        break;
 80032f0:	e029      	b.n	8003346 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	4a39      	ldr	r2, [pc, #228]	; (80033dc <HAL_DAC_Start_DMA+0x174>)
 80032f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	4a38      	ldr	r2, [pc, #224]	; (80033e0 <HAL_DAC_Start_DMA+0x178>)
 8003300:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4a37      	ldr	r2, [pc, #220]	; (80033e4 <HAL_DAC_Start_DMA+0x17c>)
 8003308:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003318:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_DAC_Start_DMA+0xc0>
 8003320:	6a3b      	ldr	r3, [r7, #32]
 8003322:	2b04      	cmp	r3, #4
 8003324:	d005      	beq.n	8003332 <HAL_DAC_Start_DMA+0xca>
 8003326:	e009      	b.n	800333c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3314      	adds	r3, #20
 800332e:	613b      	str	r3, [r7, #16]
        break;
 8003330:	e009      	b.n	8003346 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3318      	adds	r3, #24
 8003338:	613b      	str	r3, [r7, #16]
        break;
 800333a:	e004      	b.n	8003346 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	331c      	adds	r3, #28
 8003342:	613b      	str	r3, [r7, #16]
        break;
 8003344:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d111      	bne.n	8003370 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800335a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6898      	ldr	r0, [r3, #8]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	f000 fb49 	bl	80039fc <HAL_DMA_Start_IT>
 800336a:	4603      	mov	r3, r0
 800336c:	75fb      	strb	r3, [r7, #23]
 800336e:	e010      	b.n	8003392 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800337e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68d8      	ldr	r0, [r3, #12]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	f000 fb37 	bl	80039fc <HAL_DMA_Start_IT>
 800338e:	4603      	mov	r3, r0
 8003390:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003398:	7dfb      	ldrb	r3, [r7, #23]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10c      	bne.n	80033b8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6819      	ldr	r1, [r3, #0]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	2201      	movs	r2, #1
 80033ac:	409a      	lsls	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e005      	b.n	80033c4 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f043 0204 	orr.w	r2, r3, #4
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	08003785 	.word	0x08003785
 80033d4:	080037a7 	.word	0x080037a7
 80033d8:	080037c3 	.word	0x080037c3
 80033dc:	08003841 	.word	0x08003841
 80033e0:	08003863 	.word	0x08003863
 80033e4:	0800387f 	.word	0x0800387f

080033e8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d01d      	beq.n	8003446 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d018      	beq.n	8003446 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2204      	movs	r2, #4
 8003418:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	f043 0201 	orr.w	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800342e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800343e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f845 	bl	80034d0 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01d      	beq.n	800348c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d018      	beq.n	800348c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2204      	movs	r2, #4
 800345e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	f043 0202 	orr.w	r2, r3, #2
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003474:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003484:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f9d0 	bl	800382c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	; 0x28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t pclk1freq;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_DAC_ConfigChannel+0x1e>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e137      	b.n	8003776 <HAL_DAC_ConfigChannel+0x292>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	795b      	ldrb	r3, [r3, #5]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_DAC_ConfigChannel+0x2e>
 800350e:	2302      	movs	r3, #2
 8003510:	e131      	b.n	8003776 <HAL_DAC_ConfigChannel+0x292>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2202      	movs	r2, #2
 800351c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b04      	cmp	r3, #4
 8003524:	d17a      	bne.n	800361c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003526:	f7fe f915 	bl	8001754 <HAL_GetTick>
 800352a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d13d      	bne.n	80035ae <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003532:	e018      	b.n	8003566 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003534:	f7fe f90e 	bl	8001754 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d911      	bls.n	8003566 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	f043 0208 	orr.w	r2, r3, #8
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2203      	movs	r2, #3
 8003560:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e107      	b.n	8003776 <HAL_DAC_ConfigChannel+0x292>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1df      	bne.n	8003534 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	69d2      	ldr	r2, [r2, #28]
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
 800357e:	e020      	b.n	80035c2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003580:	f7fe f8e8 	bl	8001754 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d90f      	bls.n	80035ae <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	2b00      	cmp	r3, #0
 8003596:	da0a      	bge.n	80035ae <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f043 0208 	orr.w	r2, r3, #8
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2203      	movs	r2, #3
 80035a8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e0e3      	b.n	8003776 <HAL_DAC_ConfigChannel+0x292>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	dbe3      	blt.n	8003580 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	69d2      	ldr	r2, [r2, #28]
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80035d2:	fa01 f303 	lsl.w	r3, r1, r3
 80035d6:	43db      	mvns	r3, r3
 80035d8:	ea02 0103 	and.w	r1, r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	6a1a      	ldr	r2, [r3, #32]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	409a      	lsls	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f003 0310 	and.w	r3, r3, #16
 80035fc:	21ff      	movs	r1, #255	; 0xff
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	43db      	mvns	r3, r3
 8003604:	ea02 0103 	and.w	r1, r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	409a      	lsls	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d11d      	bne.n	8003660 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	221f      	movs	r2, #31
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363c:	4013      	ands	r3, r2
 800363e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003654:	4313      	orrs	r3, r2
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2207      	movs	r2, #7
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003678:	4013      	ands	r3, r2
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	431a      	orrs	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f003 0310 	and.w	r3, r3, #16
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369c:	4313      	orrs	r3, r2
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6819      	ldr	r1, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43da      	mvns	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	400a      	ands	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e0:	4013      	ands	r3, r2
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	4313      	orrs	r3, r2
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003704:	d104      	bne.n	8003710 <HAL_DAC_ConfigChannel+0x22c>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
 800370e:	e018      	b.n	8003742 <HAL_DAC_ConfigChannel+0x25e>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d104      	bne.n	8003722 <HAL_DAC_ConfigChannel+0x23e>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
 8003720:	e00f      	b.n	8003742 <HAL_DAC_ConfigChannel+0x25e>
    }
    else /* Automatic selection */
    {
      pclk1freq  = HAL_RCC_GetPCLK1Freq();
 8003722:	f001 fcdb 	bl	80050dc <HAL_RCC_GetPCLK1Freq>
 8003726:	6178      	str	r0, [r7, #20]
      if (pclk1freq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	4a15      	ldr	r2, [pc, #84]	; (8003780 <HAL_DAC_ConfigChannel+0x29c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d904      	bls.n	800373a <HAL_DAC_ConfigChannel+0x256>
      {
        /* High frequency enable when PCLK frequency higher than 80   */
        tmpreg1 |= DAC_CR_HFSEL;
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
 8003738:	e003      	b.n	8003742 <HAL_DAC_ConfigChannel+0x25e>
      }
      else
      {
        /* High frequency disable when PCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003748:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	22c0      	movs	r2, #192	; 0xc0
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43da      	mvns	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	400a      	ands	r2, r1
 8003764:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003772:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003776:	4618      	mov	r0, r3
 8003778:	3728      	adds	r7, #40	; 0x28
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	04c4b400 	.word	0x04c4b400

08003784 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003790:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f7ff fe7e 	bl	8003494 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	711a      	strb	r2, [r3, #4]
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f7ff fe77 	bl	80034a8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80037ba:	bf00      	nop
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	f043 0204 	orr.w	r2, r3, #4
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f7ff fe6d 	bl	80034bc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	711a      	strb	r2, [r3, #4]
}
 80037e8:	bf00      	nop
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff ffce 	bl	80037f0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	711a      	strb	r2, [r3, #4]
}
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f7ff ffc7 	bl	8003804 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003876:	bf00      	nop
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b084      	sub	sp, #16
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f043 0204 	orr.w	r2, r3, #4
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f7ff ffbd 	bl	8003818 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	711a      	strb	r2, [r3, #4]
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e08d      	b.n	80039da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	4b47      	ldr	r3, [pc, #284]	; (80039e4 <HAL_DMA_Init+0x138>)
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d80f      	bhi.n	80038ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	4b45      	ldr	r3, [pc, #276]	; (80039e8 <HAL_DMA_Init+0x13c>)
 80038d2:	4413      	add	r3, r2
 80038d4:	4a45      	ldr	r2, [pc, #276]	; (80039ec <HAL_DMA_Init+0x140>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	009a      	lsls	r2, r3, #2
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a42      	ldr	r2, [pc, #264]	; (80039f0 <HAL_DMA_Init+0x144>)
 80038e6:	649a      	str	r2, [r3, #72]	; 0x48
 80038e8:	e00e      	b.n	8003908 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	461a      	mov	r2, r3
 80038f0:	4b40      	ldr	r3, [pc, #256]	; (80039f4 <HAL_DMA_Init+0x148>)
 80038f2:	4413      	add	r3, r2
 80038f4:	4a3d      	ldr	r2, [pc, #244]	; (80039ec <HAL_DMA_Init+0x140>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	091b      	lsrs	r3, r3, #4
 80038fc:	009a      	lsls	r2, r3, #2
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a3c      	ldr	r2, [pc, #240]	; (80039f8 <HAL_DMA_Init+0x14c>)
 8003906:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 800391e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8003922:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800392c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003938:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003944:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fa38 	bl	8003dd0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003968:	d102      	bne.n	8003970 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003984:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d010      	beq.n	80039b0 <HAL_DMA_Init+0x104>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b04      	cmp	r3, #4
 8003994:	d80c      	bhi.n	80039b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fa58 	bl	8003e4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	e008      	b.n	80039c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40020407 	.word	0x40020407
 80039e8:	bffdfff8 	.word	0xbffdfff8
 80039ec:	cccccccd 	.word	0xcccccccd
 80039f0:	40020000 	.word	0x40020000
 80039f4:	bffdfbf8 	.word	0xbffdfbf8
 80039f8:	40020400 	.word	0x40020400

080039fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d101      	bne.n	8003a1c <HAL_DMA_Start_IT+0x20>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	e066      	b.n	8003aea <HAL_DMA_Start_IT+0xee>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d155      	bne.n	8003adc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f97c 	bl	8003d52 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 020e 	orr.w	r2, r2, #14
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e00f      	b.n	8003a94 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0204 	bic.w	r2, r2, #4
 8003a82:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 020a 	orr.w	r2, r2, #10
 8003a92:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d007      	beq.n	8003ab2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	e005      	b.n	8003ae8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b084      	sub	sp, #16
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0e:	f003 031c 	and.w	r3, r3, #28
 8003b12:	2204      	movs	r2, #4
 8003b14:	409a      	lsls	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d053      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xd4>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d04e      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d024      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3a:	f003 021c 	and.w	r2, r3, #28
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b42:	2104      	movs	r1, #4
 8003b44:	fa01 f202 	lsl.w	r2, r1, r2
 8003b48:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d109      	bne.n	8003b6c <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80c0 	beq.w	8003ce2 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003b6a:	e0ba      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80b6 	beq.w	8003ce2 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003b7e:	e0b0      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d107      	bne.n	8003b9e <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0204 	bic.w	r2, r2, #4
 8003b9c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	f003 021c 	and.w	r2, r3, #28
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003baa:	2104      	movs	r1, #4
 8003bac:	fa01 f202 	lsl.w	r2, r1, r2
 8003bb0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 8093 	beq.w	8003ce2 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003bc4:	e08d      	b.n	8003ce2 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bca:	f003 031c 	and.w	r3, r3, #28
 8003bce:	2202      	movs	r2, #2
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d04e      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x186>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d049      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d018      	beq.n	8003c24 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d108      	bne.n	8003c12 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d06e      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003c10:	e069      	b.n	8003ce6 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d065      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003c22:	e060      	b.n	8003ce6 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10b      	bne.n	8003c4a <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 020a 	bic.w	r2, r2, #10
 8003c40:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4e:	f003 021c 	and.w	r2, r3, #28
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c56:	2102      	movs	r1, #2
 8003c58:	fa01 f202 	lsl.w	r2, r1, r2
 8003c5c:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d03b      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003c76:	e036      	b.n	8003ce6 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7c:	f003 031c 	and.w	r3, r3, #28
 8003c80:	2208      	movs	r2, #8
 8003c82:	409a      	lsls	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d02e      	beq.n	8003cea <HAL_DMA_IRQHandler+0x1f8>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d029      	beq.n	8003cea <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 020e 	bic.w	r2, r2, #14
 8003ca4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	f003 021c 	and.w	r2, r3, #28
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cb8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d008      	beq.n	8003cea <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ce0:	e002      	b.n	8003ce8 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003ce2:	bf00      	nop
 8003ce4:	e000      	b.n	8003ce8 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8003ce6:	bf00      	nop
  return;
 8003ce8:	bf00      	nop
 8003cea:	bf00      	nop
}
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d103      	bne.n	8003d0e <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	72fb      	strb	r3, [r7, #11]
    return status;
 8003d0a:	7afb      	ldrb	r3, [r7, #11]
 8003d0c:	e01b      	b.n	8003d46 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	e003      	b.n	8003d3c <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003d3a:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	601a      	str	r2, [r3, #0]

  return status;
 8003d44:	7afb      	ldrb	r3, [r7, #11]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b085      	sub	sp, #20
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003d68:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d004      	beq.n	8003d7c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003d7a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d80:	f003 021c 	and.w	r2, r3, #28
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d88:	2101      	movs	r1, #1
 8003d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d108      	bne.n	8003db2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8003db0:	e007      	b.n	8003dc2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	60da      	str	r2, [r3, #12]
}
 8003dc2:	bf00      	nop
 8003dc4:	3714      	adds	r7, #20
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d80a      	bhi.n	8003dfa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003df0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6513      	str	r3, [r2, #80]	; 0x50
 8003df8:	e007      	b.n	8003e0a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfe:	089b      	lsrs	r3, r3, #2
 8003e00:	009a      	lsls	r2, r3, #2
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003e04:	4413      	add	r3, r2
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	3b08      	subs	r3, #8
 8003e12:	4a0c      	ldr	r2, [pc, #48]	; (8003e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003e14:	fba2 2303 	umull	r2, r3, r2, r3
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003e20:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	2201      	movs	r2, #1
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003e30:	bf00      	nop
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40020407 	.word	0x40020407
 8003e40:	40020820 	.word	0x40020820
 8003e44:	cccccccd 	.word	0xcccccccd
 8003e48:	40020880 	.word	0x40020880

08003e4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	461a      	mov	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a08      	ldr	r2, [pc, #32]	; (8003e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003e6e:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	2201      	movs	r2, #1
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	1000823f 	.word	0x1000823f
 8003e90:	40020940 	.word	0x40020940

08003e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ea2:	e158      	b.n	8004156 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 814a 	beq.w	8004150 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d005      	beq.n	8003ed4 <HAL_GPIO_Init+0x40>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f003 0303 	and.w	r3, r3, #3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d130      	bne.n	8003f36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	2203      	movs	r2, #3
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43db      	mvns	r3, r3
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4013      	ands	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	091b      	lsrs	r3, r3, #4
 8003f20:	f003 0201 	and.w	r2, r3, #1
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d017      	beq.n	8003f72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	4013      	ands	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	693a      	ldr	r2, [r7, #16]
 8003f70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d123      	bne.n	8003fc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	08da      	lsrs	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3208      	adds	r2, #8
 8003f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	220f      	movs	r2, #15
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	08da      	lsrs	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3208      	adds	r2, #8
 8003fc0:	6939      	ldr	r1, [r7, #16]
 8003fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f003 0203 	and.w	r2, r3, #3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004002:	2b00      	cmp	r3, #0
 8004004:	f000 80a4 	beq.w	8004150 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8004008:	4a5a      	ldr	r2, [pc, #360]	; (8004174 <HAL_GPIO_Init+0x2e0>)
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	089b      	lsrs	r3, r3, #2
 800400e:	3318      	adds	r3, #24
 8004010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004014:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	00db      	lsls	r3, r3, #3
 800401e:	220f      	movs	r2, #15
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4013      	ands	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a52      	ldr	r2, [pc, #328]	; (8004178 <HAL_GPIO_Init+0x2e4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d025      	beq.n	8004080 <HAL_GPIO_Init+0x1ec>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a51      	ldr	r2, [pc, #324]	; (800417c <HAL_GPIO_Init+0x2e8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d01f      	beq.n	800407c <HAL_GPIO_Init+0x1e8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a50      	ldr	r2, [pc, #320]	; (8004180 <HAL_GPIO_Init+0x2ec>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d019      	beq.n	8004078 <HAL_GPIO_Init+0x1e4>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a4f      	ldr	r2, [pc, #316]	; (8004184 <HAL_GPIO_Init+0x2f0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_GPIO_Init+0x1e0>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a4e      	ldr	r2, [pc, #312]	; (8004188 <HAL_GPIO_Init+0x2f4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00d      	beq.n	8004070 <HAL_GPIO_Init+0x1dc>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a4d      	ldr	r2, [pc, #308]	; (800418c <HAL_GPIO_Init+0x2f8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d007      	beq.n	800406c <HAL_GPIO_Init+0x1d8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a4c      	ldr	r2, [pc, #304]	; (8004190 <HAL_GPIO_Init+0x2fc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d101      	bne.n	8004068 <HAL_GPIO_Init+0x1d4>
 8004064:	2306      	movs	r3, #6
 8004066:	e00c      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004068:	2307      	movs	r3, #7
 800406a:	e00a      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 800406c:	2305      	movs	r3, #5
 800406e:	e008      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004070:	2304      	movs	r3, #4
 8004072:	e006      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004074:	2303      	movs	r3, #3
 8004076:	e004      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004078:	2302      	movs	r3, #2
 800407a:	e002      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004080:	2300      	movs	r3, #0
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	f002 0203 	and.w	r2, r2, #3
 8004088:	00d2      	lsls	r2, r2, #3
 800408a:	4093      	lsls	r3, r2
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004092:	4938      	ldr	r1, [pc, #224]	; (8004174 <HAL_GPIO_Init+0x2e0>)
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	3318      	adds	r3, #24
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040a0:	4b34      	ldr	r3, [pc, #208]	; (8004174 <HAL_GPIO_Init+0x2e0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4013      	ands	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040c4:	4a2b      	ldr	r2, [pc, #172]	; (8004174 <HAL_GPIO_Init+0x2e0>)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040ca:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <HAL_GPIO_Init+0x2e0>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4013      	ands	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040ee:	4a21      	ldr	r2, [pc, #132]	; (8004174 <HAL_GPIO_Init+0x2e0>)
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040f4:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <HAL_GPIO_Init+0x2e0>)
 80040f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	43db      	mvns	r3, r3
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4013      	ands	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800411a:	4a16      	ldr	r2, [pc, #88]	; (8004174 <HAL_GPIO_Init+0x2e0>)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8004122:	4b14      	ldr	r3, [pc, #80]	; (8004174 <HAL_GPIO_Init+0x2e0>)
 8004124:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	43db      	mvns	r3, r3
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4013      	ands	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004148:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <HAL_GPIO_Init+0x2e0>)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	3301      	adds	r3, #1
 8004154:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	fa22 f303 	lsr.w	r3, r2, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	f47f ae9f 	bne.w	8003ea4 <HAL_GPIO_Init+0x10>
  }
}
 8004166:	bf00      	nop
 8004168:	bf00      	nop
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	4002f400 	.word	0x4002f400
 8004178:	42020000 	.word	0x42020000
 800417c:	42020400 	.word	0x42020400
 8004180:	42020800 	.word	0x42020800
 8004184:	42020c00 	.word	0x42020c00
 8004188:	42021000 	.word	0x42021000
 800418c:	42021400 	.word	0x42021400
 8004190:	42021800 	.word	0x42021800

08004194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
 80041a0:	4613      	mov	r3, r2
 80041a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041a4:	787b      	ldrb	r3, [r7, #1]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041b0:	e002      	b.n	80041b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041b2:	887a      	ldrh	r2, [r7, #2]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80041d0:	4b0b      	ldr	r3, [pc, #44]	; (8004200 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d002      	beq.n	80041e2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
 80041e0:	e007      	b.n	80041f2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 0204 	bic.w	r2, r3, #4
 80041ea:	4905      	ldr	r1, [pc, #20]	; (8004200 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	40030400 	.word	0x40030400

08004204 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_ICACHE_Enable+0x1c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a04      	ldr	r2, [pc, #16]	; (8004220 <HAL_ICACHE_Enable+0x1c>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40030400 	.word	0x40030400

08004224 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <HAL_PWREx_GetVoltageRange+0x18>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40007000 	.word	0x40007000

08004240 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8004248:	4b27      	ldr	r3, [pc, #156]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004250:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8004252:	f000 f861 	bl	8004318 <HAL_PWREx_SMPS_GetEffectiveMode>
 8004256:	4603      	mov	r3, r0
 8004258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800425c:	d101      	bne.n	8004262 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e03e      	b.n	80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8004262:	4b21      	ldr	r3, [pc, #132]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800426a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800426e:	d101      	bne.n	8004274 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e035      	b.n	80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	429a      	cmp	r2, r3
 800427a:	d101      	bne.n	8004280 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	e02f      	b.n	80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004280:	4b19      	ldr	r3, [pc, #100]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004288:	4917      	ldr	r1, [pc, #92]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4313      	orrs	r3, r2
 800428e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004290:	4b16      	ldr	r3, [pc, #88]	; (80042ec <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	095b      	lsrs	r3, r3, #5
 8004296:	4a16      	ldr	r2, [pc, #88]	; (80042f0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	09db      	lsrs	r3, r3, #7
 800429e:	2232      	movs	r2, #50	; 0x32
 80042a0:	fb02 f303 	mul.w	r3, r2, r3
 80042a4:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	08db      	lsrs	r3, r3, #3
 80042ac:	3301      	adds	r3, #1
 80042ae:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042b0:	e002      	b.n	80042b8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042b8:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c4:	d102      	bne.n	80042cc <HAL_PWREx_ControlVoltageScaling+0x8c>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f2      	bne.n	80042b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d8:	d101      	bne.n	80042de <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e000      	b.n	80042e0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40007000 	.word	0x40007000
 80042ec:	20000000 	.word	0x20000000
 80042f0:	0a7c5ac5 	.word	0x0a7c5ac5
 80042f4:	cccccccd 	.word	0xcccccccd

080042f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80042fc:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4a04      	ldr	r2, [pc, #16]	; (8004314 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004302:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004306:	6093      	str	r3, [r2, #8]
}
 8004308:	bf00      	nop
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40007000 	.word	0x40007000

08004318 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 800431e:	4b0f      	ldr	r3, [pc, #60]	; (800435c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800432e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004332:	607b      	str	r3, [r7, #4]
 8004334:	e00a      	b.n	800434c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d103      	bne.n	8004348 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8004340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004344:	607b      	str	r3, [r7, #4]
 8004346:	e001      	b.n	800434c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004348:	2300      	movs	r3, #0
 800434a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800434c:	687b      	ldr	r3, [r7, #4]
}
 800434e:	4618      	mov	r0, r3
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	40007000 	.word	0x40007000

08004360 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	f000 bcc2 	b.w	8004cf8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004374:	4b99      	ldr	r3, [pc, #612]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800437e:	4b97      	ldr	r3, [pc, #604]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 80e9 	beq.w	8004568 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d006      	beq.n	80043aa <HAL_RCC_OscConfig+0x4a>
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b0c      	cmp	r3, #12
 80043a0:	f040 8083 	bne.w	80044aa <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d17f      	bne.n	80044aa <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043aa:	4b8c      	ldr	r3, [pc, #560]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d006      	beq.n	80043c4 <HAL_RCC_OscConfig+0x64>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d102      	bne.n	80043c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f000 bc9a 	b.w	8004cf8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043c8:	4b84      	ldr	r3, [pc, #528]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d004      	beq.n	80043de <HAL_RCC_OscConfig+0x7e>
 80043d4:	4b81      	ldr	r3, [pc, #516]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043dc:	e005      	b.n	80043ea <HAL_RCC_OscConfig+0x8a>
 80043de:	4b7f      	ldr	r3, [pc, #508]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80043e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d224      	bcs.n	8004438 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fe86 	bl	8005104 <RCC_SetFlashLatencyFromMSIRange>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f000 bc7a 	b.w	8004cf8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004404:	4b75      	ldr	r3, [pc, #468]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a74      	ldr	r2, [pc, #464]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 800440a:	f043 0308 	orr.w	r3, r3, #8
 800440e:	6013      	str	r3, [r2, #0]
 8004410:	4b72      	ldr	r3, [pc, #456]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	496f      	ldr	r1, [pc, #444]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 800441e:	4313      	orrs	r3, r2
 8004420:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004422:	4b6e      	ldr	r3, [pc, #440]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	496a      	ldr	r1, [pc, #424]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004432:	4313      	orrs	r3, r2
 8004434:	604b      	str	r3, [r1, #4]
 8004436:	e026      	b.n	8004486 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004438:	4b68      	ldr	r3, [pc, #416]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a67      	ldr	r2, [pc, #412]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 800443e:	f043 0308 	orr.w	r3, r3, #8
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4b65      	ldr	r3, [pc, #404]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	4962      	ldr	r1, [pc, #392]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004452:	4313      	orrs	r3, r2
 8004454:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004456:	4b61      	ldr	r3, [pc, #388]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	495d      	ldr	r1, [pc, #372]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004466:	4313      	orrs	r3, r2
 8004468:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fe45 	bl	8005104 <RCC_SetFlashLatencyFromMSIRange>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	f000 bc39 	b.w	8004cf8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004486:	f000 fe15 	bl	80050b4 <HAL_RCC_GetHCLKFreq>
 800448a:	4603      	mov	r3, r0
 800448c:	4a54      	ldr	r2, [pc, #336]	; (80045e0 <HAL_RCC_OscConfig+0x280>)
 800448e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004490:	4b54      	ldr	r3, [pc, #336]	; (80045e4 <HAL_RCC_OscConfig+0x284>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4618      	mov	r0, r3
 8004496:	f7fd f90d 	bl	80016b4 <HAL_InitTick>
 800449a:	4603      	mov	r3, r0
 800449c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800449e:	7bfb      	ldrb	r3, [r7, #15]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d060      	beq.n	8004566 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
 80044a6:	f000 bc27 	b.w	8004cf8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d039      	beq.n	8004526 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044b2:	4b4a      	ldr	r3, [pc, #296]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a49      	ldr	r2, [pc, #292]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044be:	f7fd f949 	bl	8001754 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044c4:	e00f      	b.n	80044e6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c6:	f7fd f945 	bl	8001754 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d908      	bls.n	80044e6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044d4:	4b41      	ldr	r3, [pc, #260]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	f000 bc09 	b.w	8004cf8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044e6:	4b3d      	ldr	r3, [pc, #244]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0e9      	beq.n	80044c6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044f2:	4b3a      	ldr	r3, [pc, #232]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a39      	ldr	r2, [pc, #228]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80044f8:	f043 0308 	orr.w	r3, r3, #8
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b37      	ldr	r3, [pc, #220]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	4934      	ldr	r1, [pc, #208]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 800450c:	4313      	orrs	r3, r2
 800450e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004510:	4b32      	ldr	r3, [pc, #200]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	492f      	ldr	r1, [pc, #188]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004520:	4313      	orrs	r3, r2
 8004522:	604b      	str	r3, [r1, #4]
 8004524:	e020      	b.n	8004568 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004526:	4b2d      	ldr	r3, [pc, #180]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a2c      	ldr	r2, [pc, #176]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004532:	f7fd f90f 	bl	8001754 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004538:	e00e      	b.n	8004558 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800453a:	f7fd f90b 	bl	8001754 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d907      	bls.n	8004558 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004548:	4b24      	ldr	r3, [pc, #144]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e3cf      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004558:	4b20      	ldr	r3, [pc, #128]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0302 	and.w	r3, r3, #2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1ea      	bne.n	800453a <HAL_RCC_OscConfig+0x1da>
 8004564:	e000      	b.n	8004568 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004566:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d07e      	beq.n	8004672 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	2b08      	cmp	r3, #8
 8004578:	d005      	beq.n	8004586 <HAL_RCC_OscConfig+0x226>
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	2b0c      	cmp	r3, #12
 800457e:	d10e      	bne.n	800459e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	2b03      	cmp	r3, #3
 8004584:	d10b      	bne.n	800459e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d06e      	beq.n	8004670 <HAL_RCC_OscConfig+0x310>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d16a      	bne.n	8004670 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e3ac      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a6:	d106      	bne.n	80045b6 <HAL_RCC_OscConfig+0x256>
 80045a8:	4b0c      	ldr	r3, [pc, #48]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a0b      	ldr	r2, [pc, #44]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80045ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	e024      	b.n	8004600 <HAL_RCC_OscConfig+0x2a0>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045be:	d113      	bne.n	80045e8 <HAL_RCC_OscConfig+0x288>
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a05      	ldr	r2, [pc, #20]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80045c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a02      	ldr	r2, [pc, #8]	; (80045dc <HAL_RCC_OscConfig+0x27c>)
 80045d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d6:	6013      	str	r3, [r2, #0]
 80045d8:	e012      	b.n	8004600 <HAL_RCC_OscConfig+0x2a0>
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000
 80045e0:	20000000 	.word	0x20000000
 80045e4:	20000004 	.word	0x20000004
 80045e8:	4b8b      	ldr	r3, [pc, #556]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a8a      	ldr	r2, [pc, #552]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 80045ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	4b88      	ldr	r3, [pc, #544]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a87      	ldr	r2, [pc, #540]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 80045fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d019      	beq.n	800463c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fd f8a4 	bl	8001754 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800460e:	e00e      	b.n	800462e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004610:	f7fd f8a0 	bl	8001754 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d907      	bls.n	800462e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800461e:	4b7e      	ldr	r3, [pc, #504]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e364      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800462e:	4b7a      	ldr	r3, [pc, #488]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0ea      	beq.n	8004610 <HAL_RCC_OscConfig+0x2b0>
 800463a:	e01a      	b.n	8004672 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd f88a 	bl	8001754 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004642:	e00e      	b.n	8004662 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004644:	f7fd f886 	bl	8001754 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	; 0x64
 8004650:	d907      	bls.n	8004662 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004652:	4b71      	ldr	r3, [pc, #452]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e34a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004662:	4b6d      	ldr	r3, [pc, #436]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1ea      	bne.n	8004644 <HAL_RCC_OscConfig+0x2e4>
 800466e:	e000      	b.n	8004672 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d06c      	beq.n	8004758 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b04      	cmp	r3, #4
 8004682:	d005      	beq.n	8004690 <HAL_RCC_OscConfig+0x330>
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b0c      	cmp	r3, #12
 8004688:	d119      	bne.n	80046be <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d116      	bne.n	80046be <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004690:	4b61      	ldr	r3, [pc, #388]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_OscConfig+0x348>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e327      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a8:	4b5b      	ldr	r3, [pc, #364]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	4958      	ldr	r1, [pc, #352]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046bc:	e04c      	b.n	8004758 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d029      	beq.n	800471a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c6:	4b54      	ldr	r3, [pc, #336]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a53      	ldr	r2, [pc, #332]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d2:	f7fd f83f 	bl	8001754 <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046d8:	e00e      	b.n	80046f8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046da:	f7fd f83b 	bl	8001754 <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d907      	bls.n	80046f8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046e8:	4b4b      	ldr	r3, [pc, #300]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e2ff      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f8:	4b47      	ldr	r3, [pc, #284]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0ea      	beq.n	80046da <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004704:	4b44      	ldr	r3, [pc, #272]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	061b      	lsls	r3, r3, #24
 8004712:	4941      	ldr	r1, [pc, #260]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]
 8004718:	e01e      	b.n	8004758 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800471a:	4b3f      	ldr	r3, [pc, #252]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a3e      	ldr	r2, [pc, #248]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 8004720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004726:	f7fd f815 	bl	8001754 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800472c:	e00e      	b.n	800474c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472e:	f7fd f811 	bl	8001754 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d907      	bls.n	800474c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800473c:	4b36      	ldr	r3, [pc, #216]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e2d5      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800474c:	4b32      	ldr	r3, [pc, #200]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1ea      	bne.n	800472e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0308 	and.w	r3, r3, #8
 8004760:	2b00      	cmp	r3, #0
 8004762:	d062      	beq.n	800482a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d038      	beq.n	80047de <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d108      	bne.n	8004786 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004774:	4b28      	ldr	r3, [pc, #160]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477a:	4a27      	ldr	r2, [pc, #156]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 800477c:	f023 0310 	bic.w	r3, r3, #16
 8004780:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004784:	e007      	b.n	8004796 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004786:	4b24      	ldr	r3, [pc, #144]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 8004788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478c:	4a22      	ldr	r2, [pc, #136]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 800478e:	f043 0310 	orr.w	r3, r3, #16
 8004792:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004796:	4b20      	ldr	r3, [pc, #128]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 8004798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479c:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 800479e:	f043 0301 	orr.w	r3, r3, #1
 80047a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a6:	f7fc ffd5 	bl	8001754 <HAL_GetTick>
 80047aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047ac:	e00f      	b.n	80047ce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ae:	f7fc ffd1 	bl	8001754 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b07      	cmp	r3, #7
 80047ba:	d908      	bls.n	80047ce <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047bc:	4b16      	ldr	r3, [pc, #88]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 80047be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e294      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047ce:	4b12      	ldr	r3, [pc, #72]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 80047d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0e8      	beq.n	80047ae <HAL_RCC_OscConfig+0x44e>
 80047dc:	e025      	b.n	800482a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047de:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 80047e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e4:	4a0c      	ldr	r2, [pc, #48]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ee:	f7fc ffb1 	bl	8001754 <HAL_GetTick>
 80047f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047f4:	e012      	b.n	800481c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047f6:	f7fc ffad 	bl	8001754 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b07      	cmp	r3, #7
 8004802:	d90b      	bls.n	800481c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004804:	4b04      	ldr	r3, [pc, #16]	; (8004818 <HAL_RCC_OscConfig+0x4b8>)
 8004806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d004      	beq.n	800481c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e270      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800481c:	4ba8      	ldr	r3, [pc, #672]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 800481e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e5      	bne.n	80047f6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0304 	and.w	r3, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 812d 	beq.w	8004a92 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004838:	2300      	movs	r3, #0
 800483a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800483c:	4ba0      	ldr	r3, [pc, #640]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 800483e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10d      	bne.n	8004864 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004848:	4b9d      	ldr	r3, [pc, #628]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	4a9c      	ldr	r2, [pc, #624]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 800484e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004852:	6593      	str	r3, [r2, #88]	; 0x58
 8004854:	4b9a      	ldr	r3, [pc, #616]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004860:	2301      	movs	r3, #1
 8004862:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004864:	4b97      	ldr	r3, [pc, #604]	; (8004ac4 <HAL_RCC_OscConfig+0x764>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d11e      	bne.n	80048ae <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004870:	4b94      	ldr	r3, [pc, #592]	; (8004ac4 <HAL_RCC_OscConfig+0x764>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a93      	ldr	r2, [pc, #588]	; (8004ac4 <HAL_RCC_OscConfig+0x764>)
 8004876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800487a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800487c:	f7fc ff6a 	bl	8001754 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004882:	e00e      	b.n	80048a2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004884:	f7fc ff66 	bl	8001754 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d907      	bls.n	80048a2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004892:	4b8c      	ldr	r3, [pc, #560]	; (8004ac4 <HAL_RCC_OscConfig+0x764>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e22a      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048a2:	4b88      	ldr	r3, [pc, #544]	; (8004ac4 <HAL_RCC_OscConfig+0x764>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d0ea      	beq.n	8004884 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01f      	beq.n	80048fa <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0304 	and.w	r3, r3, #4
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d010      	beq.n	80048e8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80048c6:	4b7e      	ldr	r3, [pc, #504]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	4a7c      	ldr	r2, [pc, #496]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 80048ce:	f043 0304 	orr.w	r3, r3, #4
 80048d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048d6:	4b7a      	ldr	r3, [pc, #488]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	4a78      	ldr	r2, [pc, #480]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048e6:	e018      	b.n	800491a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048e8:	4b75      	ldr	r3, [pc, #468]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	4a74      	ldr	r2, [pc, #464]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048f8:	e00f      	b.n	800491a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048fa:	4b71      	ldr	r3, [pc, #452]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	4a6f      	ldr	r2, [pc, #444]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800490a:	4b6d      	ldr	r3, [pc, #436]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004910:	4a6b      	ldr	r2, [pc, #428]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004912:	f023 0304 	bic.w	r3, r3, #4
 8004916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d068      	beq.n	80049f4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004922:	f7fc ff17 	bl	8001754 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004928:	e011      	b.n	800494e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fc ff13 	bl	8001754 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d908      	bls.n	800494e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800493c:	4b60      	ldr	r3, [pc, #384]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e1d4      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800494e:	4b5c      	ldr	r3, [pc, #368]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004954:	f003 0302 	and.w	r3, r3, #2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0e6      	beq.n	800492a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004964:	2b00      	cmp	r3, #0
 8004966:	d022      	beq.n	80049ae <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004968:	4b55      	ldr	r3, [pc, #340]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 800496a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496e:	4a54      	ldr	r2, [pc, #336]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004978:	e011      	b.n	800499e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497a:	f7fc feeb 	bl	8001754 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	f241 3288 	movw	r2, #5000	; 0x1388
 8004988:	4293      	cmp	r3, r2
 800498a:	d908      	bls.n	800499e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800498c:	4b4c      	ldr	r3, [pc, #304]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e1ac      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800499e:	4b48      	ldr	r3, [pc, #288]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0e6      	beq.n	800497a <HAL_RCC_OscConfig+0x61a>
 80049ac:	e068      	b.n	8004a80 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80049ae:	4b44      	ldr	r3, [pc, #272]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b4:	4a42      	ldr	r2, [pc, #264]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 80049b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049be:	e011      	b.n	80049e4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fc fec8 	bl	8001754 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d908      	bls.n	80049e4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049d2:	4b3b      	ldr	r3, [pc, #236]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e189      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049e4:	4b36      	ldr	r3, [pc, #216]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1e6      	bne.n	80049c0 <HAL_RCC_OscConfig+0x660>
 80049f2:	e045      	b.n	8004a80 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f4:	f7fc feae 	bl	8001754 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049fa:	e011      	b.n	8004a20 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fc:	f7fc feaa 	bl	8001754 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d908      	bls.n	8004a20 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a0e:	4b2c      	ldr	r3, [pc, #176]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e16b      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a20:	4b27      	ldr	r3, [pc, #156]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e6      	bne.n	80049fc <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004a2e:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d021      	beq.n	8004a80 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004a3c:	4b20      	ldr	r3, [pc, #128]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a42:	4a1f      	ldr	r2, [pc, #124]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004a44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a4c:	e011      	b.n	8004a72 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4e:	f7fc fe81 	bl	8001754 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d908      	bls.n	8004a72 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a60:	4b17      	ldr	r3, [pc, #92]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e142      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004a72:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e6      	bne.n	8004a4e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a80:	7ffb      	ldrb	r3, [r7, #31]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d105      	bne.n	8004a92 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a86:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8a:	4a0d      	ldr	r2, [pc, #52]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d04f      	beq.n	8004b3e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d028      	beq.n	8004af8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004aa6:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aac:	4a04      	ldr	r2, [pc, #16]	; (8004ac0 <HAL_RCC_OscConfig+0x760>)
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab6:	f7fc fe4d 	bl	8001754 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004abc:	e014      	b.n	8004ae8 <HAL_RCC_OscConfig+0x788>
 8004abe:	bf00      	nop
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ac8:	f7fc fe44 	bl	8001754 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d908      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ad6:	4b8a      	ldr	r3, [pc, #552]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e107      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ae8:	4b85      	ldr	r3, [pc, #532]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004aea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0e8      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x768>
 8004af6:	e022      	b.n	8004b3e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004af8:	4b81      	ldr	r3, [pc, #516]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004afe:	4a80      	ldr	r2, [pc, #512]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b08:	f7fc fe24 	bl	8001754 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b0e:	e00f      	b.n	8004b30 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b10:	f7fc fe20 	bl	8001754 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d908      	bls.n	8004b30 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b1e:	4b78      	ldr	r3, [pc, #480]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e0e3      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b30:	4b73      	ldr	r3, [pc, #460]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004b32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e8      	bne.n	8004b10 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 80d7 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b48:	4b6d      	ldr	r3, [pc, #436]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f003 030c 	and.w	r3, r3, #12
 8004b50:	2b0c      	cmp	r3, #12
 8004b52:	f000 8091 	beq.w	8004c78 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d166      	bne.n	8004c2c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5e:	4b68      	ldr	r3, [pc, #416]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a67      	ldr	r2, [pc, #412]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004b64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6a:	f7fc fdf3 	bl	8001754 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b70:	e00e      	b.n	8004b90 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b72:	f7fc fdef 	bl	8001754 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d907      	bls.n	8004b90 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b80:	4b5f      	ldr	r3, [pc, #380]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e0b3      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b90:	4b5b      	ldr	r3, [pc, #364]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1ea      	bne.n	8004b72 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b9c:	4b58      	ldr	r3, [pc, #352]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	4b58      	ldr	r3, [pc, #352]	; (8004d04 <HAL_RCC_OscConfig+0x9a4>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bac:	3a01      	subs	r2, #1
 8004bae:	0112      	lsls	r2, r2, #4
 8004bb0:	4311      	orrs	r1, r2
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bb6:	0212      	lsls	r2, r2, #8
 8004bb8:	4311      	orrs	r1, r2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bbe:	0852      	lsrs	r2, r2, #1
 8004bc0:	3a01      	subs	r2, #1
 8004bc2:	0552      	lsls	r2, r2, #21
 8004bc4:	4311      	orrs	r1, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004bca:	0852      	lsrs	r2, r2, #1
 8004bcc:	3a01      	subs	r2, #1
 8004bce:	0652      	lsls	r2, r2, #25
 8004bd0:	4311      	orrs	r1, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bd6:	06d2      	lsls	r2, r2, #27
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	4949      	ldr	r1, [pc, #292]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004be0:	4b47      	ldr	r3, [pc, #284]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a46      	ldr	r2, [pc, #280]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bec:	4b44      	ldr	r3, [pc, #272]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	4a43      	ldr	r2, [pc, #268]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bf6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fc fdac 	bl	8001754 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bfe:	e00e      	b.n	8004c1e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c00:	f7fc fda8 	bl	8001754 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d907      	bls.n	8004c1e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0e:	4b3c      	ldr	r3, [pc, #240]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e06c      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1e:	4b38      	ldr	r3, [pc, #224]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0ea      	beq.n	8004c00 <HAL_RCC_OscConfig+0x8a0>
 8004c2a:	e064      	b.n	8004cf6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2c:	4b34      	ldr	r3, [pc, #208]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a33      	ldr	r2, [pc, #204]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7fc fd8c 	bl	8001754 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c3e:	e00e      	b.n	8004c5e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c40:	f7fc fd88 	bl	8001754 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d907      	bls.n	8004c5e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c4e:	4b2c      	ldr	r3, [pc, #176]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e04c      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c5e:	4b28      	ldr	r3, [pc, #160]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1ea      	bne.n	8004c40 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c6a:	4b25      	ldr	r3, [pc, #148]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	4924      	ldr	r1, [pc, #144]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004c70:	4b25      	ldr	r3, [pc, #148]	; (8004d08 <HAL_RCC_OscConfig+0x9a8>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	60cb      	str	r3, [r1, #12]
 8004c76:	e03e      	b.n	8004cf6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e039      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8004c84:	4b1e      	ldr	r3, [pc, #120]	; (8004d00 <HAL_RCC_OscConfig+0x9a0>)
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f003 0203 	and.w	r2, r3, #3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d12c      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d123      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d11b      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d113      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	085b      	lsrs	r3, r3, #1
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d109      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce8:	085b      	lsrs	r3, r3, #1
 8004cea:	3b01      	subs	r3, #1
 8004cec:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d001      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3720      	adds	r7, #32
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40021000 	.word	0x40021000
 8004d04:	019f800c 	.word	0x019f800c
 8004d08:	feeefffc 	.word	0xfeeefffc

08004d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e11c      	b.n	8004f5e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d24:	4b90      	ldr	r3, [pc, #576]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d910      	bls.n	8004d54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b8d      	ldr	r3, [pc, #564]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f023 020f 	bic.w	r2, r3, #15
 8004d3a:	498b      	ldr	r1, [pc, #556]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b89      	ldr	r3, [pc, #548]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e104      	b.n	8004f5e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d010      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	4b81      	ldr	r3, [pc, #516]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d908      	bls.n	8004d82 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d70:	4b7e      	ldr	r3, [pc, #504]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	497b      	ldr	r1, [pc, #492]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 8085 	beq.w	8004e9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d11f      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d98:	4b74      	ldr	r3, [pc, #464]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e0da      	b.n	8004f5e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004da8:	f000 fa10 	bl	80051cc <RCC_GetSysClockFreqFromPLLSource>
 8004dac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4a6f      	ldr	r2, [pc, #444]	; (8004f70 <HAL_RCC_ClockConfig+0x264>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d947      	bls.n	8004e46 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004db6:	4b6d      	ldr	r3, [pc, #436]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d141      	bne.n	8004e46 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004dc2:	4b6a      	ldr	r3, [pc, #424]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dca:	4a68      	ldr	r2, [pc, #416]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004dd2:	2380      	movs	r3, #128	; 0x80
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	e036      	b.n	8004e46 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004de0:	4b62      	ldr	r3, [pc, #392]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d115      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0b6      	b.n	8004f5e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d107      	bne.n	8004e08 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004df8:	4b5c      	ldr	r3, [pc, #368]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0aa      	b.n	8004f5e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e08:	4b58      	ldr	r3, [pc, #352]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e0a2      	b.n	8004f5e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e18:	f000 f8b0 	bl	8004f7c <HAL_RCC_GetSysClockFreq>
 8004e1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	4a53      	ldr	r2, [pc, #332]	; (8004f70 <HAL_RCC_ClockConfig+0x264>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d90f      	bls.n	8004e46 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004e26:	4b51      	ldr	r3, [pc, #324]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e32:	4b4e      	ldr	r3, [pc, #312]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e3a:	4a4c      	ldr	r2, [pc, #304]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e42:	2380      	movs	r3, #128	; 0x80
 8004e44:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e46:	4b49      	ldr	r3, [pc, #292]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f023 0203 	bic.w	r2, r3, #3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	4946      	ldr	r1, [pc, #280]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e58:	f7fc fc7c 	bl	8001754 <HAL_GetTick>
 8004e5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5e:	e013      	b.n	8004e88 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e60:	f7fc fc78 	bl	8001754 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d90a      	bls.n	8004e88 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e72:	4b3e      	ldr	r3, [pc, #248]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 020c 	and.w	r2, r3, #12
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e06a      	b.n	8004f5e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e88:	4b38      	ldr	r3, [pc, #224]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 020c 	and.w	r2, r3, #12
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d1e2      	bne.n	8004e60 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b80      	cmp	r3, #128	; 0x80
 8004e9e:	d105      	bne.n	8004eac <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004ea0:	4b32      	ldr	r3, [pc, #200]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	4a31      	ldr	r2, [pc, #196]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eaa:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d010      	beq.n	8004eda <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	4b2b      	ldr	r3, [pc, #172]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d208      	bcs.n	8004eda <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec8:	4b28      	ldr	r3, [pc, #160]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	4925      	ldr	r1, [pc, #148]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eda:	4b23      	ldr	r3, [pc, #140]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d210      	bcs.n	8004f0a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee8:	4b1f      	ldr	r3, [pc, #124]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f023 020f 	bic.w	r2, r3, #15
 8004ef0:	491d      	ldr	r1, [pc, #116]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef8:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <HAL_RCC_ClockConfig+0x25c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d001      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e029      	b.n	8004f5e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0304 	and.w	r3, r3, #4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f16:	4b15      	ldr	r3, [pc, #84]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	4912      	ldr	r1, [pc, #72]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d009      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f34:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	00db      	lsls	r3, r3, #3
 8004f42:	490a      	ldr	r1, [pc, #40]	; (8004f6c <HAL_RCC_ClockConfig+0x260>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004f48:	f000 f8b4 	bl	80050b4 <HAL_RCC_GetHCLKFreq>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <HAL_RCC_ClockConfig+0x268>)
 8004f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004f52:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <HAL_RCC_ClockConfig+0x26c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fc fbac 	bl	80016b4 <HAL_InitTick>
 8004f5c:	4603      	mov	r3, r0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40022000 	.word	0x40022000
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	04c4b400 	.word	0x04c4b400
 8004f74:	20000000 	.word	0x20000000
 8004f78:	20000004 	.word	0x20000004

08004f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61fb      	str	r3, [r7, #28]
 8004f86:	2300      	movs	r3, #0
 8004f88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f8a:	4b47      	ldr	r3, [pc, #284]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
 8004f92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f94:	4b44      	ldr	r3, [pc, #272]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0303 	and.w	r3, r3, #3
 8004f9c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b0c      	cmp	r3, #12
 8004fa8:	d121      	bne.n	8004fee <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d11e      	bne.n	8004fee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004fb0:	4b3d      	ldr	r3, [pc, #244]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d107      	bne.n	8004fcc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004fbc:	4b3a      	ldr	r3, [pc, #232]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fc2:	0a1b      	lsrs	r3, r3, #8
 8004fc4:	f003 030f 	and.w	r3, r3, #15
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	e005      	b.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fcc:	4b36      	ldr	r3, [pc, #216]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	091b      	lsrs	r3, r3, #4
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004fd8:	4a34      	ldr	r2, [pc, #208]	; (80050ac <HAL_RCC_GetSysClockFreq+0x130>)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10d      	bne.n	8005004 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004fec:	e00a      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2b04      	cmp	r3, #4
 8004ff2:	d102      	bne.n	8004ffa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ff4:	4b2e      	ldr	r3, [pc, #184]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x134>)
 8004ff6:	61bb      	str	r3, [r7, #24]
 8004ff8:	e004      	b.n	8005004 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005000:	4b2b      	ldr	r3, [pc, #172]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005002:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	2b0c      	cmp	r3, #12
 8005008:	d146      	bne.n	8005098 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800500a:	4b27      	ldr	r3, [pc, #156]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005014:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	091b      	lsrs	r3, r3, #4
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	3301      	adds	r3, #1
 8005020:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d003      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0xb4>
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	2b03      	cmp	r3, #3
 800502c:	d00d      	beq.n	800504a <HAL_RCC_GetSysClockFreq+0xce>
 800502e:	e019      	b.n	8005064 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005030:	4a1f      	ldr	r2, [pc, #124]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	4a1b      	ldr	r2, [pc, #108]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800503a:	68d2      	ldr	r2, [r2, #12]
 800503c:	0a12      	lsrs	r2, r2, #8
 800503e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005042:	fb02 f303 	mul.w	r3, r2, r3
 8005046:	617b      	str	r3, [r7, #20]
        break;
 8005048:	e019      	b.n	800507e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800504a:	4a19      	ldr	r2, [pc, #100]	; (80050b0 <HAL_RCC_GetSysClockFreq+0x134>)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005052:	4a15      	ldr	r2, [pc, #84]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005054:	68d2      	ldr	r2, [r2, #12]
 8005056:	0a12      	lsrs	r2, r2, #8
 8005058:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800505c:	fb02 f303 	mul.w	r3, r2, r3
 8005060:	617b      	str	r3, [r7, #20]
        break;
 8005062:	e00c      	b.n	800507e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005064:	69fa      	ldr	r2, [r7, #28]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	fbb2 f3f3 	udiv	r3, r2, r3
 800506c:	4a0e      	ldr	r2, [pc, #56]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 800506e:	68d2      	ldr	r2, [r2, #12]
 8005070:	0a12      	lsrs	r2, r2, #8
 8005072:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	617b      	str	r3, [r7, #20]
        break;
 800507c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800507e:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	0e5b      	lsrs	r3, r3, #25
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	3301      	adds	r3, #1
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	fbb2 f3f3 	udiv	r3, r2, r3
 8005096:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005098:	69bb      	ldr	r3, [r7, #24]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3724      	adds	r7, #36	; 0x24
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40021000 	.word	0x40021000
 80050ac:	08006d08 	.word	0x08006d08
 80050b0:	00f42400 	.word	0x00f42400

080050b4 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80050b8:	f7ff ff60 	bl	8004f7c <HAL_RCC_GetSysClockFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <HAL_RCC_GetHCLKFreq+0x20>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	091b      	lsrs	r3, r3, #4
 80050c4:	f003 030f 	and.w	r3, r3, #15
 80050c8:	4903      	ldr	r1, [pc, #12]	; (80050d8 <HAL_RCC_GetHCLKFreq+0x24>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40021000 	.word	0x40021000
 80050d8:	08006cf0 	.word	0x08006cf0

080050dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050e0:	f7ff ffe8 	bl	80050b4 <HAL_RCC_GetHCLKFreq>
 80050e4:	4602      	mov	r2, r0
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	4903      	ldr	r1, [pc, #12]	; (8005100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050f2:	5ccb      	ldrb	r3, [r1, r3]
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40021000 	.word	0x40021000
 8005100:	08006d00 	.word	0x08006d00

08005104 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005110:	4b2c      	ldr	r3, [pc, #176]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800511c:	f7ff f882 	bl	8004224 <HAL_PWREx_GetVoltageRange>
 8005120:	6138      	str	r0, [r7, #16]
 8005122:	e014      	b.n	800514e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005124:	4b27      	ldr	r3, [pc, #156]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	4a26      	ldr	r2, [pc, #152]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800512a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800512e:	6593      	str	r3, [r2, #88]	; 0x58
 8005130:	4b24      	ldr	r3, [pc, #144]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800513c:	f7ff f872 	bl	8004224 <HAL_PWREx_GetVoltageRange>
 8005140:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005142:	4b20      	ldr	r3, [pc, #128]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005146:	4a1f      	ldr	r2, [pc, #124]	; (80051c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800514c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800515a:	d10b      	bne.n	8005174 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b80      	cmp	r3, #128	; 0x80
 8005160:	d919      	bls.n	8005196 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2ba0      	cmp	r3, #160	; 0xa0
 8005166:	d902      	bls.n	800516e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005168:	2302      	movs	r3, #2
 800516a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800516c:	e013      	b.n	8005196 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800516e:	2301      	movs	r3, #1
 8005170:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005172:	e010      	b.n	8005196 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b80      	cmp	r3, #128	; 0x80
 8005178:	d902      	bls.n	8005180 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800517a:	2303      	movs	r3, #3
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	e00a      	b.n	8005196 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b80      	cmp	r3, #128	; 0x80
 8005184:	d102      	bne.n	800518c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005186:	2302      	movs	r3, #2
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	e004      	b.n	8005196 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b70      	cmp	r3, #112	; 0x70
 8005190:	d101      	bne.n	8005196 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005192:	2301      	movs	r3, #1
 8005194:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005196:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f023 020f 	bic.w	r2, r3, #15
 800519e:	490a      	ldr	r1, [pc, #40]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80051a6:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3718      	adds	r7, #24
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000
 80051c8:	40022000 	.word	0x40022000

080051cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b087      	sub	sp, #28
 80051d0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051d2:	4b31      	ldr	r3, [pc, #196]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051dc:	4b2e      	ldr	r3, [pc, #184]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	091b      	lsrs	r3, r3, #4
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	3301      	adds	r3, #1
 80051e8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d015      	beq.n	800521c <RCC_GetSysClockFreqFromPLLSource+0x50>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d839      	bhi.n	800526a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d01c      	beq.n	8005236 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d133      	bne.n	800526a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005202:	4a26      	ldr	r2, [pc, #152]	; (800529c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	fbb2 f3f3 	udiv	r3, r2, r3
 800520a:	4a23      	ldr	r2, [pc, #140]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800520c:	68d2      	ldr	r2, [r2, #12]
 800520e:	0a12      	lsrs	r2, r2, #8
 8005210:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005214:	fb02 f303 	mul.w	r3, r2, r3
 8005218:	613b      	str	r3, [r7, #16]
      break;
 800521a:	e029      	b.n	8005270 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800521c:	4a1f      	ldr	r2, [pc, #124]	; (800529c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	fbb2 f3f3 	udiv	r3, r2, r3
 8005224:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005226:	68d2      	ldr	r2, [r2, #12]
 8005228:	0a12      	lsrs	r2, r2, #8
 800522a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800522e:	fb02 f303 	mul.w	r3, r2, r3
 8005232:	613b      	str	r3, [r7, #16]
      break;
 8005234:	e01c      	b.n	8005270 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005236:	4b18      	ldr	r3, [pc, #96]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d107      	bne.n	8005252 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005242:	4b15      	ldr	r3, [pc, #84]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005248:	0a1b      	lsrs	r3, r3, #8
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e005      	b.n	800525e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005252:	4b11      	ldr	r3, [pc, #68]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	091b      	lsrs	r3, r3, #4
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800525e:	4a10      	ldr	r2, [pc, #64]	; (80052a0 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005266:	613b      	str	r3, [r7, #16]
        break;
 8005268:	e002      	b.n	8005270 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	613b      	str	r3, [r7, #16]
      break;
 800526e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005270:	4b09      	ldr	r3, [pc, #36]	; (8005298 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	0e5b      	lsrs	r3, r3, #25
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	3301      	adds	r3, #1
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	fbb2 f3f3 	udiv	r3, r2, r3
 8005288:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800528a:	683b      	ldr	r3, [r7, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40021000 	.word	0x40021000
 800529c:	00f42400 	.word	0x00f42400
 80052a0:	08006d08 	.word	0x08006d08

080052a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e049      	b.n	800534a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d106      	bne.n	80052d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7fc f85c 	bl	8001388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	3304      	adds	r3, #4
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f000 faa0 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d001      	beq.n	800536c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e047      	b.n	80053fc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a23      	ldr	r2, [pc, #140]	; (8005408 <HAL_TIM_Base_Start+0xb4>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d01d      	beq.n	80053ba <HAL_TIM_Base_Start+0x66>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005386:	d018      	beq.n	80053ba <HAL_TIM_Base_Start+0x66>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1f      	ldr	r2, [pc, #124]	; (800540c <HAL_TIM_Base_Start+0xb8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <HAL_TIM_Base_Start+0x66>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <HAL_TIM_Base_Start+0xbc>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00e      	beq.n	80053ba <HAL_TIM_Base_Start+0x66>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1c      	ldr	r2, [pc, #112]	; (8005414 <HAL_TIM_Base_Start+0xc0>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d009      	beq.n	80053ba <HAL_TIM_Base_Start+0x66>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1b      	ldr	r2, [pc, #108]	; (8005418 <HAL_TIM_Base_Start+0xc4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d004      	beq.n	80053ba <HAL_TIM_Base_Start+0x66>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a19      	ldr	r2, [pc, #100]	; (800541c <HAL_TIM_Base_Start+0xc8>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d115      	bne.n	80053e6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	4b17      	ldr	r3, [pc, #92]	; (8005420 <HAL_TIM_Base_Start+0xcc>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b06      	cmp	r3, #6
 80053ca:	d015      	beq.n	80053f8 <HAL_TIM_Base_Start+0xa4>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d2:	d011      	beq.n	80053f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e4:	e008      	b.n	80053f8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0201 	orr.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	e000      	b.n	80053fa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	40012c00 	.word	0x40012c00
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40013400 	.word	0x40013400
 800541c:	40014000 	.word	0x40014000
 8005420:	00010007 	.word	0x00010007

08005424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d020      	beq.n	8005488 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d01b      	beq.n	8005488 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0202 	mvn.w	r2, #2
 8005458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f003 0303 	and.w	r3, r3, #3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f9bc 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 8005474:	e005      	b.n	8005482 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f9ae 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f9bf 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d020      	beq.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d01b      	beq.n	80054d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0204 	mvn.w	r2, #4
 80054a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f996 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f988 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f999 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d020      	beq.n	8005520 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01b      	beq.n	8005520 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0208 	mvn.w	r2, #8
 80054f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2204      	movs	r2, #4
 80054f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f970 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 800550c:	e005      	b.n	800551a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f962 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f973 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	2b00      	cmp	r3, #0
 8005528:	d020      	beq.n	800556c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01b      	beq.n	800556c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0210 	mvn.w	r2, #16
 800553c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2208      	movs	r2, #8
 8005542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f94a 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 8005558:	e005      	b.n	8005566 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f93c 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f94d 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00c      	beq.n	8005590 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d007      	beq.n	8005590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0201 	mvn.w	r2, #1
 8005588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f91a 	bl	80057c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005596:	2b00      	cmp	r3, #0
 8005598:	d104      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00c      	beq.n	80055be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d007      	beq.n	80055be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80055b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fb09 	bl	8005bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00c      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80055da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fb01 	bl	8005be4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00c      	beq.n	8005606 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f907 	bl	8005814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00c      	beq.n	800562a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f06f 0220 	mvn.w	r2, #32
 8005622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 fac9 	bl	8005bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800562a:	bf00      	nop
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800563c:	2300      	movs	r3, #0
 800563e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005646:	2b01      	cmp	r3, #1
 8005648:	d101      	bne.n	800564e <HAL_TIM_ConfigClockSource+0x1c>
 800564a:	2302      	movs	r3, #2
 800564c:	e0b6      	b.n	80057bc <HAL_TIM_ConfigClockSource+0x18a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800566c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005670:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005678:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800568a:	d03e      	beq.n	800570a <HAL_TIM_ConfigClockSource+0xd8>
 800568c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005690:	f200 8087 	bhi.w	80057a2 <HAL_TIM_ConfigClockSource+0x170>
 8005694:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005698:	f000 8086 	beq.w	80057a8 <HAL_TIM_ConfigClockSource+0x176>
 800569c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a0:	d87f      	bhi.n	80057a2 <HAL_TIM_ConfigClockSource+0x170>
 80056a2:	2b70      	cmp	r3, #112	; 0x70
 80056a4:	d01a      	beq.n	80056dc <HAL_TIM_ConfigClockSource+0xaa>
 80056a6:	2b70      	cmp	r3, #112	; 0x70
 80056a8:	d87b      	bhi.n	80057a2 <HAL_TIM_ConfigClockSource+0x170>
 80056aa:	2b60      	cmp	r3, #96	; 0x60
 80056ac:	d050      	beq.n	8005750 <HAL_TIM_ConfigClockSource+0x11e>
 80056ae:	2b60      	cmp	r3, #96	; 0x60
 80056b0:	d877      	bhi.n	80057a2 <HAL_TIM_ConfigClockSource+0x170>
 80056b2:	2b50      	cmp	r3, #80	; 0x50
 80056b4:	d03c      	beq.n	8005730 <HAL_TIM_ConfigClockSource+0xfe>
 80056b6:	2b50      	cmp	r3, #80	; 0x50
 80056b8:	d873      	bhi.n	80057a2 <HAL_TIM_ConfigClockSource+0x170>
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d058      	beq.n	8005770 <HAL_TIM_ConfigClockSource+0x13e>
 80056be:	2b40      	cmp	r3, #64	; 0x40
 80056c0:	d86f      	bhi.n	80057a2 <HAL_TIM_ConfigClockSource+0x170>
 80056c2:	2b30      	cmp	r3, #48	; 0x30
 80056c4:	d064      	beq.n	8005790 <HAL_TIM_ConfigClockSource+0x15e>
 80056c6:	2b30      	cmp	r3, #48	; 0x30
 80056c8:	d86b      	bhi.n	80057a2 <HAL_TIM_ConfigClockSource+0x170>
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	d060      	beq.n	8005790 <HAL_TIM_ConfigClockSource+0x15e>
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d867      	bhi.n	80057a2 <HAL_TIM_ConfigClockSource+0x170>
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d05c      	beq.n	8005790 <HAL_TIM_ConfigClockSource+0x15e>
 80056d6:	2b10      	cmp	r3, #16
 80056d8:	d05a      	beq.n	8005790 <HAL_TIM_ConfigClockSource+0x15e>
 80056da:	e062      	b.n	80057a2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056ec:	f000 f9be 	bl	8005a6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	609a      	str	r2, [r3, #8]
      break;
 8005708:	e04f      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800571a:	f000 f9a7 	bl	8005a6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800572c:	609a      	str	r2, [r3, #8]
      break;
 800572e:	e03c      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800573c:	461a      	mov	r2, r3
 800573e:	f000 f919 	bl	8005974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2150      	movs	r1, #80	; 0x50
 8005748:	4618      	mov	r0, r3
 800574a:	f000 f972 	bl	8005a32 <TIM_ITRx_SetConfig>
      break;
 800574e:	e02c      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800575c:	461a      	mov	r2, r3
 800575e:	f000 f938 	bl	80059d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2160      	movs	r1, #96	; 0x60
 8005768:	4618      	mov	r0, r3
 800576a:	f000 f962 	bl	8005a32 <TIM_ITRx_SetConfig>
      break;
 800576e:	e01c      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800577c:	461a      	mov	r2, r3
 800577e:	f000 f8f9 	bl	8005974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2140      	movs	r1, #64	; 0x40
 8005788:	4618      	mov	r0, r3
 800578a:	f000 f952 	bl	8005a32 <TIM_ITRx_SetConfig>
      break;
 800578e:	e00c      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f000 f949 	bl	8005a32 <TIM_ITRx_SetConfig>
      break;
 80057a0:	e003      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	73fb      	strb	r3, [r7, #15]
      break;
 80057a6:	e000      	b.n	80057aa <HAL_TIM_ConfigClockSource+0x178>
      break;
 80057a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b083      	sub	sp, #12
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a46      	ldr	r2, [pc, #280]	; (8005954 <TIM_Base_SetConfig+0x12c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d013      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005846:	d00f      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a43      	ldr	r2, [pc, #268]	; (8005958 <TIM_Base_SetConfig+0x130>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00b      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a42      	ldr	r2, [pc, #264]	; (800595c <TIM_Base_SetConfig+0x134>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d007      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a41      	ldr	r2, [pc, #260]	; (8005960 <TIM_Base_SetConfig+0x138>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a40      	ldr	r2, [pc, #256]	; (8005964 <TIM_Base_SetConfig+0x13c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d108      	bne.n	800587a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a35      	ldr	r2, [pc, #212]	; (8005954 <TIM_Base_SetConfig+0x12c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01f      	beq.n	80058c2 <TIM_Base_SetConfig+0x9a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005888:	d01b      	beq.n	80058c2 <TIM_Base_SetConfig+0x9a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a32      	ldr	r2, [pc, #200]	; (8005958 <TIM_Base_SetConfig+0x130>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d017      	beq.n	80058c2 <TIM_Base_SetConfig+0x9a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a31      	ldr	r2, [pc, #196]	; (800595c <TIM_Base_SetConfig+0x134>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d013      	beq.n	80058c2 <TIM_Base_SetConfig+0x9a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a30      	ldr	r2, [pc, #192]	; (8005960 <TIM_Base_SetConfig+0x138>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00f      	beq.n	80058c2 <TIM_Base_SetConfig+0x9a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2f      	ldr	r2, [pc, #188]	; (8005964 <TIM_Base_SetConfig+0x13c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00b      	beq.n	80058c2 <TIM_Base_SetConfig+0x9a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2e      	ldr	r2, [pc, #184]	; (8005968 <TIM_Base_SetConfig+0x140>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d007      	beq.n	80058c2 <TIM_Base_SetConfig+0x9a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2d      	ldr	r2, [pc, #180]	; (800596c <TIM_Base_SetConfig+0x144>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d003      	beq.n	80058c2 <TIM_Base_SetConfig+0x9a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <TIM_Base_SetConfig+0x148>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d108      	bne.n	80058d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a16      	ldr	r2, [pc, #88]	; (8005954 <TIM_Base_SetConfig+0x12c>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00f      	beq.n	8005920 <TIM_Base_SetConfig+0xf8>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a18      	ldr	r2, [pc, #96]	; (8005964 <TIM_Base_SetConfig+0x13c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d00b      	beq.n	8005920 <TIM_Base_SetConfig+0xf8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a17      	ldr	r2, [pc, #92]	; (8005968 <TIM_Base_SetConfig+0x140>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d007      	beq.n	8005920 <TIM_Base_SetConfig+0xf8>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a16      	ldr	r2, [pc, #88]	; (800596c <TIM_Base_SetConfig+0x144>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_Base_SetConfig+0xf8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a15      	ldr	r2, [pc, #84]	; (8005970 <TIM_Base_SetConfig+0x148>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d103      	bne.n	8005928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b01      	cmp	r3, #1
 8005938:	d105      	bne.n	8005946 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	611a      	str	r2, [r3, #16]
  }
}
 8005946:	bf00      	nop
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40012c00 	.word	0x40012c00
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40013400 	.word	0x40013400
 8005968:	40014000 	.word	0x40014000
 800596c:	40014400 	.word	0x40014400
 8005970:	40014800 	.word	0x40014800

08005974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	f023 0201 	bic.w	r2, r3, #1
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800599e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	011b      	lsls	r3, r3, #4
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f023 030a 	bic.w	r3, r3, #10
 80059b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	697a      	ldr	r2, [r7, #20]
 80059c4:	621a      	str	r2, [r3, #32]
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b087      	sub	sp, #28
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	f023 0210 	bic.w	r2, r3, #16
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	031b      	lsls	r3, r3, #12
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	621a      	str	r2, [r3, #32]
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b085      	sub	sp, #20
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f043 0307 	orr.w	r3, r3, #7
 8005a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	609a      	str	r2, [r3, #8]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	021a      	lsls	r2, r3, #8
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	609a      	str	r2, [r3, #8]
}
 8005aa0:	bf00      	nop
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d101      	bne.n	8005ac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	e068      	b.n	8005b96 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a2e      	ldr	r2, [pc, #184]	; (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d004      	beq.n	8005af8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a2d      	ldr	r2, [pc, #180]	; (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d108      	bne.n	8005b0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005afe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1e      	ldr	r2, [pc, #120]	; (8005ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d01d      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b36:	d018      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1b      	ldr	r2, [pc, #108]	; (8005bac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d013      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1a      	ldr	r2, [pc, #104]	; (8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d00e      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a18      	ldr	r2, [pc, #96]	; (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d009      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a13      	ldr	r2, [pc, #76]	; (8005ba8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d004      	beq.n	8005b6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a14      	ldr	r2, [pc, #80]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d10c      	bne.n	8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40012c00 	.word	0x40012c00
 8005ba8:	40013400 	.word	0x40013400
 8005bac:	40000400 	.word	0x40000400
 8005bb0:	40000800 	.word	0x40000800
 8005bb4:	40000c00 	.word	0x40000c00
 8005bb8:	40014000 	.word	0x40014000

08005bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <memset>:
 8005bf8:	4402      	add	r2, r0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d100      	bne.n	8005c02 <memset+0xa>
 8005c00:	4770      	bx	lr
 8005c02:	f803 1b01 	strb.w	r1, [r3], #1
 8005c06:	e7f9      	b.n	8005bfc <memset+0x4>

08005c08 <__libc_init_array>:
 8005c08:	b570      	push	{r4, r5, r6, lr}
 8005c0a:	4d0d      	ldr	r5, [pc, #52]	; (8005c40 <__libc_init_array+0x38>)
 8005c0c:	2600      	movs	r6, #0
 8005c0e:	4c0d      	ldr	r4, [pc, #52]	; (8005c44 <__libc_init_array+0x3c>)
 8005c10:	1b64      	subs	r4, r4, r5
 8005c12:	10a4      	asrs	r4, r4, #2
 8005c14:	42a6      	cmp	r6, r4
 8005c16:	d109      	bne.n	8005c2c <__libc_init_array+0x24>
 8005c18:	4d0b      	ldr	r5, [pc, #44]	; (8005c48 <__libc_init_array+0x40>)
 8005c1a:	2600      	movs	r6, #0
 8005c1c:	4c0b      	ldr	r4, [pc, #44]	; (8005c4c <__libc_init_array+0x44>)
 8005c1e:	f001 f85b 	bl	8006cd8 <_init>
 8005c22:	1b64      	subs	r4, r4, r5
 8005c24:	10a4      	asrs	r4, r4, #2
 8005c26:	42a6      	cmp	r6, r4
 8005c28:	d105      	bne.n	8005c36 <__libc_init_array+0x2e>
 8005c2a:	bd70      	pop	{r4, r5, r6, pc}
 8005c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c30:	3601      	adds	r6, #1
 8005c32:	4798      	blx	r3
 8005c34:	e7ee      	b.n	8005c14 <__libc_init_array+0xc>
 8005c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c3a:	3601      	adds	r6, #1
 8005c3c:	4798      	blx	r3
 8005c3e:	e7f2      	b.n	8005c26 <__libc_init_array+0x1e>
 8005c40:	08006f20 	.word	0x08006f20
 8005c44:	08006f20 	.word	0x08006f20
 8005c48:	08006f20 	.word	0x08006f20
 8005c4c:	08006f24 	.word	0x08006f24

08005c50 <sin>:
 8005c50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c52:	ec53 2b10 	vmov	r2, r3, d0
 8005c56:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005c5a:	4827      	ldr	r0, [pc, #156]	; (8005cf8 <sin+0xa8>)
 8005c5c:	4281      	cmp	r1, r0
 8005c5e:	dc07      	bgt.n	8005c70 <sin+0x20>
 8005c60:	2000      	movs	r0, #0
 8005c62:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005cf0 <sin+0xa0>
 8005c66:	b005      	add	sp, #20
 8005c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c6c:	f000 b910 	b.w	8005e90 <__kernel_sin>
 8005c70:	4822      	ldr	r0, [pc, #136]	; (8005cfc <sin+0xac>)
 8005c72:	4281      	cmp	r1, r0
 8005c74:	dd09      	ble.n	8005c8a <sin+0x3a>
 8005c76:	ee10 0a10 	vmov	r0, s0
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	f7fa fae0 	bl	8000240 <__aeabi_dsub>
 8005c80:	ec41 0b10 	vmov	d0, r0, r1
 8005c84:	b005      	add	sp, #20
 8005c86:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c8a:	4668      	mov	r0, sp
 8005c8c:	f000 f9c0 	bl	8006010 <__ieee754_rem_pio2>
 8005c90:	f000 0003 	and.w	r0, r0, #3
 8005c94:	2801      	cmp	r0, #1
 8005c96:	d00c      	beq.n	8005cb2 <sin+0x62>
 8005c98:	2802      	cmp	r0, #2
 8005c9a:	d011      	beq.n	8005cc0 <sin+0x70>
 8005c9c:	b9f0      	cbnz	r0, 8005cdc <sin+0x8c>
 8005c9e:	2001      	movs	r0, #1
 8005ca0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ca4:	ed9d 0b00 	vldr	d0, [sp]
 8005ca8:	f000 f8f2 	bl	8005e90 <__kernel_sin>
 8005cac:	ec51 0b10 	vmov	r0, r1, d0
 8005cb0:	e7e6      	b.n	8005c80 <sin+0x30>
 8005cb2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005cb6:	ed9d 0b00 	vldr	d0, [sp]
 8005cba:	f000 f821 	bl	8005d00 <__kernel_cos>
 8005cbe:	e7f5      	b.n	8005cac <sin+0x5c>
 8005cc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005cc4:	ed9d 0b00 	vldr	d0, [sp]
 8005cc8:	2001      	movs	r0, #1
 8005cca:	f000 f8e1 	bl	8005e90 <__kernel_sin>
 8005cce:	ee10 0a10 	vmov	r0, s0
 8005cd2:	ec53 2b10 	vmov	r2, r3, d0
 8005cd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005cda:	e7d1      	b.n	8005c80 <sin+0x30>
 8005cdc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ce0:	ed9d 0b00 	vldr	d0, [sp]
 8005ce4:	f000 f80c 	bl	8005d00 <__kernel_cos>
 8005ce8:	e7f1      	b.n	8005cce <sin+0x7e>
 8005cea:	bf00      	nop
 8005cec:	f3af 8000 	nop.w
	...
 8005cf8:	3fe921fb 	.word	0x3fe921fb
 8005cfc:	7fefffff 	.word	0x7fefffff

08005d00 <__kernel_cos>:
 8005d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	ec57 6b10 	vmov	r6, r7, d0
 8005d08:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005d0c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005d10:	ed8d 1b00 	vstr	d1, [sp]
 8005d14:	da07      	bge.n	8005d26 <__kernel_cos+0x26>
 8005d16:	ee10 0a10 	vmov	r0, s0
 8005d1a:	4639      	mov	r1, r7
 8005d1c:	f7fa fee2 	bl	8000ae4 <__aeabi_d2iz>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	f000 8088 	beq.w	8005e36 <__kernel_cos+0x136>
 8005d26:	4632      	mov	r2, r6
 8005d28:	463b      	mov	r3, r7
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	4639      	mov	r1, r7
 8005d2e:	f7fa fc3f 	bl	80005b0 <__aeabi_dmul>
 8005d32:	4604      	mov	r4, r0
 8005d34:	460d      	mov	r5, r1
 8005d36:	2200      	movs	r2, #0
 8005d38:	4b4f      	ldr	r3, [pc, #316]	; (8005e78 <__kernel_cos+0x178>)
 8005d3a:	f7fa fc39 	bl	80005b0 <__aeabi_dmul>
 8005d3e:	4682      	mov	sl, r0
 8005d40:	468b      	mov	fp, r1
 8005d42:	4620      	mov	r0, r4
 8005d44:	4629      	mov	r1, r5
 8005d46:	a33e      	add	r3, pc, #248	; (adr r3, 8005e40 <__kernel_cos+0x140>)
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	f7fa fc30 	bl	80005b0 <__aeabi_dmul>
 8005d50:	a33d      	add	r3, pc, #244	; (adr r3, 8005e48 <__kernel_cos+0x148>)
 8005d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d56:	f7fa fa75 	bl	8000244 <__adddf3>
 8005d5a:	4622      	mov	r2, r4
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	f7fa fc27 	bl	80005b0 <__aeabi_dmul>
 8005d62:	a33b      	add	r3, pc, #236	; (adr r3, 8005e50 <__kernel_cos+0x150>)
 8005d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d68:	f7fa fa6a 	bl	8000240 <__aeabi_dsub>
 8005d6c:	4622      	mov	r2, r4
 8005d6e:	462b      	mov	r3, r5
 8005d70:	f7fa fc1e 	bl	80005b0 <__aeabi_dmul>
 8005d74:	a338      	add	r3, pc, #224	; (adr r3, 8005e58 <__kernel_cos+0x158>)
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f7fa fa63 	bl	8000244 <__adddf3>
 8005d7e:	4622      	mov	r2, r4
 8005d80:	462b      	mov	r3, r5
 8005d82:	f7fa fc15 	bl	80005b0 <__aeabi_dmul>
 8005d86:	a336      	add	r3, pc, #216	; (adr r3, 8005e60 <__kernel_cos+0x160>)
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f7fa fa58 	bl	8000240 <__aeabi_dsub>
 8005d90:	4622      	mov	r2, r4
 8005d92:	462b      	mov	r3, r5
 8005d94:	f7fa fc0c 	bl	80005b0 <__aeabi_dmul>
 8005d98:	a333      	add	r3, pc, #204	; (adr r3, 8005e68 <__kernel_cos+0x168>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	f7fa fa51 	bl	8000244 <__adddf3>
 8005da2:	4622      	mov	r2, r4
 8005da4:	462b      	mov	r3, r5
 8005da6:	f7fa fc03 	bl	80005b0 <__aeabi_dmul>
 8005daa:	4622      	mov	r2, r4
 8005dac:	462b      	mov	r3, r5
 8005dae:	f7fa fbff 	bl	80005b0 <__aeabi_dmul>
 8005db2:	4604      	mov	r4, r0
 8005db4:	460d      	mov	r5, r1
 8005db6:	4630      	mov	r0, r6
 8005db8:	4639      	mov	r1, r7
 8005dba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dbe:	f7fa fbf7 	bl	80005b0 <__aeabi_dmul>
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f7fa fa39 	bl	8000240 <__aeabi_dsub>
 8005dce:	4b2b      	ldr	r3, [pc, #172]	; (8005e7c <__kernel_cos+0x17c>)
 8005dd0:	4606      	mov	r6, r0
 8005dd2:	460f      	mov	r7, r1
 8005dd4:	4598      	cmp	r8, r3
 8005dd6:	dc10      	bgt.n	8005dfa <__kernel_cos+0xfa>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4650      	mov	r0, sl
 8005dde:	4659      	mov	r1, fp
 8005de0:	f7fa fa2e 	bl	8000240 <__aeabi_dsub>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	2000      	movs	r0, #0
 8005dea:	4925      	ldr	r1, [pc, #148]	; (8005e80 <__kernel_cos+0x180>)
 8005dec:	f7fa fa28 	bl	8000240 <__aeabi_dsub>
 8005df0:	ec41 0b10 	vmov	d0, r0, r1
 8005df4:	b003      	add	sp, #12
 8005df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfa:	4b22      	ldr	r3, [pc, #136]	; (8005e84 <__kernel_cos+0x184>)
 8005dfc:	2400      	movs	r4, #0
 8005dfe:	2000      	movs	r0, #0
 8005e00:	491f      	ldr	r1, [pc, #124]	; (8005e80 <__kernel_cos+0x180>)
 8005e02:	4598      	cmp	r8, r3
 8005e04:	4622      	mov	r2, r4
 8005e06:	bfd4      	ite	le
 8005e08:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005e0c:	4d1e      	ldrgt	r5, [pc, #120]	; (8005e88 <__kernel_cos+0x188>)
 8005e0e:	462b      	mov	r3, r5
 8005e10:	f7fa fa16 	bl	8000240 <__aeabi_dsub>
 8005e14:	4622      	mov	r2, r4
 8005e16:	4680      	mov	r8, r0
 8005e18:	4689      	mov	r9, r1
 8005e1a:	462b      	mov	r3, r5
 8005e1c:	4650      	mov	r0, sl
 8005e1e:	4659      	mov	r1, fp
 8005e20:	f7fa fa0e 	bl	8000240 <__aeabi_dsub>
 8005e24:	4632      	mov	r2, r6
 8005e26:	463b      	mov	r3, r7
 8005e28:	f7fa fa0a 	bl	8000240 <__aeabi_dsub>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4640      	mov	r0, r8
 8005e32:	4649      	mov	r1, r9
 8005e34:	e7da      	b.n	8005dec <__kernel_cos+0xec>
 8005e36:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005e70 <__kernel_cos+0x170>
 8005e3a:	e7db      	b.n	8005df4 <__kernel_cos+0xf4>
 8005e3c:	f3af 8000 	nop.w
 8005e40:	be8838d4 	.word	0xbe8838d4
 8005e44:	bda8fae9 	.word	0xbda8fae9
 8005e48:	bdb4b1c4 	.word	0xbdb4b1c4
 8005e4c:	3e21ee9e 	.word	0x3e21ee9e
 8005e50:	809c52ad 	.word	0x809c52ad
 8005e54:	3e927e4f 	.word	0x3e927e4f
 8005e58:	19cb1590 	.word	0x19cb1590
 8005e5c:	3efa01a0 	.word	0x3efa01a0
 8005e60:	16c15177 	.word	0x16c15177
 8005e64:	3f56c16c 	.word	0x3f56c16c
 8005e68:	5555554c 	.word	0x5555554c
 8005e6c:	3fa55555 	.word	0x3fa55555
 8005e70:	00000000 	.word	0x00000000
 8005e74:	3ff00000 	.word	0x3ff00000
 8005e78:	3fe00000 	.word	0x3fe00000
 8005e7c:	3fd33332 	.word	0x3fd33332
 8005e80:	3ff00000 	.word	0x3ff00000
 8005e84:	3fe90000 	.word	0x3fe90000
 8005e88:	3fd20000 	.word	0x3fd20000
 8005e8c:	00000000 	.word	0x00000000

08005e90 <__kernel_sin>:
 8005e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e94:	ec55 4b10 	vmov	r4, r5, d0
 8005e98:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005e9c:	ed2d 8b04 	vpush	{d8-d9}
 8005ea0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	eeb0 8a41 	vmov.f32	s16, s2
 8005eaa:	eef0 8a61 	vmov.f32	s17, s3
 8005eae:	9001      	str	r0, [sp, #4]
 8005eb0:	da06      	bge.n	8005ec0 <__kernel_sin+0x30>
 8005eb2:	ee10 0a10 	vmov	r0, s0
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	f7fa fe14 	bl	8000ae4 <__aeabi_d2iz>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d051      	beq.n	8005f64 <__kernel_sin+0xd4>
 8005ec0:	4622      	mov	r2, r4
 8005ec2:	462b      	mov	r3, r5
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	4629      	mov	r1, r5
 8005ec8:	f7fa fb72 	bl	80005b0 <__aeabi_dmul>
 8005ecc:	4682      	mov	sl, r0
 8005ece:	468b      	mov	fp, r1
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	4629      	mov	r1, r5
 8005ed8:	f7fa fb6a 	bl	80005b0 <__aeabi_dmul>
 8005edc:	4680      	mov	r8, r0
 8005ede:	4689      	mov	r9, r1
 8005ee0:	4650      	mov	r0, sl
 8005ee2:	4659      	mov	r1, fp
 8005ee4:	a33f      	add	r3, pc, #252	; (adr r3, 8005fe4 <__kernel_sin+0x154>)
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f7fa fb61 	bl	80005b0 <__aeabi_dmul>
 8005eee:	a33f      	add	r3, pc, #252	; (adr r3, 8005fec <__kernel_sin+0x15c>)
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f7fa f9a4 	bl	8000240 <__aeabi_dsub>
 8005ef8:	4652      	mov	r2, sl
 8005efa:	465b      	mov	r3, fp
 8005efc:	f7fa fb58 	bl	80005b0 <__aeabi_dmul>
 8005f00:	a33c      	add	r3, pc, #240	; (adr r3, 8005ff4 <__kernel_sin+0x164>)
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	f7fa f99d 	bl	8000244 <__adddf3>
 8005f0a:	4652      	mov	r2, sl
 8005f0c:	465b      	mov	r3, fp
 8005f0e:	f7fa fb4f 	bl	80005b0 <__aeabi_dmul>
 8005f12:	a33a      	add	r3, pc, #232	; (adr r3, 8005ffc <__kernel_sin+0x16c>)
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f7fa f992 	bl	8000240 <__aeabi_dsub>
 8005f1c:	4652      	mov	r2, sl
 8005f1e:	465b      	mov	r3, fp
 8005f20:	f7fa fb46 	bl	80005b0 <__aeabi_dmul>
 8005f24:	a337      	add	r3, pc, #220	; (adr r3, 8006004 <__kernel_sin+0x174>)
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	f7fa f98b 	bl	8000244 <__adddf3>
 8005f2e:	9b01      	ldr	r3, [sp, #4]
 8005f30:	4606      	mov	r6, r0
 8005f32:	460f      	mov	r7, r1
 8005f34:	b9eb      	cbnz	r3, 8005f72 <__kernel_sin+0xe2>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4650      	mov	r0, sl
 8005f3c:	4659      	mov	r1, fp
 8005f3e:	f7fa fb37 	bl	80005b0 <__aeabi_dmul>
 8005f42:	a325      	add	r3, pc, #148	; (adr r3, 8005fd8 <__kernel_sin+0x148>)
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f7fa f97a 	bl	8000240 <__aeabi_dsub>
 8005f4c:	4642      	mov	r2, r8
 8005f4e:	464b      	mov	r3, r9
 8005f50:	f7fa fb2e 	bl	80005b0 <__aeabi_dmul>
 8005f54:	4602      	mov	r2, r0
 8005f56:	460b      	mov	r3, r1
 8005f58:	4620      	mov	r0, r4
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	f7fa f972 	bl	8000244 <__adddf3>
 8005f60:	4604      	mov	r4, r0
 8005f62:	460d      	mov	r5, r1
 8005f64:	ec45 4b10 	vmov	d0, r4, r5
 8005f68:	b003      	add	sp, #12
 8005f6a:	ecbd 8b04 	vpop	{d8-d9}
 8005f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f72:	2200      	movs	r2, #0
 8005f74:	4b1a      	ldr	r3, [pc, #104]	; (8005fe0 <__kernel_sin+0x150>)
 8005f76:	ec51 0b18 	vmov	r0, r1, d8
 8005f7a:	f7fa fb19 	bl	80005b0 <__aeabi_dmul>
 8005f7e:	4632      	mov	r2, r6
 8005f80:	463b      	mov	r3, r7
 8005f82:	ec41 0b19 	vmov	d9, r0, r1
 8005f86:	4640      	mov	r0, r8
 8005f88:	4649      	mov	r1, r9
 8005f8a:	f7fa fb11 	bl	80005b0 <__aeabi_dmul>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	ec51 0b19 	vmov	r0, r1, d9
 8005f96:	f7fa f953 	bl	8000240 <__aeabi_dsub>
 8005f9a:	4652      	mov	r2, sl
 8005f9c:	465b      	mov	r3, fp
 8005f9e:	f7fa fb07 	bl	80005b0 <__aeabi_dmul>
 8005fa2:	ec53 2b18 	vmov	r2, r3, d8
 8005fa6:	f7fa f94b 	bl	8000240 <__aeabi_dsub>
 8005faa:	4606      	mov	r6, r0
 8005fac:	460f      	mov	r7, r1
 8005fae:	4640      	mov	r0, r8
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	a309      	add	r3, pc, #36	; (adr r3, 8005fd8 <__kernel_sin+0x148>)
 8005fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb8:	f7fa fafa 	bl	80005b0 <__aeabi_dmul>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	4639      	mov	r1, r7
 8005fc4:	f7fa f93e 	bl	8000244 <__adddf3>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4620      	mov	r0, r4
 8005fce:	4629      	mov	r1, r5
 8005fd0:	f7fa f936 	bl	8000240 <__aeabi_dsub>
 8005fd4:	e7c4      	b.n	8005f60 <__kernel_sin+0xd0>
 8005fd6:	bf00      	nop
 8005fd8:	55555549 	.word	0x55555549
 8005fdc:	3fc55555 	.word	0x3fc55555
 8005fe0:	3fe00000 	.word	0x3fe00000
 8005fe4:	5acfd57c 	.word	0x5acfd57c
 8005fe8:	3de5d93a 	.word	0x3de5d93a
 8005fec:	8a2b9ceb 	.word	0x8a2b9ceb
 8005ff0:	3e5ae5e6 	.word	0x3e5ae5e6
 8005ff4:	57b1fe7d 	.word	0x57b1fe7d
 8005ff8:	3ec71de3 	.word	0x3ec71de3
 8005ffc:	19c161d5 	.word	0x19c161d5
 8006000:	3f2a01a0 	.word	0x3f2a01a0
 8006004:	1110f8a6 	.word	0x1110f8a6
 8006008:	3f811111 	.word	0x3f811111
 800600c:	00000000 	.word	0x00000000

08006010 <__ieee754_rem_pio2>:
 8006010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006014:	ec55 4b10 	vmov	r4, r5, d0
 8006018:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800601c:	4bca      	ldr	r3, [pc, #808]	; (8006348 <__ieee754_rem_pio2+0x338>)
 800601e:	4682      	mov	sl, r0
 8006020:	4598      	cmp	r8, r3
 8006022:	ed2d 8b02 	vpush	{d8}
 8006026:	b08b      	sub	sp, #44	; 0x2c
 8006028:	9502      	str	r5, [sp, #8]
 800602a:	dc08      	bgt.n	800603e <__ieee754_rem_pio2+0x2e>
 800602c:	2200      	movs	r2, #0
 800602e:	2300      	movs	r3, #0
 8006030:	ed80 0b00 	vstr	d0, [r0]
 8006034:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006038:	f04f 0b00 	mov.w	fp, #0
 800603c:	e028      	b.n	8006090 <__ieee754_rem_pio2+0x80>
 800603e:	4bc3      	ldr	r3, [pc, #780]	; (800634c <__ieee754_rem_pio2+0x33c>)
 8006040:	4598      	cmp	r8, r3
 8006042:	dc78      	bgt.n	8006136 <__ieee754_rem_pio2+0x126>
 8006044:	9b02      	ldr	r3, [sp, #8]
 8006046:	ee10 0a10 	vmov	r0, s0
 800604a:	4ec1      	ldr	r6, [pc, #772]	; (8006350 <__ieee754_rem_pio2+0x340>)
 800604c:	4629      	mov	r1, r5
 800604e:	2b00      	cmp	r3, #0
 8006050:	a3af      	add	r3, pc, #700	; (adr r3, 8006310 <__ieee754_rem_pio2+0x300>)
 8006052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006056:	dd39      	ble.n	80060cc <__ieee754_rem_pio2+0xbc>
 8006058:	f7fa f8f2 	bl	8000240 <__aeabi_dsub>
 800605c:	45b0      	cmp	r8, r6
 800605e:	4604      	mov	r4, r0
 8006060:	460d      	mov	r5, r1
 8006062:	d01b      	beq.n	800609c <__ieee754_rem_pio2+0x8c>
 8006064:	a3ac      	add	r3, pc, #688	; (adr r3, 8006318 <__ieee754_rem_pio2+0x308>)
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f7fa f8e9 	bl	8000240 <__aeabi_dsub>
 800606e:	4602      	mov	r2, r0
 8006070:	460b      	mov	r3, r1
 8006072:	4620      	mov	r0, r4
 8006074:	4629      	mov	r1, r5
 8006076:	e9ca 2300 	strd	r2, r3, [sl]
 800607a:	f7fa f8e1 	bl	8000240 <__aeabi_dsub>
 800607e:	a3a6      	add	r3, pc, #664	; (adr r3, 8006318 <__ieee754_rem_pio2+0x308>)
 8006080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006084:	f04f 0b01 	mov.w	fp, #1
 8006088:	f7fa f8da 	bl	8000240 <__aeabi_dsub>
 800608c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006090:	4658      	mov	r0, fp
 8006092:	b00b      	add	sp, #44	; 0x2c
 8006094:	ecbd 8b02 	vpop	{d8}
 8006098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609c:	a3a0      	add	r3, pc, #640	; (adr r3, 8006320 <__ieee754_rem_pio2+0x310>)
 800609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a2:	f7fa f8cd 	bl	8000240 <__aeabi_dsub>
 80060a6:	4604      	mov	r4, r0
 80060a8:	460d      	mov	r5, r1
 80060aa:	a39f      	add	r3, pc, #636	; (adr r3, 8006328 <__ieee754_rem_pio2+0x318>)
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f7fa f8c6 	bl	8000240 <__aeabi_dsub>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4620      	mov	r0, r4
 80060ba:	4629      	mov	r1, r5
 80060bc:	e9ca 2300 	strd	r2, r3, [sl]
 80060c0:	f7fa f8be 	bl	8000240 <__aeabi_dsub>
 80060c4:	a398      	add	r3, pc, #608	; (adr r3, 8006328 <__ieee754_rem_pio2+0x318>)
 80060c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ca:	e7db      	b.n	8006084 <__ieee754_rem_pio2+0x74>
 80060cc:	f7fa f8ba 	bl	8000244 <__adddf3>
 80060d0:	45b0      	cmp	r8, r6
 80060d2:	4604      	mov	r4, r0
 80060d4:	460d      	mov	r5, r1
 80060d6:	d016      	beq.n	8006106 <__ieee754_rem_pio2+0xf6>
 80060d8:	a38f      	add	r3, pc, #572	; (adr r3, 8006318 <__ieee754_rem_pio2+0x308>)
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f7fa f8b1 	bl	8000244 <__adddf3>
 80060e2:	4602      	mov	r2, r0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4620      	mov	r0, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	e9ca 2300 	strd	r2, r3, [sl]
 80060ee:	f7fa f8a7 	bl	8000240 <__aeabi_dsub>
 80060f2:	a389      	add	r3, pc, #548	; (adr r3, 8006318 <__ieee754_rem_pio2+0x308>)
 80060f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f8:	f7fa f8a4 	bl	8000244 <__adddf3>
 80060fc:	f04f 3bff 	mov.w	fp, #4294967295
 8006100:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006104:	e7c4      	b.n	8006090 <__ieee754_rem_pio2+0x80>
 8006106:	a386      	add	r3, pc, #536	; (adr r3, 8006320 <__ieee754_rem_pio2+0x310>)
 8006108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610c:	f7fa f89a 	bl	8000244 <__adddf3>
 8006110:	4604      	mov	r4, r0
 8006112:	460d      	mov	r5, r1
 8006114:	a384      	add	r3, pc, #528	; (adr r3, 8006328 <__ieee754_rem_pio2+0x318>)
 8006116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611a:	f7fa f893 	bl	8000244 <__adddf3>
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	4620      	mov	r0, r4
 8006124:	4629      	mov	r1, r5
 8006126:	e9ca 2300 	strd	r2, r3, [sl]
 800612a:	f7fa f889 	bl	8000240 <__aeabi_dsub>
 800612e:	a37e      	add	r3, pc, #504	; (adr r3, 8006328 <__ieee754_rem_pio2+0x318>)
 8006130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006134:	e7e0      	b.n	80060f8 <__ieee754_rem_pio2+0xe8>
 8006136:	4b87      	ldr	r3, [pc, #540]	; (8006354 <__ieee754_rem_pio2+0x344>)
 8006138:	4598      	cmp	r8, r3
 800613a:	f300 80d8 	bgt.w	80062ee <__ieee754_rem_pio2+0x2de>
 800613e:	f000 f96d 	bl	800641c <fabs>
 8006142:	ee10 0a10 	vmov	r0, s0
 8006146:	ec55 4b10 	vmov	r4, r5, d0
 800614a:	a379      	add	r3, pc, #484	; (adr r3, 8006330 <__ieee754_rem_pio2+0x320>)
 800614c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006150:	4629      	mov	r1, r5
 8006152:	f7fa fa2d 	bl	80005b0 <__aeabi_dmul>
 8006156:	2200      	movs	r2, #0
 8006158:	4b7f      	ldr	r3, [pc, #508]	; (8006358 <__ieee754_rem_pio2+0x348>)
 800615a:	f7fa f873 	bl	8000244 <__adddf3>
 800615e:	f7fa fcc1 	bl	8000ae4 <__aeabi_d2iz>
 8006162:	4683      	mov	fp, r0
 8006164:	f7fa f9ba 	bl	80004dc <__aeabi_i2d>
 8006168:	4602      	mov	r2, r0
 800616a:	460b      	mov	r3, r1
 800616c:	ec43 2b18 	vmov	d8, r2, r3
 8006170:	a367      	add	r3, pc, #412	; (adr r3, 8006310 <__ieee754_rem_pio2+0x300>)
 8006172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006176:	f7fa fa1b 	bl	80005b0 <__aeabi_dmul>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4620      	mov	r0, r4
 8006180:	4629      	mov	r1, r5
 8006182:	f7fa f85d 	bl	8000240 <__aeabi_dsub>
 8006186:	4606      	mov	r6, r0
 8006188:	460f      	mov	r7, r1
 800618a:	a363      	add	r3, pc, #396	; (adr r3, 8006318 <__ieee754_rem_pio2+0x308>)
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	ec51 0b18 	vmov	r0, r1, d8
 8006194:	f7fa fa0c 	bl	80005b0 <__aeabi_dmul>
 8006198:	f1bb 0f1f 	cmp.w	fp, #31
 800619c:	4604      	mov	r4, r0
 800619e:	460d      	mov	r5, r1
 80061a0:	dc0d      	bgt.n	80061be <__ieee754_rem_pio2+0x1ae>
 80061a2:	f10b 32ff 	add.w	r2, fp, #4294967295
 80061a6:	4b6d      	ldr	r3, [pc, #436]	; (800635c <__ieee754_rem_pio2+0x34c>)
 80061a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ac:	4543      	cmp	r3, r8
 80061ae:	d006      	beq.n	80061be <__ieee754_rem_pio2+0x1ae>
 80061b0:	4622      	mov	r2, r4
 80061b2:	462b      	mov	r3, r5
 80061b4:	4630      	mov	r0, r6
 80061b6:	4639      	mov	r1, r7
 80061b8:	f7fa f842 	bl	8000240 <__aeabi_dsub>
 80061bc:	e00e      	b.n	80061dc <__ieee754_rem_pio2+0x1cc>
 80061be:	462b      	mov	r3, r5
 80061c0:	4622      	mov	r2, r4
 80061c2:	4630      	mov	r0, r6
 80061c4:	4639      	mov	r1, r7
 80061c6:	f7fa f83b 	bl	8000240 <__aeabi_dsub>
 80061ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80061ce:	9303      	str	r3, [sp, #12]
 80061d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80061d4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80061d8:	2b10      	cmp	r3, #16
 80061da:	dc02      	bgt.n	80061e2 <__ieee754_rem_pio2+0x1d2>
 80061dc:	e9ca 0100 	strd	r0, r1, [sl]
 80061e0:	e039      	b.n	8006256 <__ieee754_rem_pio2+0x246>
 80061e2:	a34f      	add	r3, pc, #316	; (adr r3, 8006320 <__ieee754_rem_pio2+0x310>)
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	ec51 0b18 	vmov	r0, r1, d8
 80061ec:	f7fa f9e0 	bl	80005b0 <__aeabi_dmul>
 80061f0:	4604      	mov	r4, r0
 80061f2:	460d      	mov	r5, r1
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4630      	mov	r0, r6
 80061fa:	4639      	mov	r1, r7
 80061fc:	f7fa f820 	bl	8000240 <__aeabi_dsub>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4680      	mov	r8, r0
 8006206:	4689      	mov	r9, r1
 8006208:	4630      	mov	r0, r6
 800620a:	4639      	mov	r1, r7
 800620c:	f7fa f818 	bl	8000240 <__aeabi_dsub>
 8006210:	4622      	mov	r2, r4
 8006212:	462b      	mov	r3, r5
 8006214:	f7fa f814 	bl	8000240 <__aeabi_dsub>
 8006218:	4604      	mov	r4, r0
 800621a:	460d      	mov	r5, r1
 800621c:	a342      	add	r3, pc, #264	; (adr r3, 8006328 <__ieee754_rem_pio2+0x318>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	ec51 0b18 	vmov	r0, r1, d8
 8006226:	f7fa f9c3 	bl	80005b0 <__aeabi_dmul>
 800622a:	4622      	mov	r2, r4
 800622c:	462b      	mov	r3, r5
 800622e:	f7fa f807 	bl	8000240 <__aeabi_dsub>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4604      	mov	r4, r0
 8006238:	460d      	mov	r5, r1
 800623a:	4640      	mov	r0, r8
 800623c:	4649      	mov	r1, r9
 800623e:	f7f9 ffff 	bl	8000240 <__aeabi_dsub>
 8006242:	9a03      	ldr	r2, [sp, #12]
 8006244:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b31      	cmp	r3, #49	; 0x31
 800624c:	dc24      	bgt.n	8006298 <__ieee754_rem_pio2+0x288>
 800624e:	4646      	mov	r6, r8
 8006250:	464f      	mov	r7, r9
 8006252:	e9ca 0100 	strd	r0, r1, [sl]
 8006256:	e9da 8900 	ldrd	r8, r9, [sl]
 800625a:	4630      	mov	r0, r6
 800625c:	4639      	mov	r1, r7
 800625e:	4642      	mov	r2, r8
 8006260:	464b      	mov	r3, r9
 8006262:	f7f9 ffed 	bl	8000240 <__aeabi_dsub>
 8006266:	462b      	mov	r3, r5
 8006268:	4622      	mov	r2, r4
 800626a:	f7f9 ffe9 	bl	8000240 <__aeabi_dsub>
 800626e:	9b02      	ldr	r3, [sp, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006276:	f6bf af0b 	bge.w	8006090 <__ieee754_rem_pio2+0x80>
 800627a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800627e:	f8ca 8000 	str.w	r8, [sl]
 8006282:	f8ca 0008 	str.w	r0, [sl, #8]
 8006286:	f8ca 3004 	str.w	r3, [sl, #4]
 800628a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800628e:	f8ca 300c 	str.w	r3, [sl, #12]
 8006292:	f1cb 0b00 	rsb	fp, fp, #0
 8006296:	e6fb      	b.n	8006090 <__ieee754_rem_pio2+0x80>
 8006298:	a327      	add	r3, pc, #156	; (adr r3, 8006338 <__ieee754_rem_pio2+0x328>)
 800629a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629e:	ec51 0b18 	vmov	r0, r1, d8
 80062a2:	f7fa f985 	bl	80005b0 <__aeabi_dmul>
 80062a6:	4604      	mov	r4, r0
 80062a8:	460d      	mov	r5, r1
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4640      	mov	r0, r8
 80062b0:	4649      	mov	r1, r9
 80062b2:	f7f9 ffc5 	bl	8000240 <__aeabi_dsub>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4606      	mov	r6, r0
 80062bc:	460f      	mov	r7, r1
 80062be:	4640      	mov	r0, r8
 80062c0:	4649      	mov	r1, r9
 80062c2:	f7f9 ffbd 	bl	8000240 <__aeabi_dsub>
 80062c6:	4622      	mov	r2, r4
 80062c8:	462b      	mov	r3, r5
 80062ca:	f7f9 ffb9 	bl	8000240 <__aeabi_dsub>
 80062ce:	4604      	mov	r4, r0
 80062d0:	460d      	mov	r5, r1
 80062d2:	a31b      	add	r3, pc, #108	; (adr r3, 8006340 <__ieee754_rem_pio2+0x330>)
 80062d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d8:	ec51 0b18 	vmov	r0, r1, d8
 80062dc:	f7fa f968 	bl	80005b0 <__aeabi_dmul>
 80062e0:	4622      	mov	r2, r4
 80062e2:	462b      	mov	r3, r5
 80062e4:	f7f9 ffac 	bl	8000240 <__aeabi_dsub>
 80062e8:	4604      	mov	r4, r0
 80062ea:	460d      	mov	r5, r1
 80062ec:	e760      	b.n	80061b0 <__ieee754_rem_pio2+0x1a0>
 80062ee:	4b1c      	ldr	r3, [pc, #112]	; (8006360 <__ieee754_rem_pio2+0x350>)
 80062f0:	4598      	cmp	r8, r3
 80062f2:	dd37      	ble.n	8006364 <__ieee754_rem_pio2+0x354>
 80062f4:	ee10 2a10 	vmov	r2, s0
 80062f8:	462b      	mov	r3, r5
 80062fa:	4620      	mov	r0, r4
 80062fc:	4629      	mov	r1, r5
 80062fe:	f7f9 ff9f 	bl	8000240 <__aeabi_dsub>
 8006302:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006306:	e9ca 0100 	strd	r0, r1, [sl]
 800630a:	e695      	b.n	8006038 <__ieee754_rem_pio2+0x28>
 800630c:	f3af 8000 	nop.w
 8006310:	54400000 	.word	0x54400000
 8006314:	3ff921fb 	.word	0x3ff921fb
 8006318:	1a626331 	.word	0x1a626331
 800631c:	3dd0b461 	.word	0x3dd0b461
 8006320:	1a600000 	.word	0x1a600000
 8006324:	3dd0b461 	.word	0x3dd0b461
 8006328:	2e037073 	.word	0x2e037073
 800632c:	3ba3198a 	.word	0x3ba3198a
 8006330:	6dc9c883 	.word	0x6dc9c883
 8006334:	3fe45f30 	.word	0x3fe45f30
 8006338:	2e000000 	.word	0x2e000000
 800633c:	3ba3198a 	.word	0x3ba3198a
 8006340:	252049c1 	.word	0x252049c1
 8006344:	397b839a 	.word	0x397b839a
 8006348:	3fe921fb 	.word	0x3fe921fb
 800634c:	4002d97b 	.word	0x4002d97b
 8006350:	3ff921fb 	.word	0x3ff921fb
 8006354:	413921fb 	.word	0x413921fb
 8006358:	3fe00000 	.word	0x3fe00000
 800635c:	08006d48 	.word	0x08006d48
 8006360:	7fefffff 	.word	0x7fefffff
 8006364:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006368:	4620      	mov	r0, r4
 800636a:	2703      	movs	r7, #3
 800636c:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006370:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006374:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006378:	460d      	mov	r5, r1
 800637a:	f7fa fbb3 	bl	8000ae4 <__aeabi_d2iz>
 800637e:	f7fa f8ad 	bl	80004dc <__aeabi_i2d>
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	4620      	mov	r0, r4
 8006388:	4629      	mov	r1, r5
 800638a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800638e:	f7f9 ff57 	bl	8000240 <__aeabi_dsub>
 8006392:	2200      	movs	r2, #0
 8006394:	4b1f      	ldr	r3, [pc, #124]	; (8006414 <__ieee754_rem_pio2+0x404>)
 8006396:	f7fa f90b 	bl	80005b0 <__aeabi_dmul>
 800639a:	460d      	mov	r5, r1
 800639c:	4604      	mov	r4, r0
 800639e:	f7fa fba1 	bl	8000ae4 <__aeabi_d2iz>
 80063a2:	f7fa f89b 	bl	80004dc <__aeabi_i2d>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	4620      	mov	r0, r4
 80063ac:	4629      	mov	r1, r5
 80063ae:	2400      	movs	r4, #0
 80063b0:	2500      	movs	r5, #0
 80063b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80063b6:	f7f9 ff43 	bl	8000240 <__aeabi_dsub>
 80063ba:	2200      	movs	r2, #0
 80063bc:	4b15      	ldr	r3, [pc, #84]	; (8006414 <__ieee754_rem_pio2+0x404>)
 80063be:	f7fa f8f7 	bl	80005b0 <__aeabi_dmul>
 80063c2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80063c6:	4622      	mov	r2, r4
 80063c8:	462b      	mov	r3, r5
 80063ca:	46b9      	mov	r9, r7
 80063cc:	3f01      	subs	r7, #1
 80063ce:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80063d2:	f7fa fb55 	bl	8000a80 <__aeabi_dcmpeq>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d1f5      	bne.n	80063c6 <__ieee754_rem_pio2+0x3b6>
 80063da:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <__ieee754_rem_pio2+0x408>)
 80063dc:	4632      	mov	r2, r6
 80063de:	4651      	mov	r1, sl
 80063e0:	a804      	add	r0, sp, #16
 80063e2:	9301      	str	r3, [sp, #4]
 80063e4:	2302      	movs	r3, #2
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	464b      	mov	r3, r9
 80063ea:	f000 f821 	bl	8006430 <__kernel_rem_pio2>
 80063ee:	9b02      	ldr	r3, [sp, #8]
 80063f0:	4683      	mov	fp, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f6bf ae4c 	bge.w	8006090 <__ieee754_rem_pio2+0x80>
 80063f8:	e9da 2100 	ldrd	r2, r1, [sl]
 80063fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006400:	e9ca 2300 	strd	r2, r3, [sl]
 8006404:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006408:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800640c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006410:	e73f      	b.n	8006292 <__ieee754_rem_pio2+0x282>
 8006412:	bf00      	nop
 8006414:	41700000 	.word	0x41700000
 8006418:	08006dc8 	.word	0x08006dc8

0800641c <fabs>:
 800641c:	ec51 0b10 	vmov	r0, r1, d0
 8006420:	ee10 2a10 	vmov	r2, s0
 8006424:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006428:	ec43 2b10 	vmov	d0, r2, r3
 800642c:	4770      	bx	lr
	...

08006430 <__kernel_rem_pio2>:
 8006430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006434:	ed2d 8b02 	vpush	{d8}
 8006438:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800643c:	f112 0f14 	cmn.w	r2, #20
 8006440:	f04f 0500 	mov.w	r5, #0
 8006444:	9306      	str	r3, [sp, #24]
 8006446:	bfa8      	it	ge
 8006448:	1ed4      	subge	r4, r2, #3
 800644a:	4bc5      	ldr	r3, [pc, #788]	; (8006760 <__kernel_rem_pio2+0x330>)
 800644c:	bfb8      	it	lt
 800644e:	2400      	movlt	r4, #0
 8006450:	9104      	str	r1, [sp, #16]
 8006452:	ae20      	add	r6, sp, #128	; 0x80
 8006454:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006456:	9009      	str	r0, [sp, #36]	; 0x24
 8006458:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	9b06      	ldr	r3, [sp, #24]
 8006460:	f103 33ff 	add.w	r3, r3, #4294967295
 8006464:	9305      	str	r3, [sp, #20]
 8006466:	bfa4      	itt	ge
 8006468:	2318      	movge	r3, #24
 800646a:	fb94 f4f3 	sdivge	r4, r4, r3
 800646e:	f06f 0317 	mvn.w	r3, #23
 8006472:	fb04 3303 	mla	r3, r4, r3, r3
 8006476:	eb03 0a02 	add.w	sl, r3, r2
 800647a:	9b00      	ldr	r3, [sp, #0]
 800647c:	9a05      	ldr	r2, [sp, #20]
 800647e:	eb03 0802 	add.w	r8, r3, r2
 8006482:	1aa7      	subs	r7, r4, r2
 8006484:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006486:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8006750 <__kernel_rem_pio2+0x320>
 800648a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800648e:	4545      	cmp	r5, r8
 8006490:	dd13      	ble.n	80064ba <__kernel_rem_pio2+0x8a>
 8006492:	aa20      	add	r2, sp, #128	; 0x80
 8006494:	9b06      	ldr	r3, [sp, #24]
 8006496:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800649a:	f04f 0800 	mov.w	r8, #0
 800649e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80064a2:	9b00      	ldr	r3, [sp, #0]
 80064a4:	4598      	cmp	r8, r3
 80064a6:	dc30      	bgt.n	800650a <__kernel_rem_pio2+0xda>
 80064a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80064ac:	462f      	mov	r7, r5
 80064ae:	2600      	movs	r6, #0
 80064b0:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8006750 <__kernel_rem_pio2+0x320>
 80064b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80064b8:	e01b      	b.n	80064f2 <__kernel_rem_pio2+0xc2>
 80064ba:	42ef      	cmn	r7, r5
 80064bc:	d407      	bmi.n	80064ce <__kernel_rem_pio2+0x9e>
 80064be:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80064c2:	f7fa f80b 	bl	80004dc <__aeabi_i2d>
 80064c6:	3501      	adds	r5, #1
 80064c8:	e8e6 0102 	strd	r0, r1, [r6], #8
 80064cc:	e7df      	b.n	800648e <__kernel_rem_pio2+0x5e>
 80064ce:	ec51 0b18 	vmov	r0, r1, d8
 80064d2:	e7f8      	b.n	80064c6 <__kernel_rem_pio2+0x96>
 80064d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d8:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80064dc:	3601      	adds	r6, #1
 80064de:	f7fa f867 	bl	80005b0 <__aeabi_dmul>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ea:	f7f9 feab 	bl	8000244 <__adddf3>
 80064ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f2:	9b05      	ldr	r3, [sp, #20]
 80064f4:	3f08      	subs	r7, #8
 80064f6:	429e      	cmp	r6, r3
 80064f8:	ddec      	ble.n	80064d4 <__kernel_rem_pio2+0xa4>
 80064fa:	f108 0801 	add.w	r8, r8, #1
 80064fe:	3508      	adds	r5, #8
 8006500:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006504:	ecab 7b02 	vstmia	fp!, {d7}
 8006508:	e7cb      	b.n	80064a2 <__kernel_rem_pio2+0x72>
 800650a:	9b00      	ldr	r3, [sp, #0]
 800650c:	aa0c      	add	r2, sp, #48	; 0x30
 800650e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006512:	930b      	str	r3, [sp, #44]	; 0x2c
 8006514:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006516:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800651a:	9c00      	ldr	r4, [sp, #0]
 800651c:	930a      	str	r3, [sp, #40]	; 0x28
 800651e:	00e3      	lsls	r3, r4, #3
 8006520:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006524:	46a1      	mov	r9, r4
 8006526:	9308      	str	r3, [sp, #32]
 8006528:	ab98      	add	r3, sp, #608	; 0x260
 800652a:	46c3      	mov	fp, r8
 800652c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006530:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006534:	ab70      	add	r3, sp, #448	; 0x1c0
 8006536:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800653a:	f1b9 0f00 	cmp.w	r9, #0
 800653e:	f1a5 0508 	sub.w	r5, r5, #8
 8006542:	dc77      	bgt.n	8006634 <__kernel_rem_pio2+0x204>
 8006544:	4650      	mov	r0, sl
 8006546:	ec47 6b10 	vmov	d0, r6, r7
 800654a:	f000 fac5 	bl	8006ad8 <scalbn>
 800654e:	2200      	movs	r2, #0
 8006550:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006554:	ee10 0a10 	vmov	r0, s0
 8006558:	ec57 6b10 	vmov	r6, r7, d0
 800655c:	4639      	mov	r1, r7
 800655e:	f7fa f827 	bl	80005b0 <__aeabi_dmul>
 8006562:	ec41 0b10 	vmov	d0, r0, r1
 8006566:	f000 fb37 	bl	8006bd8 <floor>
 800656a:	2200      	movs	r2, #0
 800656c:	4b7d      	ldr	r3, [pc, #500]	; (8006764 <__kernel_rem_pio2+0x334>)
 800656e:	ec51 0b10 	vmov	r0, r1, d0
 8006572:	f7fa f81d 	bl	80005b0 <__aeabi_dmul>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4630      	mov	r0, r6
 800657c:	4639      	mov	r1, r7
 800657e:	f7f9 fe5f 	bl	8000240 <__aeabi_dsub>
 8006582:	460f      	mov	r7, r1
 8006584:	4606      	mov	r6, r0
 8006586:	f7fa faad 	bl	8000ae4 <__aeabi_d2iz>
 800658a:	9002      	str	r0, [sp, #8]
 800658c:	f7f9 ffa6 	bl	80004dc <__aeabi_i2d>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4630      	mov	r0, r6
 8006596:	4639      	mov	r1, r7
 8006598:	f7f9 fe52 	bl	8000240 <__aeabi_dsub>
 800659c:	f1ba 0f00 	cmp.w	sl, #0
 80065a0:	4606      	mov	r6, r0
 80065a2:	460f      	mov	r7, r1
 80065a4:	dd6d      	ble.n	8006682 <__kernel_rem_pio2+0x252>
 80065a6:	1e61      	subs	r1, r4, #1
 80065a8:	ab0c      	add	r3, sp, #48	; 0x30
 80065aa:	f1ca 0018 	rsb	r0, sl, #24
 80065ae:	9d02      	ldr	r5, [sp, #8]
 80065b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80065b4:	fa43 f200 	asr.w	r2, r3, r0
 80065b8:	4415      	add	r5, r2
 80065ba:	4082      	lsls	r2, r0
 80065bc:	1a9b      	subs	r3, r3, r2
 80065be:	aa0c      	add	r2, sp, #48	; 0x30
 80065c0:	9502      	str	r5, [sp, #8]
 80065c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80065c6:	f1ca 0217 	rsb	r2, sl, #23
 80065ca:	fa43 fb02 	asr.w	fp, r3, r2
 80065ce:	f1bb 0f00 	cmp.w	fp, #0
 80065d2:	dd65      	ble.n	80066a0 <__kernel_rem_pio2+0x270>
 80065d4:	9b02      	ldr	r3, [sp, #8]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80065dc:	3301      	adds	r3, #1
 80065de:	4615      	mov	r5, r2
 80065e0:	9302      	str	r3, [sp, #8]
 80065e2:	4294      	cmp	r4, r2
 80065e4:	f300 809f 	bgt.w	8006726 <__kernel_rem_pio2+0x2f6>
 80065e8:	f1ba 0f00 	cmp.w	sl, #0
 80065ec:	dd07      	ble.n	80065fe <__kernel_rem_pio2+0x1ce>
 80065ee:	f1ba 0f01 	cmp.w	sl, #1
 80065f2:	f000 80c3 	beq.w	800677c <__kernel_rem_pio2+0x34c>
 80065f6:	f1ba 0f02 	cmp.w	sl, #2
 80065fa:	f000 80c9 	beq.w	8006790 <__kernel_rem_pio2+0x360>
 80065fe:	f1bb 0f02 	cmp.w	fp, #2
 8006602:	d14d      	bne.n	80066a0 <__kernel_rem_pio2+0x270>
 8006604:	4632      	mov	r2, r6
 8006606:	463b      	mov	r3, r7
 8006608:	2000      	movs	r0, #0
 800660a:	4957      	ldr	r1, [pc, #348]	; (8006768 <__kernel_rem_pio2+0x338>)
 800660c:	f7f9 fe18 	bl	8000240 <__aeabi_dsub>
 8006610:	4606      	mov	r6, r0
 8006612:	460f      	mov	r7, r1
 8006614:	2d00      	cmp	r5, #0
 8006616:	d043      	beq.n	80066a0 <__kernel_rem_pio2+0x270>
 8006618:	4650      	mov	r0, sl
 800661a:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8006758 <__kernel_rem_pio2+0x328>
 800661e:	f000 fa5b 	bl	8006ad8 <scalbn>
 8006622:	4630      	mov	r0, r6
 8006624:	4639      	mov	r1, r7
 8006626:	ec53 2b10 	vmov	r2, r3, d0
 800662a:	f7f9 fe09 	bl	8000240 <__aeabi_dsub>
 800662e:	4606      	mov	r6, r0
 8006630:	460f      	mov	r7, r1
 8006632:	e035      	b.n	80066a0 <__kernel_rem_pio2+0x270>
 8006634:	2200      	movs	r2, #0
 8006636:	4b4d      	ldr	r3, [pc, #308]	; (800676c <__kernel_rem_pio2+0x33c>)
 8006638:	4630      	mov	r0, r6
 800663a:	4639      	mov	r1, r7
 800663c:	f7f9 ffb8 	bl	80005b0 <__aeabi_dmul>
 8006640:	f109 39ff 	add.w	r9, r9, #4294967295
 8006644:	f7fa fa4e 	bl	8000ae4 <__aeabi_d2iz>
 8006648:	f7f9 ff48 	bl	80004dc <__aeabi_i2d>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	ec43 2b18 	vmov	d8, r2, r3
 8006654:	2200      	movs	r2, #0
 8006656:	4b46      	ldr	r3, [pc, #280]	; (8006770 <__kernel_rem_pio2+0x340>)
 8006658:	f7f9 ffaa 	bl	80005b0 <__aeabi_dmul>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4630      	mov	r0, r6
 8006662:	4639      	mov	r1, r7
 8006664:	f7f9 fdec 	bl	8000240 <__aeabi_dsub>
 8006668:	f7fa fa3c 	bl	8000ae4 <__aeabi_d2iz>
 800666c:	f84b 0b04 	str.w	r0, [fp], #4
 8006670:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006674:	ec51 0b18 	vmov	r0, r1, d8
 8006678:	f7f9 fde4 	bl	8000244 <__adddf3>
 800667c:	4606      	mov	r6, r0
 800667e:	460f      	mov	r7, r1
 8006680:	e75b      	b.n	800653a <__kernel_rem_pio2+0x10a>
 8006682:	d106      	bne.n	8006692 <__kernel_rem_pio2+0x262>
 8006684:	1e63      	subs	r3, r4, #1
 8006686:	aa0c      	add	r2, sp, #48	; 0x30
 8006688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800668c:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8006690:	e79d      	b.n	80065ce <__kernel_rem_pio2+0x19e>
 8006692:	2200      	movs	r2, #0
 8006694:	4b37      	ldr	r3, [pc, #220]	; (8006774 <__kernel_rem_pio2+0x344>)
 8006696:	f7fa fa11 	bl	8000abc <__aeabi_dcmpge>
 800669a:	2800      	cmp	r0, #0
 800669c:	d140      	bne.n	8006720 <__kernel_rem_pio2+0x2f0>
 800669e:	4683      	mov	fp, r0
 80066a0:	2200      	movs	r2, #0
 80066a2:	2300      	movs	r3, #0
 80066a4:	4630      	mov	r0, r6
 80066a6:	4639      	mov	r1, r7
 80066a8:	f7fa f9ea 	bl	8000a80 <__aeabi_dcmpeq>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	f000 80c3 	beq.w	8006838 <__kernel_rem_pio2+0x408>
 80066b2:	1e65      	subs	r5, r4, #1
 80066b4:	2200      	movs	r2, #0
 80066b6:	462b      	mov	r3, r5
 80066b8:	9900      	ldr	r1, [sp, #0]
 80066ba:	428b      	cmp	r3, r1
 80066bc:	da6f      	bge.n	800679e <__kernel_rem_pio2+0x36e>
 80066be:	2a00      	cmp	r2, #0
 80066c0:	f000 808c 	beq.w	80067dc <__kernel_rem_pio2+0x3ac>
 80066c4:	ab0c      	add	r3, sp, #48	; 0x30
 80066c6:	f1aa 0a18 	sub.w	sl, sl, #24
 80066ca:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 80b0 	beq.w	8006834 <__kernel_rem_pio2+0x404>
 80066d4:	4650      	mov	r0, sl
 80066d6:	462c      	mov	r4, r5
 80066d8:	f04f 0800 	mov.w	r8, #0
 80066dc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800676c <__kernel_rem_pio2+0x33c>
 80066e0:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8006758 <__kernel_rem_pio2+0x328>
 80066e4:	f000 f9f8 	bl	8006ad8 <scalbn>
 80066e8:	1c6b      	adds	r3, r5, #1
 80066ea:	00da      	lsls	r2, r3, #3
 80066ec:	9205      	str	r2, [sp, #20]
 80066ee:	aa70      	add	r2, sp, #448	; 0x1c0
 80066f0:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80066f4:	ec57 6b10 	vmov	r6, r7, d0
 80066f8:	2c00      	cmp	r4, #0
 80066fa:	f280 80d6 	bge.w	80068aa <__kernel_rem_pio2+0x47a>
 80066fe:	462c      	mov	r4, r5
 8006700:	2c00      	cmp	r4, #0
 8006702:	f2c0 8104 	blt.w	800690e <__kernel_rem_pio2+0x4de>
 8006706:	4b1c      	ldr	r3, [pc, #112]	; (8006778 <__kernel_rem_pio2+0x348>)
 8006708:	f04f 0900 	mov.w	r9, #0
 800670c:	f04f 0a00 	mov.w	sl, #0
 8006710:	2700      	movs	r7, #0
 8006712:	461e      	mov	r6, r3
 8006714:	ab70      	add	r3, sp, #448	; 0x1c0
 8006716:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800671a:	1b2b      	subs	r3, r5, r4
 800671c:	9306      	str	r3, [sp, #24]
 800671e:	e0e8      	b.n	80068f2 <__kernel_rem_pio2+0x4c2>
 8006720:	f04f 0b02 	mov.w	fp, #2
 8006724:	e756      	b.n	80065d4 <__kernel_rem_pio2+0x1a4>
 8006726:	f8d8 3000 	ldr.w	r3, [r8]
 800672a:	b955      	cbnz	r5, 8006742 <__kernel_rem_pio2+0x312>
 800672c:	b123      	cbz	r3, 8006738 <__kernel_rem_pio2+0x308>
 800672e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006732:	f8c8 3000 	str.w	r3, [r8]
 8006736:	2301      	movs	r3, #1
 8006738:	3201      	adds	r2, #1
 800673a:	f108 0804 	add.w	r8, r8, #4
 800673e:	461d      	mov	r5, r3
 8006740:	e74f      	b.n	80065e2 <__kernel_rem_pio2+0x1b2>
 8006742:	1acb      	subs	r3, r1, r3
 8006744:	f8c8 3000 	str.w	r3, [r8]
 8006748:	462b      	mov	r3, r5
 800674a:	e7f5      	b.n	8006738 <__kernel_rem_pio2+0x308>
 800674c:	f3af 8000 	nop.w
	...
 800675c:	3ff00000 	.word	0x3ff00000
 8006760:	08006f10 	.word	0x08006f10
 8006764:	40200000 	.word	0x40200000
 8006768:	3ff00000 	.word	0x3ff00000
 800676c:	3e700000 	.word	0x3e700000
 8006770:	41700000 	.word	0x41700000
 8006774:	3fe00000 	.word	0x3fe00000
 8006778:	08006ed0 	.word	0x08006ed0
 800677c:	1e62      	subs	r2, r4, #1
 800677e:	ab0c      	add	r3, sp, #48	; 0x30
 8006780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006784:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006788:	a90c      	add	r1, sp, #48	; 0x30
 800678a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800678e:	e736      	b.n	80065fe <__kernel_rem_pio2+0x1ce>
 8006790:	1e62      	subs	r2, r4, #1
 8006792:	ab0c      	add	r3, sp, #48	; 0x30
 8006794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006798:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800679c:	e7f4      	b.n	8006788 <__kernel_rem_pio2+0x358>
 800679e:	a90c      	add	r1, sp, #48	; 0x30
 80067a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80067a4:	3b01      	subs	r3, #1
 80067a6:	430a      	orrs	r2, r1
 80067a8:	e786      	b.n	80066b8 <__kernel_rem_pio2+0x288>
 80067aa:	3301      	adds	r3, #1
 80067ac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80067b0:	2900      	cmp	r1, #0
 80067b2:	d0fa      	beq.n	80067aa <__kernel_rem_pio2+0x37a>
 80067b4:	9a08      	ldr	r2, [sp, #32]
 80067b6:	a920      	add	r1, sp, #128	; 0x80
 80067b8:	18e3      	adds	r3, r4, r3
 80067ba:	f104 0801 	add.w	r8, r4, #1
 80067be:	f502 7218 	add.w	r2, r2, #608	; 0x260
 80067c2:	9302      	str	r3, [sp, #8]
 80067c4:	446a      	add	r2, sp
 80067c6:	3a98      	subs	r2, #152	; 0x98
 80067c8:	9208      	str	r2, [sp, #32]
 80067ca:	9a06      	ldr	r2, [sp, #24]
 80067cc:	18a2      	adds	r2, r4, r2
 80067ce:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80067d2:	9b02      	ldr	r3, [sp, #8]
 80067d4:	4543      	cmp	r3, r8
 80067d6:	da04      	bge.n	80067e2 <__kernel_rem_pio2+0x3b2>
 80067d8:	461c      	mov	r4, r3
 80067da:	e6a0      	b.n	800651e <__kernel_rem_pio2+0xee>
 80067dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067de:	2301      	movs	r3, #1
 80067e0:	e7e4      	b.n	80067ac <__kernel_rem_pio2+0x37c>
 80067e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e4:	f04f 0900 	mov.w	r9, #0
 80067e8:	2600      	movs	r6, #0
 80067ea:	2700      	movs	r7, #0
 80067ec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80067f0:	f7f9 fe74 	bl	80004dc <__aeabi_i2d>
 80067f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f6:	e8e5 0102 	strd	r0, r1, [r5], #8
 80067fa:	461c      	mov	r4, r3
 80067fc:	46ab      	mov	fp, r5
 80067fe:	9b05      	ldr	r3, [sp, #20]
 8006800:	4599      	cmp	r9, r3
 8006802:	dd06      	ble.n	8006812 <__kernel_rem_pio2+0x3e2>
 8006804:	9b08      	ldr	r3, [sp, #32]
 8006806:	f108 0801 	add.w	r8, r8, #1
 800680a:	e8e3 6702 	strd	r6, r7, [r3], #8
 800680e:	9308      	str	r3, [sp, #32]
 8006810:	e7df      	b.n	80067d2 <__kernel_rem_pio2+0x3a2>
 8006812:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006816:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800681a:	f7f9 fec9 	bl	80005b0 <__aeabi_dmul>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4630      	mov	r0, r6
 8006824:	4639      	mov	r1, r7
 8006826:	f109 0901 	add.w	r9, r9, #1
 800682a:	f7f9 fd0b 	bl	8000244 <__adddf3>
 800682e:	4606      	mov	r6, r0
 8006830:	460f      	mov	r7, r1
 8006832:	e7e4      	b.n	80067fe <__kernel_rem_pio2+0x3ce>
 8006834:	3d01      	subs	r5, #1
 8006836:	e745      	b.n	80066c4 <__kernel_rem_pio2+0x294>
 8006838:	f1ca 0000 	rsb	r0, sl, #0
 800683c:	ec47 6b10 	vmov	d0, r6, r7
 8006840:	f000 f94a 	bl	8006ad8 <scalbn>
 8006844:	2200      	movs	r2, #0
 8006846:	4ba1      	ldr	r3, [pc, #644]	; (8006acc <__kernel_rem_pio2+0x69c>)
 8006848:	ee10 0a10 	vmov	r0, s0
 800684c:	ec57 6b10 	vmov	r6, r7, d0
 8006850:	4639      	mov	r1, r7
 8006852:	f7fa f933 	bl	8000abc <__aeabi_dcmpge>
 8006856:	b1f8      	cbz	r0, 8006898 <__kernel_rem_pio2+0x468>
 8006858:	2200      	movs	r2, #0
 800685a:	4b9d      	ldr	r3, [pc, #628]	; (8006ad0 <__kernel_rem_pio2+0x6a0>)
 800685c:	4630      	mov	r0, r6
 800685e:	4639      	mov	r1, r7
 8006860:	f7f9 fea6 	bl	80005b0 <__aeabi_dmul>
 8006864:	1c65      	adds	r5, r4, #1
 8006866:	f7fa f93d 	bl	8000ae4 <__aeabi_d2iz>
 800686a:	4680      	mov	r8, r0
 800686c:	f7f9 fe36 	bl	80004dc <__aeabi_i2d>
 8006870:	2200      	movs	r2, #0
 8006872:	4b96      	ldr	r3, [pc, #600]	; (8006acc <__kernel_rem_pio2+0x69c>)
 8006874:	f10a 0a18 	add.w	sl, sl, #24
 8006878:	f7f9 fe9a 	bl	80005b0 <__aeabi_dmul>
 800687c:	460b      	mov	r3, r1
 800687e:	4602      	mov	r2, r0
 8006880:	4639      	mov	r1, r7
 8006882:	4630      	mov	r0, r6
 8006884:	f7f9 fcdc 	bl	8000240 <__aeabi_dsub>
 8006888:	f7fa f92c 	bl	8000ae4 <__aeabi_d2iz>
 800688c:	ab0c      	add	r3, sp, #48	; 0x30
 800688e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006892:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8006896:	e71d      	b.n	80066d4 <__kernel_rem_pio2+0x2a4>
 8006898:	4630      	mov	r0, r6
 800689a:	4639      	mov	r1, r7
 800689c:	f7fa f922 	bl	8000ae4 <__aeabi_d2iz>
 80068a0:	ab0c      	add	r3, sp, #48	; 0x30
 80068a2:	4625      	mov	r5, r4
 80068a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80068a8:	e714      	b.n	80066d4 <__kernel_rem_pio2+0x2a4>
 80068aa:	ab0c      	add	r3, sp, #48	; 0x30
 80068ac:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80068b0:	3c01      	subs	r4, #1
 80068b2:	f7f9 fe13 	bl	80004dc <__aeabi_i2d>
 80068b6:	4632      	mov	r2, r6
 80068b8:	463b      	mov	r3, r7
 80068ba:	f7f9 fe79 	bl	80005b0 <__aeabi_dmul>
 80068be:	4642      	mov	r2, r8
 80068c0:	464b      	mov	r3, r9
 80068c2:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80068c6:	4630      	mov	r0, r6
 80068c8:	4639      	mov	r1, r7
 80068ca:	f7f9 fe71 	bl	80005b0 <__aeabi_dmul>
 80068ce:	4606      	mov	r6, r0
 80068d0:	460f      	mov	r7, r1
 80068d2:	e711      	b.n	80066f8 <__kernel_rem_pio2+0x2c8>
 80068d4:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80068d8:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80068dc:	f7f9 fe68 	bl	80005b0 <__aeabi_dmul>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4648      	mov	r0, r9
 80068e6:	4651      	mov	r1, sl
 80068e8:	3701      	adds	r7, #1
 80068ea:	f7f9 fcab 	bl	8000244 <__adddf3>
 80068ee:	4681      	mov	r9, r0
 80068f0:	468a      	mov	sl, r1
 80068f2:	9b00      	ldr	r3, [sp, #0]
 80068f4:	429f      	cmp	r7, r3
 80068f6:	dc02      	bgt.n	80068fe <__kernel_rem_pio2+0x4ce>
 80068f8:	9b06      	ldr	r3, [sp, #24]
 80068fa:	429f      	cmp	r7, r3
 80068fc:	ddea      	ble.n	80068d4 <__kernel_rem_pio2+0x4a4>
 80068fe:	ab48      	add	r3, sp, #288	; 0x120
 8006900:	9a06      	ldr	r2, [sp, #24]
 8006902:	3c01      	subs	r4, #1
 8006904:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006908:	e9c6 9a00 	strd	r9, sl, [r6]
 800690c:	e6f8      	b.n	8006700 <__kernel_rem_pio2+0x2d0>
 800690e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006910:	2b02      	cmp	r3, #2
 8006912:	dc0b      	bgt.n	800692c <__kernel_rem_pio2+0x4fc>
 8006914:	2b00      	cmp	r3, #0
 8006916:	dc39      	bgt.n	800698c <__kernel_rem_pio2+0x55c>
 8006918:	d05d      	beq.n	80069d6 <__kernel_rem_pio2+0x5a6>
 800691a:	9b02      	ldr	r3, [sp, #8]
 800691c:	f003 0007 	and.w	r0, r3, #7
 8006920:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006924:	ecbd 8b02 	vpop	{d8}
 8006928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692c:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800692e:	2b03      	cmp	r3, #3
 8006930:	d1f3      	bne.n	800691a <__kernel_rem_pio2+0x4ea>
 8006932:	9b05      	ldr	r3, [sp, #20]
 8006934:	9500      	str	r5, [sp, #0]
 8006936:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800693a:	eb0d 0403 	add.w	r4, sp, r3
 800693e:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8006942:	46a2      	mov	sl, r4
 8006944:	9b00      	ldr	r3, [sp, #0]
 8006946:	f1aa 0a08 	sub.w	sl, sl, #8
 800694a:	2b00      	cmp	r3, #0
 800694c:	dc69      	bgt.n	8006a22 <__kernel_rem_pio2+0x5f2>
 800694e:	46aa      	mov	sl, r5
 8006950:	f1ba 0f01 	cmp.w	sl, #1
 8006954:	f1a4 0408 	sub.w	r4, r4, #8
 8006958:	f300 8083 	bgt.w	8006a62 <__kernel_rem_pio2+0x632>
 800695c:	9c05      	ldr	r4, [sp, #20]
 800695e:	ab48      	add	r3, sp, #288	; 0x120
 8006960:	2000      	movs	r0, #0
 8006962:	2100      	movs	r1, #0
 8006964:	441c      	add	r4, r3
 8006966:	2d01      	cmp	r5, #1
 8006968:	f300 809a 	bgt.w	8006aa0 <__kernel_rem_pio2+0x670>
 800696c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8006970:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8006974:	f1bb 0f00 	cmp.w	fp, #0
 8006978:	f040 8098 	bne.w	8006aac <__kernel_rem_pio2+0x67c>
 800697c:	9b04      	ldr	r3, [sp, #16]
 800697e:	e9c3 7800 	strd	r7, r8, [r3]
 8006982:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006986:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800698a:	e7c6      	b.n	800691a <__kernel_rem_pio2+0x4ea>
 800698c:	9e05      	ldr	r6, [sp, #20]
 800698e:	ab48      	add	r3, sp, #288	; 0x120
 8006990:	462c      	mov	r4, r5
 8006992:	2000      	movs	r0, #0
 8006994:	441e      	add	r6, r3
 8006996:	2100      	movs	r1, #0
 8006998:	2c00      	cmp	r4, #0
 800699a:	da33      	bge.n	8006a04 <__kernel_rem_pio2+0x5d4>
 800699c:	f1bb 0f00 	cmp.w	fp, #0
 80069a0:	d036      	beq.n	8006a10 <__kernel_rem_pio2+0x5e0>
 80069a2:	4602      	mov	r2, r0
 80069a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069a8:	9c04      	ldr	r4, [sp, #16]
 80069aa:	ae4a      	add	r6, sp, #296	; 0x128
 80069ac:	e9c4 2300 	strd	r2, r3, [r4]
 80069b0:	2401      	movs	r4, #1
 80069b2:	4602      	mov	r2, r0
 80069b4:	460b      	mov	r3, r1
 80069b6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80069ba:	f7f9 fc41 	bl	8000240 <__aeabi_dsub>
 80069be:	42a5      	cmp	r5, r4
 80069c0:	da29      	bge.n	8006a16 <__kernel_rem_pio2+0x5e6>
 80069c2:	f1bb 0f00 	cmp.w	fp, #0
 80069c6:	d002      	beq.n	80069ce <__kernel_rem_pio2+0x59e>
 80069c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069cc:	4619      	mov	r1, r3
 80069ce:	9b04      	ldr	r3, [sp, #16]
 80069d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80069d4:	e7a1      	b.n	800691a <__kernel_rem_pio2+0x4ea>
 80069d6:	9c05      	ldr	r4, [sp, #20]
 80069d8:	ab48      	add	r3, sp, #288	; 0x120
 80069da:	2000      	movs	r0, #0
 80069dc:	2100      	movs	r1, #0
 80069de:	441c      	add	r4, r3
 80069e0:	2d00      	cmp	r5, #0
 80069e2:	da09      	bge.n	80069f8 <__kernel_rem_pio2+0x5c8>
 80069e4:	f1bb 0f00 	cmp.w	fp, #0
 80069e8:	d002      	beq.n	80069f0 <__kernel_rem_pio2+0x5c0>
 80069ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80069ee:	4619      	mov	r1, r3
 80069f0:	9b04      	ldr	r3, [sp, #16]
 80069f2:	e9c3 0100 	strd	r0, r1, [r3]
 80069f6:	e790      	b.n	800691a <__kernel_rem_pio2+0x4ea>
 80069f8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80069fc:	3d01      	subs	r5, #1
 80069fe:	f7f9 fc21 	bl	8000244 <__adddf3>
 8006a02:	e7ed      	b.n	80069e0 <__kernel_rem_pio2+0x5b0>
 8006a04:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006a08:	3c01      	subs	r4, #1
 8006a0a:	f7f9 fc1b 	bl	8000244 <__adddf3>
 8006a0e:	e7c3      	b.n	8006998 <__kernel_rem_pio2+0x568>
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	e7c8      	b.n	80069a8 <__kernel_rem_pio2+0x578>
 8006a16:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006a1a:	3401      	adds	r4, #1
 8006a1c:	f7f9 fc12 	bl	8000244 <__adddf3>
 8006a20:	e7cd      	b.n	80069be <__kernel_rem_pio2+0x58e>
 8006a22:	9b00      	ldr	r3, [sp, #0]
 8006a24:	e9da 8900 	ldrd	r8, r9, [sl]
 8006a28:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	4640      	mov	r0, r8
 8006a30:	4632      	mov	r2, r6
 8006a32:	4649      	mov	r1, r9
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	463b      	mov	r3, r7
 8006a38:	f7f9 fc04 	bl	8000244 <__adddf3>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006a44:	4640      	mov	r0, r8
 8006a46:	4649      	mov	r1, r9
 8006a48:	f7f9 fbfa 	bl	8000240 <__aeabi_dsub>
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	463b      	mov	r3, r7
 8006a50:	f7f9 fbf8 	bl	8000244 <__adddf3>
 8006a54:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006a58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006a5c:	ed8a 7b00 	vstr	d7, [sl]
 8006a60:	e770      	b.n	8006944 <__kernel_rem_pio2+0x514>
 8006a62:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006a66:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	4649      	mov	r1, r9
 8006a6e:	4632      	mov	r2, r6
 8006a70:	463b      	mov	r3, r7
 8006a72:	f7f9 fbe7 	bl	8000244 <__adddf3>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a7e:	e9cd 0100 	strd	r0, r1, [sp]
 8006a82:	4640      	mov	r0, r8
 8006a84:	4649      	mov	r1, r9
 8006a86:	f7f9 fbdb 	bl	8000240 <__aeabi_dsub>
 8006a8a:	4632      	mov	r2, r6
 8006a8c:	463b      	mov	r3, r7
 8006a8e:	f7f9 fbd9 	bl	8000244 <__adddf3>
 8006a92:	ed9d 7b00 	vldr	d7, [sp]
 8006a96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a9a:	ed84 7b00 	vstr	d7, [r4]
 8006a9e:	e757      	b.n	8006950 <__kernel_rem_pio2+0x520>
 8006aa0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006aa4:	3d01      	subs	r5, #1
 8006aa6:	f7f9 fbcd 	bl	8000244 <__adddf3>
 8006aaa:	e75c      	b.n	8006966 <__kernel_rem_pio2+0x536>
 8006aac:	9b04      	ldr	r3, [sp, #16]
 8006aae:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006ab2:	9a04      	ldr	r2, [sp, #16]
 8006ab4:	601f      	str	r7, [r3, #0]
 8006ab6:	605c      	str	r4, [r3, #4]
 8006ab8:	609d      	str	r5, [r3, #8]
 8006aba:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006abe:	6110      	str	r0, [r2, #16]
 8006ac0:	60d3      	str	r3, [r2, #12]
 8006ac2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ac6:	6153      	str	r3, [r2, #20]
 8006ac8:	e727      	b.n	800691a <__kernel_rem_pio2+0x4ea>
 8006aca:	bf00      	nop
 8006acc:	41700000 	.word	0x41700000
 8006ad0:	3e700000 	.word	0x3e700000
 8006ad4:	00000000 	.word	0x00000000

08006ad8 <scalbn>:
 8006ad8:	b570      	push	{r4, r5, r6, lr}
 8006ada:	ec55 4b10 	vmov	r4, r5, d0
 8006ade:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	462b      	mov	r3, r5
 8006ae6:	b999      	cbnz	r1, 8006b10 <scalbn+0x38>
 8006ae8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006aec:	4323      	orrs	r3, r4
 8006aee:	d03f      	beq.n	8006b70 <scalbn+0x98>
 8006af0:	4b35      	ldr	r3, [pc, #212]	; (8006bc8 <scalbn+0xf0>)
 8006af2:	4629      	mov	r1, r5
 8006af4:	2200      	movs	r2, #0
 8006af6:	ee10 0a10 	vmov	r0, s0
 8006afa:	f7f9 fd59 	bl	80005b0 <__aeabi_dmul>
 8006afe:	4b33      	ldr	r3, [pc, #204]	; (8006bcc <scalbn+0xf4>)
 8006b00:	4604      	mov	r4, r0
 8006b02:	460d      	mov	r5, r1
 8006b04:	429e      	cmp	r6, r3
 8006b06:	da10      	bge.n	8006b2a <scalbn+0x52>
 8006b08:	a327      	add	r3, pc, #156	; (adr r3, 8006ba8 <scalbn+0xd0>)
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	e01f      	b.n	8006b50 <scalbn+0x78>
 8006b10:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006b14:	4291      	cmp	r1, r2
 8006b16:	d10c      	bne.n	8006b32 <scalbn+0x5a>
 8006b18:	ee10 2a10 	vmov	r2, s0
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	4629      	mov	r1, r5
 8006b20:	f7f9 fb90 	bl	8000244 <__adddf3>
 8006b24:	4604      	mov	r4, r0
 8006b26:	460d      	mov	r5, r1
 8006b28:	e022      	b.n	8006b70 <scalbn+0x98>
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006b30:	3936      	subs	r1, #54	; 0x36
 8006b32:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006b36:	4296      	cmp	r6, r2
 8006b38:	dd0d      	ble.n	8006b56 <scalbn+0x7e>
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	a11c      	add	r1, pc, #112	; (adr r1, 8006bb0 <scalbn+0xd8>)
 8006b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b42:	da02      	bge.n	8006b4a <scalbn+0x72>
 8006b44:	a11c      	add	r1, pc, #112	; (adr r1, 8006bb8 <scalbn+0xe0>)
 8006b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b4a:	a319      	add	r3, pc, #100	; (adr r3, 8006bb0 <scalbn+0xd8>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	f7f9 fd2e 	bl	80005b0 <__aeabi_dmul>
 8006b54:	e7e6      	b.n	8006b24 <scalbn+0x4c>
 8006b56:	1872      	adds	r2, r6, r1
 8006b58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006b5c:	428a      	cmp	r2, r1
 8006b5e:	dcec      	bgt.n	8006b3a <scalbn+0x62>
 8006b60:	2a00      	cmp	r2, #0
 8006b62:	dd08      	ble.n	8006b76 <scalbn+0x9e>
 8006b64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006b70:	ec45 4b10 	vmov	d0, r4, r5
 8006b74:	bd70      	pop	{r4, r5, r6, pc}
 8006b76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006b7a:	da08      	bge.n	8006b8e <scalbn+0xb6>
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	a10a      	add	r1, pc, #40	; (adr r1, 8006ba8 <scalbn+0xd0>)
 8006b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b84:	dac0      	bge.n	8006b08 <scalbn+0x30>
 8006b86:	a10e      	add	r1, pc, #56	; (adr r1, 8006bc0 <scalbn+0xe8>)
 8006b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b8c:	e7bc      	b.n	8006b08 <scalbn+0x30>
 8006b8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b92:	3236      	adds	r2, #54	; 0x36
 8006b94:	4620      	mov	r0, r4
 8006b96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b9a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <scalbn+0xf8>)
 8006ba2:	e7d5      	b.n	8006b50 <scalbn+0x78>
 8006ba4:	f3af 8000 	nop.w
 8006ba8:	c2f8f359 	.word	0xc2f8f359
 8006bac:	01a56e1f 	.word	0x01a56e1f
 8006bb0:	8800759c 	.word	0x8800759c
 8006bb4:	7e37e43c 	.word	0x7e37e43c
 8006bb8:	8800759c 	.word	0x8800759c
 8006bbc:	fe37e43c 	.word	0xfe37e43c
 8006bc0:	c2f8f359 	.word	0xc2f8f359
 8006bc4:	81a56e1f 	.word	0x81a56e1f
 8006bc8:	43500000 	.word	0x43500000
 8006bcc:	ffff3cb0 	.word	0xffff3cb0
 8006bd0:	3c900000 	.word	0x3c900000
 8006bd4:	00000000 	.word	0x00000000

08006bd8 <floor>:
 8006bd8:	ec51 0b10 	vmov	r0, r1, d0
 8006bdc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006be8:	460c      	mov	r4, r1
 8006bea:	ee10 5a10 	vmov	r5, s0
 8006bee:	ee10 8a10 	vmov	r8, s0
 8006bf2:	2e13      	cmp	r6, #19
 8006bf4:	dc32      	bgt.n	8006c5c <floor+0x84>
 8006bf6:	2e00      	cmp	r6, #0
 8006bf8:	da14      	bge.n	8006c24 <floor+0x4c>
 8006bfa:	a333      	add	r3, pc, #204	; (adr r3, 8006cc8 <floor+0xf0>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7f9 fb20 	bl	8000244 <__adddf3>
 8006c04:	2200      	movs	r2, #0
 8006c06:	2300      	movs	r3, #0
 8006c08:	f7f9 ff62 	bl	8000ad0 <__aeabi_dcmpgt>
 8006c0c:	b138      	cbz	r0, 8006c1e <floor+0x46>
 8006c0e:	2c00      	cmp	r4, #0
 8006c10:	da54      	bge.n	8006cbc <floor+0xe4>
 8006c12:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006c16:	4325      	orrs	r5, r4
 8006c18:	d053      	beq.n	8006cc2 <floor+0xea>
 8006c1a:	2500      	movs	r5, #0
 8006c1c:	4c2c      	ldr	r4, [pc, #176]	; (8006cd0 <floor+0xf8>)
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4628      	mov	r0, r5
 8006c22:	e025      	b.n	8006c70 <floor+0x98>
 8006c24:	4f2b      	ldr	r7, [pc, #172]	; (8006cd4 <floor+0xfc>)
 8006c26:	4137      	asrs	r7, r6
 8006c28:	ea01 0307 	and.w	r3, r1, r7
 8006c2c:	4303      	orrs	r3, r0
 8006c2e:	d01f      	beq.n	8006c70 <floor+0x98>
 8006c30:	a325      	add	r3, pc, #148	; (adr r3, 8006cc8 <floor+0xf0>)
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f7f9 fb05 	bl	8000244 <__adddf3>
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f7f9 ff47 	bl	8000ad0 <__aeabi_dcmpgt>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d0eb      	beq.n	8006c1e <floor+0x46>
 8006c46:	2c00      	cmp	r4, #0
 8006c48:	f04f 0500 	mov.w	r5, #0
 8006c4c:	bfbe      	ittt	lt
 8006c4e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006c52:	4133      	asrlt	r3, r6
 8006c54:	18e4      	addlt	r4, r4, r3
 8006c56:	ea24 0407 	bic.w	r4, r4, r7
 8006c5a:	e7e0      	b.n	8006c1e <floor+0x46>
 8006c5c:	2e33      	cmp	r6, #51	; 0x33
 8006c5e:	dd0b      	ble.n	8006c78 <floor+0xa0>
 8006c60:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006c64:	d104      	bne.n	8006c70 <floor+0x98>
 8006c66:	ee10 2a10 	vmov	r2, s0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	f7f9 faea 	bl	8000244 <__adddf3>
 8006c70:	ec41 0b10 	vmov	d0, r0, r1
 8006c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c78:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8006c7c:	f04f 37ff 	mov.w	r7, #4294967295
 8006c80:	40df      	lsrs	r7, r3
 8006c82:	4238      	tst	r0, r7
 8006c84:	d0f4      	beq.n	8006c70 <floor+0x98>
 8006c86:	a310      	add	r3, pc, #64	; (adr r3, 8006cc8 <floor+0xf0>)
 8006c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8c:	f7f9 fada 	bl	8000244 <__adddf3>
 8006c90:	2200      	movs	r2, #0
 8006c92:	2300      	movs	r3, #0
 8006c94:	f7f9 ff1c 	bl	8000ad0 <__aeabi_dcmpgt>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	d0c0      	beq.n	8006c1e <floor+0x46>
 8006c9c:	2c00      	cmp	r4, #0
 8006c9e:	da0a      	bge.n	8006cb6 <floor+0xde>
 8006ca0:	2e14      	cmp	r6, #20
 8006ca2:	d101      	bne.n	8006ca8 <floor+0xd0>
 8006ca4:	3401      	adds	r4, #1
 8006ca6:	e006      	b.n	8006cb6 <floor+0xde>
 8006ca8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006cac:	2301      	movs	r3, #1
 8006cae:	40b3      	lsls	r3, r6
 8006cb0:	441d      	add	r5, r3
 8006cb2:	45a8      	cmp	r8, r5
 8006cb4:	d8f6      	bhi.n	8006ca4 <floor+0xcc>
 8006cb6:	ea25 0507 	bic.w	r5, r5, r7
 8006cba:	e7b0      	b.n	8006c1e <floor+0x46>
 8006cbc:	2500      	movs	r5, #0
 8006cbe:	462c      	mov	r4, r5
 8006cc0:	e7ad      	b.n	8006c1e <floor+0x46>
 8006cc2:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006cc6:	e7aa      	b.n	8006c1e <floor+0x46>
 8006cc8:	8800759c 	.word	0x8800759c
 8006ccc:	7e37e43c 	.word	0x7e37e43c
 8006cd0:	bff00000 	.word	0xbff00000
 8006cd4:	000fffff 	.word	0x000fffff

08006cd8 <_init>:
 8006cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cda:	bf00      	nop
 8006cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cde:	bc08      	pop	{r3}
 8006ce0:	469e      	mov	lr, r3
 8006ce2:	4770      	bx	lr

08006ce4 <_fini>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	bf00      	nop
 8006ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cea:	bc08      	pop	{r3}
 8006cec:	469e      	mov	lr, r3
 8006cee:	4770      	bx	lr
