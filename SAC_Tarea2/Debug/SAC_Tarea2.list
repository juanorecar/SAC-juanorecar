
SAC_Tarea2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c48  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001e3c  08001e3c  00011e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e8c  08001e8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e8c  08001e8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e8c  08001e8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e8c  08001e8c  00011e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e90  08001e90  00011e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001ea0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001ea0  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   000057da  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000126d  00000000  00000000  0002585f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000638  00000000  00000000  00026ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000048e  00000000  00000000  00027108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002602a  00000000  00000000  00027596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006621  00000000  00000000  0004d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f2dc0  00000000  00000000  00053be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001764  00000000  00000000  001469a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00148108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08001e24 	.word	0x08001e24

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08001e24 	.word	0x08001e24

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fa5b 	bl	80006f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f846 	bl	80002cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f88a 	bl	8000358 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(estadosLed)
 8000244:	4b1e      	ldr	r3, [pc, #120]	; (80002c0 <main+0x8c>)
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	2b03      	cmp	r3, #3
 800024a:	d8fb      	bhi.n	8000244 <main+0x10>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <main+0x20>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	08000265 	.word	0x08000265
 8000258:	0800027b 	.word	0x0800027b
 800025c:	08000291 	.word	0x08000291
 8000260:	080002a7 	.word	0x080002a7
	  	  {
	  	  case 0:
	  		  HAL_GPIO_WritePin(Led1_GPIO_Port,Led1_Pin, RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2180      	movs	r1, #128	; 0x80
 8000268:	4816      	ldr	r0, [pc, #88]	; (80002c4 <main+0x90>)
 800026a:	f000 fd49 	bl	8000d00 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(Led2_GPIO_Port,Led2_Pin,SET);
 800026e:	2201      	movs	r2, #1
 8000270:	2180      	movs	r1, #128	; 0x80
 8000272:	4815      	ldr	r0, [pc, #84]	; (80002c8 <main+0x94>)
 8000274:	f000 fd44 	bl	8000d00 <HAL_GPIO_WritePin>
	  		  break;
 8000278:	e021      	b.n	80002be <main+0x8a>
	  	  case 1:
	  		  HAL_GPIO_WritePin(Led1_GPIO_Port,Led1_Pin,SET);
 800027a:	2201      	movs	r2, #1
 800027c:	2180      	movs	r1, #128	; 0x80
 800027e:	4811      	ldr	r0, [pc, #68]	; (80002c4 <main+0x90>)
 8000280:	f000 fd3e 	bl	8000d00 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(Led2_GPIO_Port,Led2_Pin,RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	2180      	movs	r1, #128	; 0x80
 8000288:	480f      	ldr	r0, [pc, #60]	; (80002c8 <main+0x94>)
 800028a:	f000 fd39 	bl	8000d00 <HAL_GPIO_WritePin>
	  		break;
 800028e:	e016      	b.n	80002be <main+0x8a>
	  	  case 2:
	  		  HAL_GPIO_WritePin(Led1_GPIO_Port,Led1_Pin,SET);
 8000290:	2201      	movs	r2, #1
 8000292:	2180      	movs	r1, #128	; 0x80
 8000294:	480b      	ldr	r0, [pc, #44]	; (80002c4 <main+0x90>)
 8000296:	f000 fd33 	bl	8000d00 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(Led2_GPIO_Port,Led2_Pin,SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2180      	movs	r1, #128	; 0x80
 800029e:	480a      	ldr	r0, [pc, #40]	; (80002c8 <main+0x94>)
 80002a0:	f000 fd2e 	bl	8000d00 <HAL_GPIO_WritePin>
	  		break;
 80002a4:	e00b      	b.n	80002be <main+0x8a>
	  	  case 3:
	  		  HAL_GPIO_WritePin(Led1_GPIO_Port,Led1_Pin,RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	2180      	movs	r1, #128	; 0x80
 80002aa:	4806      	ldr	r0, [pc, #24]	; (80002c4 <main+0x90>)
 80002ac:	f000 fd28 	bl	8000d00 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(Led2_GPIO_Port,Led2_Pin,RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2180      	movs	r1, #128	; 0x80
 80002b4:	4804      	ldr	r0, [pc, #16]	; (80002c8 <main+0x94>)
 80002b6:	f000 fd23 	bl	8000d00 <HAL_GPIO_WritePin>
	  		break;
 80002ba:	bf00      	nop
 80002bc:	e7c2      	b.n	8000244 <main+0x10>
	  switch(estadosLed)
 80002be:	e7c1      	b.n	8000244 <main+0x10>
 80002c0:	20000028 	.word	0x20000028
 80002c4:	42020800 	.word	0x42020800
 80002c8:	42020400 	.word	0x42020400

080002cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b098      	sub	sp, #96	; 0x60
 80002d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	2248      	movs	r2, #72	; 0x48
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 fd76 	bl	8001dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80002ee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80002f2:	f000 fd5d 	bl	8000db0 <HAL_PWREx_ControlVoltageScaling>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002fc:	f000 f8b6 	bl	800046c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000300:	2310      	movs	r3, #16
 8000302:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000308:	2300      	movs	r3, #0
 800030a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800030c:	2360      	movs	r3, #96	; 0x60
 800030e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000310:	2300      	movs	r3, #0
 8000312:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000314:	f107 0318 	add.w	r3, r7, #24
 8000318:	4618      	mov	r0, r3
 800031a:	f000 fdc9 	bl	8000eb0 <HAL_RCC_OscConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000324:	f000 f8a2 	bl	800046c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800032c:	2300      	movs	r3, #0
 800032e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f001 fa8b 	bl	800185c <HAL_RCC_ClockConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800034c:	f000 f88e 	bl	800046c <Error_Handler>
  }
}
 8000350:	bf00      	nop
 8000352:	3760      	adds	r7, #96	; 0x60
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035e:	f107 030c 	add.w	r3, r7, #12
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
 800036a:	60da      	str	r2, [r3, #12]
 800036c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036e:	4b2c      	ldr	r3, [pc, #176]	; (8000420 <MX_GPIO_Init+0xc8>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000372:	4a2b      	ldr	r2, [pc, #172]	; (8000420 <MX_GPIO_Init+0xc8>)
 8000374:	f043 0304 	orr.w	r3, r3, #4
 8000378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800037a:	4b29      	ldr	r3, [pc, #164]	; (8000420 <MX_GPIO_Init+0xc8>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037e:	f003 0304 	and.w	r3, r3, #4
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000386:	4b26      	ldr	r3, [pc, #152]	; (8000420 <MX_GPIO_Init+0xc8>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800038a:	4a25      	ldr	r2, [pc, #148]	; (8000420 <MX_GPIO_Init+0xc8>)
 800038c:	f043 0302 	orr.w	r3, r3, #2
 8000390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000392:	4b23      	ldr	r3, [pc, #140]	; (8000420 <MX_GPIO_Init+0xc8>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	f003 0302 	and.w	r3, r3, #2
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2180      	movs	r1, #128	; 0x80
 80003a2:	4820      	ldr	r0, [pc, #128]	; (8000424 <MX_GPIO_Init+0xcc>)
 80003a4:	f000 fcac 	bl	8000d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led2_GPIO_Port, Led2_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2180      	movs	r1, #128	; 0x80
 80003ac:	481e      	ldr	r0, [pc, #120]	; (8000428 <MX_GPIO_Init+0xd0>)
 80003ae:	f000 fca7 	bl	8000d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Boton1_Pin */
  GPIO_InitStruct.Pin = Boton1_Pin;
 80003b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003b8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Boton1_GPIO_Port, &GPIO_InitStruct);
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	4619      	mov	r1, r3
 80003c8:	4816      	ldr	r0, [pc, #88]	; (8000424 <MX_GPIO_Init+0xcc>)
 80003ca:	f000 fb19 	bl	8000a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led1_Pin */
  GPIO_InitStruct.Pin = Led1_Pin;
 80003ce:	2380      	movs	r3, #128	; 0x80
 80003d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	2300      	movs	r3, #0
 80003dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Led1_GPIO_Port, &GPIO_InitStruct);
 80003de:	f107 030c 	add.w	r3, r7, #12
 80003e2:	4619      	mov	r1, r3
 80003e4:	480f      	ldr	r0, [pc, #60]	; (8000424 <MX_GPIO_Init+0xcc>)
 80003e6:	f000 fb0b 	bl	8000a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led2_Pin */
  GPIO_InitStruct.Pin = Led2_Pin;
 80003ea:	2380      	movs	r3, #128	; 0x80
 80003ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ee:	2301      	movs	r3, #1
 80003f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Led2_GPIO_Port, &GPIO_InitStruct);
 80003fa:	f107 030c 	add.w	r3, r7, #12
 80003fe:	4619      	mov	r1, r3
 8000400:	4809      	ldr	r0, [pc, #36]	; (8000428 <MX_GPIO_Init+0xd0>)
 8000402:	f000 fafd 	bl	8000a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000406:	2200      	movs	r2, #0
 8000408:	2100      	movs	r1, #0
 800040a:	2018      	movs	r0, #24
 800040c:	f000 fac3 	bl	8000996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000410:	2018      	movs	r0, #24
 8000412:	f000 fada 	bl	80009ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	42020800 	.word	0x42020800
 8000428:	42020400 	.word	0x42020400

0800042c <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Boton1_Pin){
 8000436:	88fb      	ldrh	r3, [r7, #6]
 8000438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800043c:	d10d      	bne.n	800045a <HAL_GPIO_EXTI_Falling_Callback+0x2e>
		if(estadosLed == 3)
 800043e:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 8000440:	881b      	ldrh	r3, [r3, #0]
 8000442:	2b03      	cmp	r3, #3
 8000444:	d103      	bne.n	800044e <HAL_GPIO_EXTI_Falling_Callback+0x22>
				{
					estadosLed = 0;
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 8000448:	2200      	movs	r2, #0
 800044a:	801a      	strh	r2, [r3, #0]
				}else{
					estadosLed ++;
				}
	}
}
 800044c:	e005      	b.n	800045a <HAL_GPIO_EXTI_Falling_Callback+0x2e>
					estadosLed ++;
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 8000450:	881b      	ldrh	r3, [r3, #0]
 8000452:	3301      	adds	r3, #1
 8000454:	b29a      	uxth	r2, r3
 8000456:	4b04      	ldr	r3, [pc, #16]	; (8000468 <HAL_GPIO_EXTI_Falling_Callback+0x3c>)
 8000458:	801a      	strh	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	20000028 	.word	0x20000028

0800046c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000470:	b672      	cpsid	i
}
 8000472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000474:	e7fe      	b.n	8000474 <Error_Handler+0x8>
	...

08000478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <HAL_MspInit+0x44>)
 8000480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000482:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <HAL_MspInit+0x44>)
 8000484:	f043 0301 	orr.w	r3, r3, #1
 8000488:	6613      	str	r3, [r2, #96]	; 0x60
 800048a:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_MspInit+0x44>)
 800048c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800048e:	f003 0301 	and.w	r3, r3, #1
 8000492:	607b      	str	r3, [r7, #4]
 8000494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000496:	4b09      	ldr	r3, [pc, #36]	; (80004bc <HAL_MspInit+0x44>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800049a:	4a08      	ldr	r2, [pc, #32]	; (80004bc <HAL_MspInit+0x44>)
 800049c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004a0:	6593      	str	r3, [r2, #88]	; 0x58
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <HAL_MspInit+0x44>)
 80004a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004aa:	603b      	str	r3, [r7, #0]
 80004ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004c4:	e7fe      	b.n	80004c4 <NMI_Handler+0x4>

080004c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <HardFault_Handler+0x4>

080004cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <MemManage_Handler+0x4>

080004d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <BusFault_Handler+0x4>

080004d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <UsageFault_Handler+0x4>

080004de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050c:	f000 f948 	bl	80007a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Boton1_Pin);
 8000518:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800051c:	f000 fc08 	bl	8000d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}

08000524 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <SystemInit+0x20>)
 800052a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800052e:	4a05      	ldr	r2, [pc, #20]	; (8000544 <SystemInit+0x20>)
 8000530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000548:	b480      	push	{r7}
 800054a:	b087      	sub	sp, #28
 800054c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800054e:	4b4f      	ldr	r3, [pc, #316]	; (800068c <SystemCoreClockUpdate+0x144>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f003 0308 	and.w	r3, r3, #8
 8000556:	2b00      	cmp	r3, #0
 8000558:	d107      	bne.n	800056a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800055a:	4b4c      	ldr	r3, [pc, #304]	; (800068c <SystemCoreClockUpdate+0x144>)
 800055c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000560:	0a1b      	lsrs	r3, r3, #8
 8000562:	f003 030f 	and.w	r3, r3, #15
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	e005      	b.n	8000576 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800056a:	4b48      	ldr	r3, [pc, #288]	; (800068c <SystemCoreClockUpdate+0x144>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	091b      	lsrs	r3, r3, #4
 8000570:	f003 030f 	and.w	r3, r3, #15
 8000574:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000576:	4a46      	ldr	r2, [pc, #280]	; (8000690 <SystemCoreClockUpdate+0x148>)
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000580:	4b42      	ldr	r3, [pc, #264]	; (800068c <SystemCoreClockUpdate+0x144>)
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	f003 030c 	and.w	r3, r3, #12
 8000588:	2b0c      	cmp	r3, #12
 800058a:	d866      	bhi.n	800065a <SystemCoreClockUpdate+0x112>
 800058c:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <SystemCoreClockUpdate+0x4c>)
 800058e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000592:	bf00      	nop
 8000594:	080005c9 	.word	0x080005c9
 8000598:	0800065b 	.word	0x0800065b
 800059c:	0800065b 	.word	0x0800065b
 80005a0:	0800065b 	.word	0x0800065b
 80005a4:	080005d1 	.word	0x080005d1
 80005a8:	0800065b 	.word	0x0800065b
 80005ac:	0800065b 	.word	0x0800065b
 80005b0:	0800065b 	.word	0x0800065b
 80005b4:	080005d9 	.word	0x080005d9
 80005b8:	0800065b 	.word	0x0800065b
 80005bc:	0800065b 	.word	0x0800065b
 80005c0:	0800065b 	.word	0x0800065b
 80005c4:	080005e1 	.word	0x080005e1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80005c8:	4a32      	ldr	r2, [pc, #200]	; (8000694 <SystemCoreClockUpdate+0x14c>)
 80005ca:	697b      	ldr	r3, [r7, #20]
 80005cc:	6013      	str	r3, [r2, #0]
      break;
 80005ce:	e048      	b.n	8000662 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80005d0:	4b30      	ldr	r3, [pc, #192]	; (8000694 <SystemCoreClockUpdate+0x14c>)
 80005d2:	4a31      	ldr	r2, [pc, #196]	; (8000698 <SystemCoreClockUpdate+0x150>)
 80005d4:	601a      	str	r2, [r3, #0]
      break;
 80005d6:	e044      	b.n	8000662 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80005d8:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <SystemCoreClockUpdate+0x14c>)
 80005da:	4a2f      	ldr	r2, [pc, #188]	; (8000698 <SystemCoreClockUpdate+0x150>)
 80005dc:	601a      	str	r2, [r3, #0]
      break;
 80005de:	e040      	b.n	8000662 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80005e0:	4b2a      	ldr	r3, [pc, #168]	; (800068c <SystemCoreClockUpdate+0x144>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	f003 0303 	and.w	r3, r3, #3
 80005e8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80005ea:	4b28      	ldr	r3, [pc, #160]	; (800068c <SystemCoreClockUpdate+0x144>)
 80005ec:	68db      	ldr	r3, [r3, #12]
 80005ee:	091b      	lsrs	r3, r3, #4
 80005f0:	f003 030f 	and.w	r3, r3, #15
 80005f4:	3301      	adds	r3, #1
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d003      	beq.n	8000606 <SystemCoreClockUpdate+0xbe>
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b03      	cmp	r3, #3
 8000602:	d006      	beq.n	8000612 <SystemCoreClockUpdate+0xca>
 8000604:	e00b      	b.n	800061e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000606:	4a24      	ldr	r2, [pc, #144]	; (8000698 <SystemCoreClockUpdate+0x150>)
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	613b      	str	r3, [r7, #16]
          break;
 8000610:	e00b      	b.n	800062a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000612:	4a21      	ldr	r2, [pc, #132]	; (8000698 <SystemCoreClockUpdate+0x150>)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	fbb2 f3f3 	udiv	r3, r2, r3
 800061a:	613b      	str	r3, [r7, #16]
          break;
 800061c:	e005      	b.n	800062a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	fbb2 f3f3 	udiv	r3, r2, r3
 8000626:	613b      	str	r3, [r7, #16]
          break;
 8000628:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <SystemCoreClockUpdate+0x144>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	0a1b      	lsrs	r3, r3, #8
 8000630:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	fb02 f303 	mul.w	r3, r2, r3
 800063a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <SystemCoreClockUpdate+0x144>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0e5b      	lsrs	r3, r3, #25
 8000642:	f003 0303 	and.w	r3, r3, #3
 8000646:	3301      	adds	r3, #1
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800064c:	693a      	ldr	r2, [r7, #16]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	fbb2 f3f3 	udiv	r3, r2, r3
 8000654:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <SystemCoreClockUpdate+0x14c>)
 8000656:	6013      	str	r3, [r2, #0]
      break;
 8000658:	e003      	b.n	8000662 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <SystemCoreClockUpdate+0x14c>)
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	6013      	str	r3, [r2, #0]
      break;
 8000660:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000662:	4b0a      	ldr	r3, [pc, #40]	; (800068c <SystemCoreClockUpdate+0x144>)
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	091b      	lsrs	r3, r3, #4
 8000668:	f003 030f 	and.w	r3, r3, #15
 800066c:	4a0b      	ldr	r2, [pc, #44]	; (800069c <SystemCoreClockUpdate+0x154>)
 800066e:	5cd3      	ldrb	r3, [r2, r3]
 8000670:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <SystemCoreClockUpdate+0x14c>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	fa22 f303 	lsr.w	r3, r2, r3
 800067c:	4a05      	ldr	r2, [pc, #20]	; (8000694 <SystemCoreClockUpdate+0x14c>)
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	371c      	adds	r7, #28
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	40021000 	.word	0x40021000
 8000690:	08001e4c 	.word	0x08001e4c
 8000694:	20000000 	.word	0x20000000
 8000698:	00f42400 	.word	0x00f42400
 800069c:	08001e3c 	.word	0x08001e3c

080006a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80006a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a4:	f7ff ff3e 	bl	8000524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006aa:	e003      	b.n	80006b4 <LoopCopyDataInit>

080006ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006ac:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006b2:	3104      	adds	r1, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006bc:	d3f6      	bcc.n	80006ac <CopyDataInit>
	ldr	r2, =_sbss
 80006be:	4a0a      	ldr	r2, [pc, #40]	; (80006e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006c0:	e002      	b.n	80006c8 <LoopFillZerobss>

080006c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006c4:	f842 3b04 	str.w	r3, [r2], #4

080006c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <LoopForever+0x16>)
	cmp	r2, r3
 80006ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006cc:	d3f9      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ce:	f001 fb85 	bl	8001ddc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006d2:	f7ff fdaf 	bl	8000234 <main>

080006d6 <LoopForever>:

LoopForever:
    b LoopForever
 80006d6:	e7fe      	b.n	80006d6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80006d8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80006dc:	08001e94 	.word	0x08001e94
	ldr	r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006e4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80006e8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80006ec:	20000030 	.word	0x20000030

080006f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006f0:	e7fe      	b.n	80006f0 <ADC1_2_IRQHandler>

080006f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b082      	sub	sp, #8
 80006f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006f8:	2300      	movs	r3, #0
 80006fa:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80006fc:	2004      	movs	r0, #4
 80006fe:	f000 f93f 	bl	8000980 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000702:	f7ff ff21 	bl	8000548 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000706:	2007      	movs	r0, #7
 8000708:	f000 f80e 	bl	8000728 <HAL_InitTick>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000712:	2301      	movs	r3, #1
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	e001      	b.n	800071c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000718:	f7ff feae 	bl	8000478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800071c:	79fb      	ldrb	r3, [r7, #7]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000730:	2300      	movs	r3, #0
 8000732:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <HAL_InitTick+0x6c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d023      	beq.n	8000784 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <HAL_InitTick+0x70>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_InitTick+0x6c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074a:	fbb3 f3f1 	udiv	r3, r3, r1
 800074e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f947 	bl	80009e6 <HAL_SYSTICK_Config>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d10f      	bne.n	800077e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b07      	cmp	r3, #7
 8000762:	d809      	bhi.n	8000778 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000764:	2200      	movs	r2, #0
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f000 f913 	bl	8000996 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000770:	4a0a      	ldr	r2, [pc, #40]	; (800079c <HAL_InitTick+0x74>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]
 8000776:	e007      	b.n	8000788 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000778:	2301      	movs	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	e004      	b.n	8000788 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	e001      	b.n	8000788 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000784:	2301      	movs	r3, #1
 8000786:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000788:	7bfb      	ldrb	r3, [r7, #15]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000008 	.word	0x20000008
 8000798:	20000000 	.word	0x20000000
 800079c:	20000004 	.word	0x20000004

080007a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_IncTick+0x20>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_IncTick+0x24>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_IncTick+0x24>)
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	20000008 	.word	0x20000008
 80007c4:	2000002c 	.word	0x2000002c

080007c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <HAL_GetTick+0x14>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	2000002c 	.word	0x2000002c

080007e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007fc:	4013      	ands	r3, r2
 80007fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800080c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000812:	4a04      	ldr	r2, [pc, #16]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	60d3      	str	r3, [r2, #12]
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <__NVIC_GetPriorityGrouping+0x18>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	0a1b      	lsrs	r3, r3, #8
 8000832:	f003 0307 	and.w	r3, r3, #7
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	2b00      	cmp	r3, #0
 8000854:	db0b      	blt.n	800086e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	f003 021f 	and.w	r2, r3, #31
 800085c:	4907      	ldr	r1, [pc, #28]	; (800087c <__NVIC_EnableIRQ+0x38>)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	095b      	lsrs	r3, r3, #5
 8000864:	2001      	movs	r0, #1
 8000866:	fa00 f202 	lsl.w	r2, r0, r2
 800086a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800086e:	bf00      	nop
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000e100 	.word	0xe000e100

08000880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	6039      	str	r1, [r7, #0]
 800088a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000890:	2b00      	cmp	r3, #0
 8000892:	db0a      	blt.n	80008aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	b2da      	uxtb	r2, r3
 8000898:	490c      	ldr	r1, [pc, #48]	; (80008cc <__NVIC_SetPriority+0x4c>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	0152      	lsls	r2, r2, #5
 80008a0:	b2d2      	uxtb	r2, r2
 80008a2:	440b      	add	r3, r1
 80008a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a8:	e00a      	b.n	80008c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	b2da      	uxtb	r2, r3
 80008ae:	4908      	ldr	r1, [pc, #32]	; (80008d0 <__NVIC_SetPriority+0x50>)
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	3b04      	subs	r3, #4
 80008b8:	0152      	lsls	r2, r2, #5
 80008ba:	b2d2      	uxtb	r2, r2
 80008bc:	440b      	add	r3, r1
 80008be:	761a      	strb	r2, [r3, #24]
}
 80008c0:	bf00      	nop
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000e100 	.word	0xe000e100
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b089      	sub	sp, #36	; 0x24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e8:	69fb      	ldr	r3, [r7, #28]
 80008ea:	f1c3 0307 	rsb	r3, r3, #7
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	bf28      	it	cs
 80008f2:	2303      	movcs	r3, #3
 80008f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	3303      	adds	r3, #3
 80008fa:	2b06      	cmp	r3, #6
 80008fc:	d902      	bls.n	8000904 <NVIC_EncodePriority+0x30>
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3b04      	subs	r3, #4
 8000902:	e000      	b.n	8000906 <NVIC_EncodePriority+0x32>
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000908:	f04f 32ff 	mov.w	r2, #4294967295
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43da      	mvns	r2, r3
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	401a      	ands	r2, r3
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800091c:	f04f 31ff 	mov.w	r1, #4294967295
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	43d9      	mvns	r1, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	4313      	orrs	r3, r2
         );
}
 800092e:	4618      	mov	r0, r3
 8000930:	3724      	adds	r7, #36	; 0x24
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
	...

0800093c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	3b01      	subs	r3, #1
 8000948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800094c:	d301      	bcc.n	8000952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800094e:	2301      	movs	r3, #1
 8000950:	e00f      	b.n	8000972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <SysTick_Config+0x40>)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800095a:	2107      	movs	r1, #7
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	f7ff ff8e 	bl	8000880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <SysTick_Config+0x40>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800096a:	4b04      	ldr	r3, [pc, #16]	; (800097c <SysTick_Config+0x40>)
 800096c:	2207      	movs	r2, #7
 800096e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	e000e010 	.word	0xe000e010

08000980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ff29 	bl	80007e0 <__NVIC_SetPriorityGrouping>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b086      	sub	sp, #24
 800099a:	af00      	add	r7, sp, #0
 800099c:	4603      	mov	r3, r0
 800099e:	60b9      	str	r1, [r7, #8]
 80009a0:	607a      	str	r2, [r7, #4]
 80009a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009a4:	f7ff ff40 	bl	8000828 <__NVIC_GetPriorityGrouping>
 80009a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	6978      	ldr	r0, [r7, #20]
 80009b0:	f7ff ff90 	bl	80008d4 <NVIC_EncodePriority>
 80009b4:	4602      	mov	r2, r0
 80009b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ff5f 	bl	8000880 <__NVIC_SetPriority>
}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff33 	bl	8000844 <__NVIC_EnableIRQ>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff ffa4 	bl	800093c <SysTick_Config>
 80009f4:	4603      	mov	r3, r0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a0e:	e158      	b.n	8000cc2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	2101      	movs	r1, #1
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f000 814a 	beq.w	8000cbc <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d005      	beq.n	8000a40 <HAL_GPIO_Init+0x40>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d130      	bne.n	8000aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a76:	2201      	movs	r2, #1
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	091b      	lsrs	r3, r3, #4
 8000a8c:	f003 0201 	and.w	r2, r3, #1
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 0303 	and.w	r3, r3, #3
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d017      	beq.n	8000ade <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	2203      	movs	r2, #3
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	43db      	mvns	r3, r3
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4013      	ands	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f003 0303 	and.w	r3, r3, #3
 8000ae6:	2b02      	cmp	r3, #2
 8000ae8:	d123      	bne.n	8000b32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	08da      	lsrs	r2, r3, #3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3208      	adds	r2, #8
 8000af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	220f      	movs	r2, #15
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	691a      	ldr	r2, [r3, #16]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	f003 0307 	and.w	r3, r3, #7
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	08da      	lsrs	r2, r3, #3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3208      	adds	r2, #8
 8000b2c:	6939      	ldr	r1, [r7, #16]
 8000b2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	2203      	movs	r2, #3
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 0203 	and.w	r2, r3, #3
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 80a4 	beq.w	8000cbc <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000b74:	4a5a      	ldr	r2, [pc, #360]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	089b      	lsrs	r3, r3, #2
 8000b7a:	3318      	adds	r3, #24
 8000b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	220f      	movs	r2, #15
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a52      	ldr	r2, [pc, #328]	; (8000ce4 <HAL_GPIO_Init+0x2e4>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d025      	beq.n	8000bec <HAL_GPIO_Init+0x1ec>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a51      	ldr	r2, [pc, #324]	; (8000ce8 <HAL_GPIO_Init+0x2e8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d01f      	beq.n	8000be8 <HAL_GPIO_Init+0x1e8>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a50      	ldr	r2, [pc, #320]	; (8000cec <HAL_GPIO_Init+0x2ec>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d019      	beq.n	8000be4 <HAL_GPIO_Init+0x1e4>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a4f      	ldr	r2, [pc, #316]	; (8000cf0 <HAL_GPIO_Init+0x2f0>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d013      	beq.n	8000be0 <HAL_GPIO_Init+0x1e0>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a4e      	ldr	r2, [pc, #312]	; (8000cf4 <HAL_GPIO_Init+0x2f4>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d00d      	beq.n	8000bdc <HAL_GPIO_Init+0x1dc>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a4d      	ldr	r2, [pc, #308]	; (8000cf8 <HAL_GPIO_Init+0x2f8>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d007      	beq.n	8000bd8 <HAL_GPIO_Init+0x1d8>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a4c      	ldr	r2, [pc, #304]	; (8000cfc <HAL_GPIO_Init+0x2fc>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d101      	bne.n	8000bd4 <HAL_GPIO_Init+0x1d4>
 8000bd0:	2306      	movs	r3, #6
 8000bd2:	e00c      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	e00a      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000bd8:	2305      	movs	r3, #5
 8000bda:	e008      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000bdc:	2304      	movs	r3, #4
 8000bde:	e006      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000be0:	2303      	movs	r3, #3
 8000be2:	e004      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000be4:	2302      	movs	r3, #2
 8000be6:	e002      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000be8:	2301      	movs	r3, #1
 8000bea:	e000      	b.n	8000bee <HAL_GPIO_Init+0x1ee>
 8000bec:	2300      	movs	r3, #0
 8000bee:	697a      	ldr	r2, [r7, #20]
 8000bf0:	f002 0203 	and.w	r2, r2, #3
 8000bf4:	00d2      	lsls	r2, r2, #3
 8000bf6:	4093      	lsls	r3, r2
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000bfe:	4938      	ldr	r1, [pc, #224]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	3318      	adds	r3, #24
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c0c:	4b34      	ldr	r3, [pc, #208]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c30:	4a2b      	ldr	r2, [pc, #172]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c36:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c5a:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c86:	4a16      	ldr	r2, [pc, #88]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d003      	beq.n	8000cb4 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_GPIO_Init+0x2e0>)
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f47f ae9f 	bne.w	8000a10 <HAL_GPIO_Init+0x10>
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	bf00      	nop
 8000cd6:	371c      	adds	r7, #28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	4002f400 	.word	0x4002f400
 8000ce4:	42020000 	.word	0x42020000
 8000ce8:	42020400 	.word	0x42020400
 8000cec:	42020800 	.word	0x42020800
 8000cf0:	42020c00 	.word	0x42020c00
 8000cf4:	42021000 	.word	0x42021000
 8000cf8:	42021400 	.word	0x42021400
 8000cfc:	42021800 	.word	0x42021800

08000d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d10:	787b      	ldrb	r3, [r7, #1]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d16:	887a      	ldrh	r2, [r7, #2]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d1c:	e002      	b.n	8000d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d1e:	887a      	ldrh	r2, [r7, #2]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000d3c:	68da      	ldr	r2, [r3, #12]
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	4013      	ands	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000d46:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f814 	bl	8000d7c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000d56:	691a      	ldr	r2, [r3, #16]
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d006      	beq.n	8000d6e <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000d60:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fb5f 	bl	800042c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	4002f400 	.word	0x4002f400

08000d7c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <HAL_PWREx_GetVoltageRange+0x18>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40007000 	.word	0x40007000

08000db0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dc0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8000dc2:	f000 f851 	bl	8000e68 <HAL_PWREx_SMPS_GetEffectiveMode>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dcc:	d101      	bne.n	8000dd2 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e03e      	b.n	8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dde:	d101      	bne.n	8000de4 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e035      	b.n	8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d101      	bne.n	8000df0 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e02f      	b.n	8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000df8:	4917      	ldr	r1, [pc, #92]	; (8000e58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	095b      	lsrs	r3, r3, #5
 8000e06:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8000e08:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0c:	09db      	lsrs	r3, r3, #7
 8000e0e:	2232      	movs	r2, #50	; 0x32
 8000e10:	fb02 f303 	mul.w	r3, r2, r3
 8000e14:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8000e16:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1a:	08db      	lsrs	r3, r3, #3
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e20:	e002      	b.n	8000e28 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e2a:	695b      	ldr	r3, [r3, #20]
 8000e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e34:	d102      	bne.n	8000e3c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1f2      	bne.n	8000e22 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e48:	d101      	bne.n	8000e4e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e000      	b.n	8000e50 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40007000 	.word	0x40007000
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	0a7c5ac5 	.word	0x0a7c5ac5
 8000e64:	cccccccd 	.word	0xcccccccd

08000e68 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8000e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	e00a      	b.n	8000e9c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d103      	bne.n	8000e98 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8000e90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	e001      	b.n	8000e9c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40007000 	.word	0x40007000

08000eb0 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d102      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	f000 bcc2 	b.w	8001848 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ec4:	4b99      	ldr	r3, [pc, #612]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ece:	4b97      	ldr	r3, [pc, #604]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 0310 	and.w	r3, r3, #16
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 80e9 	beq.w	80010b8 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d006      	beq.n	8000efa <HAL_RCC_OscConfig+0x4a>
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	2b0c      	cmp	r3, #12
 8000ef0:	f040 8083 	bne.w	8000ffa <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d17f      	bne.n	8000ffa <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000efa:	4b8c      	ldr	r3, [pc, #560]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <HAL_RCC_OscConfig+0x64>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	f000 bc9a 	b.w	8001848 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f18:	4b84      	ldr	r3, [pc, #528]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <HAL_RCC_OscConfig+0x7e>
 8000f24:	4b81      	ldr	r3, [pc, #516]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f2c:	e005      	b.n	8000f3a <HAL_RCC_OscConfig+0x8a>
 8000f2e:	4b7f      	ldr	r3, [pc, #508]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f34:	091b      	lsrs	r3, r3, #4
 8000f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d224      	bcs.n	8000f88 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fe72 	bl	8001c2c <RCC_SetFlashLatencyFromMSIRange>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d002      	beq.n	8000f54 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	f000 bc7a 	b.w	8001848 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f54:	4b75      	ldr	r3, [pc, #468]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a74      	ldr	r2, [pc, #464]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000f5a:	f043 0308 	orr.w	r3, r3, #8
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b72      	ldr	r3, [pc, #456]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	496f      	ldr	r1, [pc, #444]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f72:	4b6e      	ldr	r3, [pc, #440]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	496a      	ldr	r1, [pc, #424]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	604b      	str	r3, [r1, #4]
 8000f86:	e026      	b.n	8000fd6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f88:	4b68      	ldr	r3, [pc, #416]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a67      	ldr	r2, [pc, #412]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b65      	ldr	r3, [pc, #404]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	4962      	ldr	r1, [pc, #392]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fa6:	4b61      	ldr	r3, [pc, #388]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	021b      	lsls	r3, r3, #8
 8000fb4:	495d      	ldr	r1, [pc, #372]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10a      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fe31 	bl	8001c2c <RCC_SetFlashLatencyFromMSIRange>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d002      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f000 bc39 	b.w	8001848 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000fd6:	f000 fe15 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a54      	ldr	r2, [pc, #336]	; (8001130 <HAL_RCC_OscConfig+0x280>)
 8000fde:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fe0:	4b54      	ldr	r3, [pc, #336]	; (8001134 <HAL_RCC_OscConfig+0x284>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fb9f 	bl	8000728 <HAL_InitTick>
 8000fea:	4603      	mov	r3, r0
 8000fec:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d060      	beq.n	80010b6 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	f000 bc27 	b.w	8001848 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d039      	beq.n	8001076 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001002:	4b4a      	ldr	r3, [pc, #296]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a49      	ldr	r2, [pc, #292]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800100e:	f7ff fbdb 	bl	80007c8 <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001014:	e00f      	b.n	8001036 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001016:	f7ff fbd7 	bl	80007c8 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d908      	bls.n	8001036 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001024:	4b41      	ldr	r3, [pc, #260]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	f000 bc09 	b.w	8001848 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001036:	4b3d      	ldr	r3, [pc, #244]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0e9      	beq.n	8001016 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001042:	4b3a      	ldr	r3, [pc, #232]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a39      	ldr	r2, [pc, #228]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	4b37      	ldr	r3, [pc, #220]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	4934      	ldr	r1, [pc, #208]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 800105c:	4313      	orrs	r3, r2
 800105e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001060:	4b32      	ldr	r3, [pc, #200]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	492f      	ldr	r1, [pc, #188]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8001070:	4313      	orrs	r3, r2
 8001072:	604b      	str	r3, [r1, #4]
 8001074:	e020      	b.n	80010b8 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001076:	4b2d      	ldr	r3, [pc, #180]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a2c      	ldr	r2, [pc, #176]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001082:	f7ff fba1 	bl	80007c8 <HAL_GetTick>
 8001086:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001088:	e00e      	b.n	80010a8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800108a:	f7ff fb9d 	bl	80007c8 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d907      	bls.n	80010a8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e3cf      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80010a8:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1ea      	bne.n	800108a <HAL_RCC_OscConfig+0x1da>
 80010b4:	e000      	b.n	80010b8 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d07e      	beq.n	80011c2 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d005      	beq.n	80010d6 <HAL_RCC_OscConfig+0x226>
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	2b0c      	cmp	r3, #12
 80010ce:	d10e      	bne.n	80010ee <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d10b      	bne.n	80010ee <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d06e      	beq.n	80011c0 <HAL_RCC_OscConfig+0x310>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d16a      	bne.n	80011c0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e3ac      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010f6:	d106      	bne.n	8001106 <HAL_RCC_OscConfig+0x256>
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0b      	ldr	r2, [pc, #44]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 80010fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	e024      	b.n	8001150 <HAL_RCC_OscConfig+0x2a0>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800110e:	d113      	bne.n	8001138 <HAL_RCC_OscConfig+0x288>
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a05      	ldr	r2, [pc, #20]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8001116:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a02      	ldr	r2, [pc, #8]	; (800112c <HAL_RCC_OscConfig+0x27c>)
 8001122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	e012      	b.n	8001150 <HAL_RCC_OscConfig+0x2a0>
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	20000000 	.word	0x20000000
 8001134:	20000004 	.word	0x20000004
 8001138:	4b8b      	ldr	r3, [pc, #556]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a8a      	ldr	r2, [pc, #552]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 800113e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b88      	ldr	r3, [pc, #544]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a87      	ldr	r2, [pc, #540]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d019      	beq.n	800118c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001158:	f7ff fb36 	bl	80007c8 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800115e:	e00e      	b.n	800117e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001160:	f7ff fb32 	bl	80007c8 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b64      	cmp	r3, #100	; 0x64
 800116c:	d907      	bls.n	800117e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800116e:	4b7e      	ldr	r3, [pc, #504]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e364      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800117e:	4b7a      	ldr	r3, [pc, #488]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0ea      	beq.n	8001160 <HAL_RCC_OscConfig+0x2b0>
 800118a:	e01a      	b.n	80011c2 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118c:	f7ff fb1c 	bl	80007c8 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001192:	e00e      	b.n	80011b2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fb18 	bl	80007c8 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d907      	bls.n	80011b2 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011a2:	4b71      	ldr	r3, [pc, #452]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e34a      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011b2:	4b6d      	ldr	r3, [pc, #436]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1ea      	bne.n	8001194 <HAL_RCC_OscConfig+0x2e4>
 80011be:	e000      	b.n	80011c2 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d06c      	beq.n	80012a8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_OscConfig+0x330>
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2b0c      	cmp	r3, #12
 80011d8:	d119      	bne.n	800120e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d116      	bne.n	800120e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011e0:	4b61      	ldr	r3, [pc, #388]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d005      	beq.n	80011f8 <HAL_RCC_OscConfig+0x348>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e327      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	4b5b      	ldr	r3, [pc, #364]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	061b      	lsls	r3, r3, #24
 8001206:	4958      	ldr	r1, [pc, #352]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800120c:	e04c      	b.n	80012a8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d029      	beq.n	800126a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001216:	4b54      	ldr	r3, [pc, #336]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a53      	ldr	r2, [pc, #332]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 800121c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001222:	f7ff fad1 	bl	80007c8 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001228:	e00e      	b.n	8001248 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122a:	f7ff facd 	bl	80007c8 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d907      	bls.n	8001248 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001238:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e2ff      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001248:	4b47      	ldr	r3, [pc, #284]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0ea      	beq.n	800122a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001254:	4b44      	ldr	r3, [pc, #272]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	061b      	lsls	r3, r3, #24
 8001262:	4941      	ldr	r1, [pc, #260]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 8001264:	4313      	orrs	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
 8001268:	e01e      	b.n	80012a8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800126a:	4b3f      	ldr	r3, [pc, #252]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a3e      	ldr	r2, [pc, #248]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 8001270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff faa7 	bl	80007c8 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800127c:	e00e      	b.n	800129c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800127e:	f7ff faa3 	bl	80007c8 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d907      	bls.n	800129c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800128c:	4b36      	ldr	r3, [pc, #216]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e2d5      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800129c:	4b32      	ldr	r3, [pc, #200]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1ea      	bne.n	800127e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0308 	and.w	r3, r3, #8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d062      	beq.n	800137a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d038      	beq.n	800132e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d108      	bne.n	80012d6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80012c4:	4b28      	ldr	r3, [pc, #160]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 80012c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ca:	4a27      	ldr	r2, [pc, #156]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 80012cc:	f023 0310 	bic.w	r3, r3, #16
 80012d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80012d4:	e007      	b.n	80012e6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 80012d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012dc:	4a22      	ldr	r2, [pc, #136]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 80012de:	f043 0310 	orr.w	r3, r3, #16
 80012e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 80012e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012ec:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012f6:	f7ff fa67 	bl	80007c8 <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80012fc:	e00f      	b.n	800131e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012fe:	f7ff fa63 	bl	80007c8 <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b07      	cmp	r3, #7
 800130a:	d908      	bls.n	800131e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800130c:	4b16      	ldr	r3, [pc, #88]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 800130e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e294      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 8001320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0e8      	beq.n	80012fe <HAL_RCC_OscConfig+0x44e>
 800132c:	e025      	b.n	800137a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 8001330:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001334:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133e:	f7ff fa43 	bl	80007c8 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001344:	e012      	b.n	800136c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff fa3f 	bl	80007c8 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b07      	cmp	r3, #7
 8001352:	d90b      	bls.n	800136c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001354:	4b04      	ldr	r3, [pc, #16]	; (8001368 <HAL_RCC_OscConfig+0x4b8>)
 8001356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e270      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800136c:	4ba8      	ldr	r3, [pc, #672]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 800136e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1e5      	bne.n	8001346 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	f000 812d 	beq.w	80015e2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800138c:	4ba0      	ldr	r3, [pc, #640]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d10d      	bne.n	80013b4 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	4b9d      	ldr	r3, [pc, #628]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139c:	4a9c      	ldr	r2, [pc, #624]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a2:	6593      	str	r3, [r2, #88]	; 0x58
 80013a4:	4b9a      	ldr	r3, [pc, #616]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b0:	2301      	movs	r3, #1
 80013b2:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013b4:	4b97      	ldr	r3, [pc, #604]	; (8001614 <HAL_RCC_OscConfig+0x764>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d11e      	bne.n	80013fe <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013c0:	4b94      	ldr	r3, [pc, #592]	; (8001614 <HAL_RCC_OscConfig+0x764>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a93      	ldr	r2, [pc, #588]	; (8001614 <HAL_RCC_OscConfig+0x764>)
 80013c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013cc:	f7ff f9fc 	bl	80007c8 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d2:	e00e      	b.n	80013f2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013d4:	f7ff f9f8 	bl	80007c8 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d907      	bls.n	80013f2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013e2:	4b8c      	ldr	r3, [pc, #560]	; (8001614 <HAL_RCC_OscConfig+0x764>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e22a      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013f2:	4b88      	ldr	r3, [pc, #544]	; (8001614 <HAL_RCC_OscConfig+0x764>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0ea      	beq.n	80013d4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d01f      	beq.n	800144a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	2b00      	cmp	r3, #0
 8001414:	d010      	beq.n	8001438 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001416:	4b7e      	ldr	r3, [pc, #504]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 8001418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800141c:	4a7c      	ldr	r2, [pc, #496]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 800141e:	f043 0304 	orr.w	r3, r3, #4
 8001422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001426:	4b7a      	ldr	r3, [pc, #488]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 8001428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800142c:	4a78      	ldr	r2, [pc, #480]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001436:	e018      	b.n	800146a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001438:	4b75      	ldr	r3, [pc, #468]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 800143a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800143e:	4a74      	ldr	r2, [pc, #464]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001448:	e00f      	b.n	800146a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800144a:	4b71      	ldr	r3, [pc, #452]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 800144c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001450:	4a6f      	ldr	r2, [pc, #444]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 8001452:	f023 0301 	bic.w	r3, r3, #1
 8001456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800145a:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 800145c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001460:	4a6b      	ldr	r2, [pc, #428]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 8001462:	f023 0304 	bic.w	r3, r3, #4
 8001466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d068      	beq.n	8001544 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001472:	f7ff f9a9 	bl	80007c8 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001478:	e011      	b.n	800149e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff f9a5 	bl	80007c8 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d908      	bls.n	800149e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800148c:	4b60      	ldr	r3, [pc, #384]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 800148e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e1d4      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800149e:	4b5c      	ldr	r3, [pc, #368]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 80014a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0e6      	beq.n	800147a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d022      	beq.n	80014fe <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80014b8:	4b55      	ldr	r3, [pc, #340]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 80014ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014be:	4a54      	ldr	r2, [pc, #336]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 80014c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80014c8:	e011      	b.n	80014ee <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ca:	f7ff f97d 	bl	80007c8 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d8:	4293      	cmp	r3, r2
 80014da:	d908      	bls.n	80014ee <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80014dc:	4b4c      	ldr	r3, [pc, #304]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 80014de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e1ac      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80014ee:	4b48      	ldr	r3, [pc, #288]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 80014f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d0e6      	beq.n	80014ca <HAL_RCC_OscConfig+0x61a>
 80014fc:	e068      	b.n	80015d0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80014fe:	4b44      	ldr	r3, [pc, #272]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 8001500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001504:	4a42      	ldr	r2, [pc, #264]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 8001506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800150a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800150e:	e011      	b.n	8001534 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001510:	f7ff f95a 	bl	80007c8 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	; 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d908      	bls.n	8001534 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 8001524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e189      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001534:	4b36      	ldr	r3, [pc, #216]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1e6      	bne.n	8001510 <HAL_RCC_OscConfig+0x660>
 8001542:	e045      	b.n	80015d0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001544:	f7ff f940 	bl	80007c8 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800154a:	e011      	b.n	8001570 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154c:	f7ff f93c 	bl	80007c8 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d908      	bls.n	8001570 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800155e:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 8001560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e16b      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 8001572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1e6      	bne.n	800154c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800157e:	4b24      	ldr	r3, [pc, #144]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 8001580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001588:	2b00      	cmp	r3, #0
 800158a:	d021      	beq.n	80015d0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 800158e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001592:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 8001594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800159c:	e011      	b.n	80015c2 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800159e:	f7ff f913 	bl	80007c8 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d908      	bls.n	80015c2 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 80015b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e142      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 80015c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1e6      	bne.n	800159e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015d0:	7ffb      	ldrb	r3, [r7, #31]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d105      	bne.n	80015e2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 80015dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0320 	and.w	r3, r3, #32
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d04f      	beq.n	800168e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d028      	beq.n	8001648 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015f6:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 80015f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015fc:	4a04      	ldr	r2, [pc, #16]	; (8001610 <HAL_RCC_OscConfig+0x760>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001606:	f7ff f8df 	bl	80007c8 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800160c:	e014      	b.n	8001638 <HAL_RCC_OscConfig+0x788>
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000
 8001614:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001618:	f7ff f8d6 	bl	80007c8 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d908      	bls.n	8001638 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001626:	4b8a      	ldr	r3, [pc, #552]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 8001628:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e107      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001638:	4b85      	ldr	r3, [pc, #532]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 800163a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0e8      	beq.n	8001618 <HAL_RCC_OscConfig+0x768>
 8001646:	e022      	b.n	800168e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001648:	4b81      	ldr	r3, [pc, #516]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 800164a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800164e:	4a80      	ldr	r2, [pc, #512]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001658:	f7ff f8b6 	bl	80007c8 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800165e:	e00f      	b.n	8001680 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001660:	f7ff f8b2 	bl	80007c8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d908      	bls.n	8001680 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800166e:	4b78      	ldr	r3, [pc, #480]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 8001670:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e0e3      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001680:	4b73      	ldr	r3, [pc, #460]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 8001682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1e8      	bne.n	8001660 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 80d7 	beq.w	8001846 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001698:	4b6d      	ldr	r3, [pc, #436]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	2b0c      	cmp	r3, #12
 80016a2:	f000 8091 	beq.w	80017c8 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d166      	bne.n	800177c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ae:	4b68      	ldr	r3, [pc, #416]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a67      	ldr	r2, [pc, #412]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 80016b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ba:	f7ff f885 	bl	80007c8 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c0:	e00e      	b.n	80016e0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c2:	f7ff f881 	bl	80007c8 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d907      	bls.n	80016e0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d0:	4b5f      	ldr	r3, [pc, #380]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e0b3      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e0:	4b5b      	ldr	r3, [pc, #364]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1ea      	bne.n	80016c2 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ec:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	4b58      	ldr	r3, [pc, #352]	; (8001854 <HAL_RCC_OscConfig+0x9a4>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016fc:	3a01      	subs	r2, #1
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	4311      	orrs	r1, r2
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001706:	0212      	lsls	r2, r2, #8
 8001708:	4311      	orrs	r1, r2
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800170e:	0852      	lsrs	r2, r2, #1
 8001710:	3a01      	subs	r2, #1
 8001712:	0552      	lsls	r2, r2, #21
 8001714:	4311      	orrs	r1, r2
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800171a:	0852      	lsrs	r2, r2, #1
 800171c:	3a01      	subs	r2, #1
 800171e:	0652      	lsls	r2, r2, #25
 8001720:	4311      	orrs	r1, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001726:	06d2      	lsls	r2, r2, #27
 8001728:	430a      	orrs	r2, r1
 800172a:	4949      	ldr	r1, [pc, #292]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 800172c:	4313      	orrs	r3, r2
 800172e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001730:	4b47      	ldr	r3, [pc, #284]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a46      	ldr	r2, [pc, #280]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 8001736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800173a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800173c:	4b44      	ldr	r3, [pc, #272]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4a43      	ldr	r2, [pc, #268]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 8001742:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001746:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff f83e 	bl	80007c8 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174e:	e00e      	b.n	800176e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001750:	f7ff f83a 	bl	80007c8 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d907      	bls.n	800176e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175e:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e06c      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176e:	4b38      	ldr	r3, [pc, #224]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0ea      	beq.n	8001750 <HAL_RCC_OscConfig+0x8a0>
 800177a:	e064      	b.n	8001846 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177c:	4b34      	ldr	r3, [pc, #208]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a33      	ldr	r2, [pc, #204]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 8001782:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001788:	f7ff f81e 	bl	80007c8 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800178e:	e00e      	b.n	80017ae <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff f81a 	bl	80007c8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d907      	bls.n	80017ae <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179e:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e04c      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ae:	4b28      	ldr	r3, [pc, #160]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ea      	bne.n	8001790 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017ba:	4b25      	ldr	r3, [pc, #148]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	4924      	ldr	r1, [pc, #144]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <HAL_RCC_OscConfig+0x9a8>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	60cb      	str	r3, [r1, #12]
 80017c6:	e03e      	b.n	8001846 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e039      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <HAL_RCC_OscConfig+0x9a0>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f003 0203 	and.w	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d12c      	bne.n	8001842 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f2:	3b01      	subs	r3, #1
 80017f4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d123      	bne.n	8001842 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001804:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001806:	429a      	cmp	r2, r3
 8001808:	d11b      	bne.n	8001842 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001814:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001816:	429a      	cmp	r2, r3
 8001818:	d113      	bne.n	8001842 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	3b01      	subs	r3, #1
 8001828:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d109      	bne.n	8001842 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	3b01      	subs	r3, #1
 800183c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800183e:	429a      	cmp	r2, r3
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3720      	adds	r7, #32
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	019f800c 	.word	0x019f800c
 8001858:	feeefffc 	.word	0xfeeefffc

0800185c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e11c      	b.n	8001aae <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b90      	ldr	r3, [pc, #576]	; (8001ab8 <HAL_RCC_ClockConfig+0x25c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d910      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b8d      	ldr	r3, [pc, #564]	; (8001ab8 <HAL_RCC_ClockConfig+0x25c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 020f 	bic.w	r2, r3, #15
 800188a:	498b      	ldr	r1, [pc, #556]	; (8001ab8 <HAL_RCC_ClockConfig+0x25c>)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b89      	ldr	r3, [pc, #548]	; (8001ab8 <HAL_RCC_ClockConfig+0x25c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e104      	b.n	8001aae <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d010      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	4b81      	ldr	r3, [pc, #516]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018bc:	429a      	cmp	r2, r3
 80018be:	d908      	bls.n	80018d2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4b7e      	ldr	r3, [pc, #504]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	497b      	ldr	r1, [pc, #492]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8085 	beq.w	80019ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d11f      	bne.n	8001928 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e8:	4b74      	ldr	r3, [pc, #464]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0da      	b.n	8001aae <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80018f8:	f000 f9fc 	bl	8001cf4 <RCC_GetSysClockFreqFromPLLSource>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	4a6f      	ldr	r2, [pc, #444]	; (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d947      	bls.n	8001996 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001906:	4b6d      	ldr	r3, [pc, #436]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d141      	bne.n	8001996 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001912:	4b6a      	ldr	r3, [pc, #424]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800191a:	4a68      	ldr	r2, [pc, #416]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 800191c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001920:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e036      	b.n	8001996 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d107      	bne.n	8001940 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001930:	4b62      	ldr	r3, [pc, #392]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d115      	bne.n	8001968 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0b6      	b.n	8001aae <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d107      	bne.n	8001958 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001948:	4b5c      	ldr	r3, [pc, #368]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d109      	bne.n	8001968 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0aa      	b.n	8001aae <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001958:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0a2      	b.n	8001aae <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001968:	f000 f8b0 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 800196c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4a53      	ldr	r2, [pc, #332]	; (8001ac0 <HAL_RCC_ClockConfig+0x264>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d90f      	bls.n	8001996 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001976:	4b51      	ldr	r3, [pc, #324]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d109      	bne.n	8001996 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001982:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800198a:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 800198c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001990:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001996:	4b49      	ldr	r3, [pc, #292]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f023 0203 	bic.w	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	4946      	ldr	r1, [pc, #280]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019a8:	f7fe ff0e 	bl	80007c8 <HAL_GetTick>
 80019ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	e013      	b.n	80019d8 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b0:	f7fe ff0a 	bl	80007c8 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d90a      	bls.n	80019d8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	4b3e      	ldr	r3, [pc, #248]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 020c 	and.w	r2, r3, #12
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e06a      	b.n	8001aae <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d8:	4b38      	ldr	r3, [pc, #224]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 020c 	and.w	r2, r3, #12
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d1e2      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	2b80      	cmp	r3, #128	; 0x80
 80019ee:	d105      	bne.n	80019fc <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80019f0:	4b32      	ldr	r3, [pc, #200]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	4a31      	ldr	r2, [pc, #196]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 80019f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019fa:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d010      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	4b2b      	ldr	r3, [pc, #172]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d208      	bcs.n	8001a2a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a18:	4b28      	ldr	r3, [pc, #160]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4925      	ldr	r1, [pc, #148]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <HAL_RCC_ClockConfig+0x25c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d210      	bcs.n	8001a5a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a38:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <HAL_RCC_ClockConfig+0x25c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f023 020f 	bic.w	r2, r3, #15
 8001a40:	491d      	ldr	r1, [pc, #116]	; (8001ab8 <HAL_RCC_ClockConfig+0x25c>)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_RCC_ClockConfig+0x25c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e029      	b.n	8001aae <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d008      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	4912      	ldr	r1, [pc, #72]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d009      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	490a      	ldr	r1, [pc, #40]	; (8001abc <HAL_RCC_ClockConfig+0x260>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001a98:	f000 f8b4 	bl	8001c04 <HAL_RCC_GetHCLKFreq>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <HAL_RCC_ClockConfig+0x268>)
 8001aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_RCC_ClockConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fe3e 	bl	8000728 <HAL_InitTick>
 8001aac:	4603      	mov	r3, r0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40022000 	.word	0x40022000
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	04c4b400 	.word	0x04c4b400
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004

08001acc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b089      	sub	sp, #36	; 0x24
 8001ad0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ada:	4b47      	ldr	r3, [pc, #284]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae4:	4b44      	ldr	r3, [pc, #272]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_GetSysClockFreq+0x34>
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d121      	bne.n	8001b3e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d11e      	bne.n	8001b3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b00:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b0c:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	61fb      	str	r3, [r7, #28]
 8001b1a:	e005      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001b28:	4a34      	ldr	r2, [pc, #208]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x130>)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b30:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10d      	bne.n	8001b54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b3c:	e00a      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d102      	bne.n	8001b4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b44:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x134>)
 8001b46:	61bb      	str	r3, [r7, #24]
 8001b48:	e004      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b50:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x134>)
 8001b52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b0c      	cmp	r3, #12
 8001b58:	d146      	bne.n	8001be8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b5a:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b64:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3301      	adds	r3, #1
 8001b70:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d003      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0xb4>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d00d      	beq.n	8001b9a <HAL_RCC_GetSysClockFreq+0xce>
 8001b7e:	e019      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b80:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x134>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b88:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001b8a:	68d2      	ldr	r2, [r2, #12]
 8001b8c:	0a12      	lsrs	r2, r2, #8
 8001b8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b92:	fb02 f303 	mul.w	r3, r2, r3
 8001b96:	617b      	str	r3, [r7, #20]
        break;
 8001b98:	e019      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b9a:	4a19      	ldr	r2, [pc, #100]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x134>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001ba4:	68d2      	ldr	r2, [r2, #12]
 8001ba6:	0a12      	lsrs	r2, r2, #8
 8001ba8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bac:	fb02 f303 	mul.w	r3, r2, r3
 8001bb0:	617b      	str	r3, [r7, #20]
        break;
 8001bb2:	e00c      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	4a0e      	ldr	r2, [pc, #56]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001bbe:	68d2      	ldr	r2, [r2, #12]
 8001bc0:	0a12      	lsrs	r2, r2, #8
 8001bc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bc6:	fb02 f303 	mul.w	r3, r2, r3
 8001bca:	617b      	str	r3, [r7, #20]
        break;
 8001bcc:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001bce:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	0e5b      	lsrs	r3, r3, #25
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001be8:	69bb      	ldr	r3, [r7, #24]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3724      	adds	r7, #36	; 0x24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	08001e4c 	.word	0x08001e4c
 8001c00:	00f42400 	.word	0x00f42400

08001c04 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8001c08:	f7ff ff60 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_RCC_GetHCLKFreq+0x20>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	091b      	lsrs	r3, r3, #4
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	4903      	ldr	r1, [pc, #12]	; (8001c28 <HAL_RCC_GetHCLKFreq+0x24>)
 8001c1a:	5ccb      	ldrb	r3, [r1, r3]
 8001c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	08001e3c 	.word	0x08001e3c

08001c2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c38:	4b2c      	ldr	r3, [pc, #176]	; (8001cec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c44:	f7ff f8a6 	bl	8000d94 <HAL_PWREx_GetVoltageRange>
 8001c48:	6138      	str	r0, [r7, #16]
 8001c4a:	e014      	b.n	8001c76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c50:	4a26      	ldr	r2, [pc, #152]	; (8001cec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c56:	6593      	str	r3, [r2, #88]	; 0x58
 8001c58:	4b24      	ldr	r3, [pc, #144]	; (8001cec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c64:	f7ff f896 	bl	8000d94 <HAL_PWREx_GetVoltageRange>
 8001c68:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c82:	d10b      	bne.n	8001c9c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b80      	cmp	r3, #128	; 0x80
 8001c88:	d919      	bls.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2ba0      	cmp	r3, #160	; 0xa0
 8001c8e:	d902      	bls.n	8001c96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c90:	2302      	movs	r3, #2
 8001c92:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001c94:	e013      	b.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001c9a:	e010      	b.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b80      	cmp	r3, #128	; 0x80
 8001ca0:	d902      	bls.n	8001ca8 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e00a      	b.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b80      	cmp	r3, #128	; 0x80
 8001cac:	d102      	bne.n	8001cb4 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cae:	2302      	movs	r3, #2
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e004      	b.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b70      	cmp	r3, #112	; 0x70
 8001cb8:	d101      	bne.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cba:	2301      	movs	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 020f 	bic.w	r2, r3, #15
 8001cc6:	490a      	ldr	r1, [pc, #40]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001cce:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40022000 	.word	0x40022000

08001cf4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cfa:	4b31      	ldr	r3, [pc, #196]	; (8001dc0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d04:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	3301      	adds	r3, #1
 8001d10:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d015      	beq.n	8001d44 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d839      	bhi.n	8001d92 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d01c      	beq.n	8001d5e <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d133      	bne.n	8001d92 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d2a:	4a26      	ldr	r2, [pc, #152]	; (8001dc4 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	4a23      	ldr	r2, [pc, #140]	; (8001dc0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001d34:	68d2      	ldr	r2, [r2, #12]
 8001d36:	0a12      	lsrs	r2, r2, #8
 8001d38:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	613b      	str	r3, [r7, #16]
      break;
 8001d42:	e029      	b.n	8001d98 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d44:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	4a1c      	ldr	r2, [pc, #112]	; (8001dc0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001d4e:	68d2      	ldr	r2, [r2, #12]
 8001d50:	0a12      	lsrs	r2, r2, #8
 8001d52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d56:	fb02 f303 	mul.w	r3, r2, r3
 8001d5a:	613b      	str	r3, [r7, #16]
      break;
 8001d5c:	e01c      	b.n	8001d98 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d5e:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d107      	bne.n	8001d7a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	e005      	b.n	8001d86 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8001d86:	4a10      	ldr	r2, [pc, #64]	; (8001dc8 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8e:	613b      	str	r3, [r7, #16]
        break;
 8001d90:	e002      	b.n	8001d98 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
      break;
 8001d96:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	0e5b      	lsrs	r3, r3, #25
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	3301      	adds	r3, #1
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001db2:	683b      	ldr	r3, [r7, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	371c      	adds	r7, #28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	00f42400 	.word	0x00f42400
 8001dc8:	08001e4c 	.word	0x08001e4c

08001dcc <memset>:
 8001dcc:	4402      	add	r2, r0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <memset+0xa>
 8001dd4:	4770      	bx	lr
 8001dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8001dda:	e7f9      	b.n	8001dd0 <memset+0x4>

08001ddc <__libc_init_array>:
 8001ddc:	b570      	push	{r4, r5, r6, lr}
 8001dde:	4d0d      	ldr	r5, [pc, #52]	; (8001e14 <__libc_init_array+0x38>)
 8001de0:	2600      	movs	r6, #0
 8001de2:	4c0d      	ldr	r4, [pc, #52]	; (8001e18 <__libc_init_array+0x3c>)
 8001de4:	1b64      	subs	r4, r4, r5
 8001de6:	10a4      	asrs	r4, r4, #2
 8001de8:	42a6      	cmp	r6, r4
 8001dea:	d109      	bne.n	8001e00 <__libc_init_array+0x24>
 8001dec:	4d0b      	ldr	r5, [pc, #44]	; (8001e1c <__libc_init_array+0x40>)
 8001dee:	2600      	movs	r6, #0
 8001df0:	4c0b      	ldr	r4, [pc, #44]	; (8001e20 <__libc_init_array+0x44>)
 8001df2:	f000 f817 	bl	8001e24 <_init>
 8001df6:	1b64      	subs	r4, r4, r5
 8001df8:	10a4      	asrs	r4, r4, #2
 8001dfa:	42a6      	cmp	r6, r4
 8001dfc:	d105      	bne.n	8001e0a <__libc_init_array+0x2e>
 8001dfe:	bd70      	pop	{r4, r5, r6, pc}
 8001e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e04:	3601      	adds	r6, #1
 8001e06:	4798      	blx	r3
 8001e08:	e7ee      	b.n	8001de8 <__libc_init_array+0xc>
 8001e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e0e:	3601      	adds	r6, #1
 8001e10:	4798      	blx	r3
 8001e12:	e7f2      	b.n	8001dfa <__libc_init_array+0x1e>
 8001e14:	08001e8c 	.word	0x08001e8c
 8001e18:	08001e8c 	.word	0x08001e8c
 8001e1c:	08001e8c 	.word	0x08001e8c
 8001e20:	08001e90 	.word	0x08001e90

08001e24 <_init>:
 8001e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e26:	bf00      	nop
 8001e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e2a:	bc08      	pop	{r3}
 8001e2c:	469e      	mov	lr, r3
 8001e2e:	4770      	bx	lr

08001e30 <_fini>:
 8001e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e32:	bf00      	nop
 8001e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e36:	bc08      	pop	{r3}
 8001e38:	469e      	mov	lr, r3
 8001e3a:	4770      	bx	lr
