
Tarea_2_SAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cfc  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08002ef0  08002ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003000  08003000  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003000  08003000  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003000  08003000  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003000  08003000  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003004  08003004  00013004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08003070  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08003070  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006068  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014f4  00000000  00000000  00026149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00027640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000521  00000000  00000000  00027d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a54  00000000  00000000  00028269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000760a  00000000  00000000  0004fcbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8692  00000000  00000000  000572c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000220c  00000000  00000000  0014f95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00151b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000068 	.word	0x20000068
 8000210:	00000000 	.word	0x00000000
 8000214:	08002ed8 	.word	0x08002ed8

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	2000006c 	.word	0x2000006c
 8000230:	08002ed8 	.word	0x08002ed8

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fb5d 	bl	80008f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f844 	bl	80002c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f888 	bl	8000354 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("SSSSSSASAS");
 8000244:	481d      	ldr	r0, [pc, #116]	; (80002bc <main+0x88>)
 8000246:	f001 ffc3 	bl	80021d0 <iprintf>
	  HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 800024a:	2101      	movs	r1, #1
 800024c:	481c      	ldr	r0, [pc, #112]	; (80002c0 <main+0x8c>)
 800024e:	f000 fe95 	bl	8000f7c <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000256:	f000 fbc5 	bl	80009e4 <HAL_Delay>

	  if(estadoActual == ESTADO_0){
 800025a:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <main+0x90>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d107      	bne.n	8000272 <main+0x3e>
		  HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8000262:	2101      	movs	r1, #1
 8000264:	4816      	ldr	r0, [pc, #88]	; (80002c0 <main+0x8c>)
 8000266:	f000 fe89 	bl	8000f7c <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 800026a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800026e:	f000 fbb9 	bl	80009e4 <HAL_Delay>
	  }

	  if(estadoActual == ESTADO_1){
 8000272:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <main+0x90>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b01      	cmp	r3, #1
 8000278:	d107      	bne.n	800028a <main+0x56>
		  HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 800027a:	2101      	movs	r1, #1
 800027c:	4810      	ldr	r0, [pc, #64]	; (80002c0 <main+0x8c>)
 800027e:	f000 fe7d 	bl	8000f7c <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8000282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000286:	f000 fbad 	bl	80009e4 <HAL_Delay>
	  }
	  if(estadoActual == ESTADO_2){
 800028a:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <main+0x90>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b02      	cmp	r3, #2
 8000290:	d107      	bne.n	80002a2 <main+0x6e>
		  HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 8000292:	2101      	movs	r1, #1
 8000294:	480a      	ldr	r0, [pc, #40]	; (80002c0 <main+0x8c>)
 8000296:	f000 fe71 	bl	8000f7c <HAL_GPIO_TogglePin>
	  	  HAL_Delay(1500);
 800029a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800029e:	f000 fba1 	bl	80009e4 <HAL_Delay>
	  	  }
	  if(estadoActual == ESTADO_3){
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <main+0x90>)
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b03      	cmp	r3, #3
 80002a8:	d1cc      	bne.n	8000244 <main+0x10>
		  HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
 80002aa:	2101      	movs	r1, #1
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <main+0x8c>)
 80002ae:	f000 fe65 	bl	8000f7c <HAL_GPIO_TogglePin>
	  	  HAL_Delay(2000);
 80002b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002b6:	f000 fb95 	bl	80009e4 <HAL_Delay>
	  printf("SSSSSSASAS");
 80002ba:	e7c3      	b.n	8000244 <main+0x10>
 80002bc:	08002ef0 	.word	0x08002ef0
 80002c0:	42020400 	.word	0x42020400
 80002c4:	20000084 	.word	0x20000084

080002c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b098      	sub	sp, #96	; 0x60
 80002cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ce:	f107 0318 	add.w	r3, r7, #24
 80002d2:	2248      	movs	r2, #72	; 0x48
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 ffcf 	bl	800227a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80002ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80002ee:	f000 fe9f 	bl	8001030 <HAL_PWREx_ControlVoltageScaling>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002f8:	f000 f90e 	bl	8000518 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002fc:	2310      	movs	r3, #16
 80002fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000300:	2301      	movs	r3, #1
 8000302:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000304:	2300      	movs	r3, #0
 8000306:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000308:	2360      	movs	r3, #96	; 0x60
 800030a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800030c:	2300      	movs	r3, #0
 800030e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000310:	f107 0318 	add.w	r3, r7, #24
 8000314:	4618      	mov	r0, r3
 8000316:	f000 ff0b 	bl	8001130 <HAL_RCC_OscConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000320:	f000 f8fa 	bl	8000518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000324:	230f      	movs	r3, #15
 8000326:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000328:	2300      	movs	r3, #0
 800032a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	2300      	movs	r3, #0
 800032e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2100      	movs	r1, #0
 800033c:	4618      	mov	r0, r3
 800033e:	f001 fbcd 	bl	8001adc <HAL_RCC_ClockConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000348:	f000 f8e6 	bl	8000518 <Error_Handler>
  }
}
 800034c:	bf00      	nop
 800034e:	3760      	adds	r7, #96	; 0x60
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 030c 	add.w	r3, r7, #12
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800036a:	4b33      	ldr	r3, [pc, #204]	; (8000438 <MX_GPIO_Init+0xe4>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036e:	4a32      	ldr	r2, [pc, #200]	; (8000438 <MX_GPIO_Init+0xe4>)
 8000370:	f043 0304 	orr.w	r3, r3, #4
 8000374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000376:	4b30      	ldr	r3, [pc, #192]	; (8000438 <MX_GPIO_Init+0xe4>)
 8000378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800037a:	f003 0304 	and.w	r3, r3, #4
 800037e:	60bb      	str	r3, [r7, #8]
 8000380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000382:	4b2d      	ldr	r3, [pc, #180]	; (8000438 <MX_GPIO_Init+0xe4>)
 8000384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000386:	4a2c      	ldr	r2, [pc, #176]	; (8000438 <MX_GPIO_Init+0xe4>)
 8000388:	f043 0302 	orr.w	r3, r3, #2
 800038c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800038e:	4b2a      	ldr	r3, [pc, #168]	; (8000438 <MX_GPIO_Init+0xe4>)
 8000390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000392:	f003 0302 	and.w	r3, r3, #2
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039a:	4b27      	ldr	r3, [pc, #156]	; (8000438 <MX_GPIO_Init+0xe4>)
 800039c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800039e:	4a26      	ldr	r2, [pc, #152]	; (8000438 <MX_GPIO_Init+0xe4>)
 80003a0:	f043 0301 	orr.w	r3, r3, #1
 80003a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003a6:	4b24      	ldr	r3, [pc, #144]	; (8000438 <MX_GPIO_Init+0xe4>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led1_Pin|led2_Pin, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2103      	movs	r1, #3
 80003b6:	4821      	ldr	r0, [pc, #132]	; (800043c <MX_GPIO_Init+0xe8>)
 80003b8:	f000 fdc8 	bl	8000f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : boton_azul_Pin */
  GPIO_InitStruct.Pin = boton_azul_Pin;
 80003bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(boton_azul_GPIO_Port, &GPIO_InitStruct);
 80003cc:	f107 030c 	add.w	r3, r7, #12
 80003d0:	4619      	mov	r1, r3
 80003d2:	481b      	ldr	r0, [pc, #108]	; (8000440 <MX_GPIO_Init+0xec>)
 80003d4:	f000 fc3a 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : led1_Pin led2_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin;
 80003d8:	2303      	movs	r3, #3
 80003da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003dc:	2301      	movs	r3, #1
 80003de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e0:	2300      	movs	r3, #0
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003e8:	f107 030c 	add.w	r3, r7, #12
 80003ec:	4619      	mov	r1, r3
 80003ee:	4813      	ldr	r0, [pc, #76]	; (800043c <MX_GPIO_Init+0xe8>)
 80003f0:	f000 fc2c 	bl	8000c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : boton2_Pin */
  GPIO_InitStruct.Pin = boton2_Pin;
 80003f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80003fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80003fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(boton2_GPIO_Port, &GPIO_InitStruct);
 8000404:	f107 030c 	add.w	r3, r7, #12
 8000408:	4619      	mov	r1, r3
 800040a:	480e      	ldr	r0, [pc, #56]	; (8000444 <MX_GPIO_Init+0xf0>)
 800040c:	f000 fc1e 	bl	8000c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI8_IRQn, 0, 0);
 8000410:	2200      	movs	r2, #0
 8000412:	2100      	movs	r1, #0
 8000414:	2013      	movs	r0, #19
 8000416:	f000 fbe4 	bl	8000be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI8_IRQn);
 800041a:	2013      	movs	r0, #19
 800041c:	f000 fbfb 	bl	8000c16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000420:	2200      	movs	r2, #0
 8000422:	2100      	movs	r1, #0
 8000424:	2018      	movs	r0, #24
 8000426:	f000 fbdc 	bl	8000be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 800042a:	2018      	movs	r0, #24
 800042c:	f000 fbf3 	bl	8000c16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000430:	bf00      	nop
 8000432:	3720      	adds	r7, #32
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	40021000 	.word	0x40021000
 800043c:	42020400 	.word	0x42020400
 8000440:	42020800 	.word	0x42020800
 8000444:	42020000 	.word	0x42020000

08000448 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == boton_azul_Pin){
 8000452:	88fb      	ldrh	r3, [r7, #6]
 8000454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000458:	d12b      	bne.n	80004b2 <HAL_GPIO_EXTI_Falling_Callback+0x6a>
		switch (estadoActual){
 800045a:	4b2a      	ldr	r3, [pc, #168]	; (8000504 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b03      	cmp	r3, #3
 8000460:	d826      	bhi.n	80004b0 <HAL_GPIO_EXTI_Falling_Callback+0x68>
 8000462:	a201      	add	r2, pc, #4	; (adr r2, 8000468 <HAL_GPIO_EXTI_Falling_Callback+0x20>)
 8000464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000468:	08000479 	.word	0x08000479
 800046c:	08000487 	.word	0x08000487
 8000470:	08000495 	.word	0x08000495
 8000474:	080004a3 	.word	0x080004a3
		case ESTADO_0:
			//HAL_GPIO_TogglePin(led1_GPIO_Port, led1_Pin);
			//HAL_Delay(1000);
			printf("El estado actual es: ESTADO 0");
 8000478:	4823      	ldr	r0, [pc, #140]	; (8000508 <HAL_GPIO_EXTI_Falling_Callback+0xc0>)
 800047a:	f001 fea9 	bl	80021d0 <iprintf>
			estadoActual = ESTADO_3;
 800047e:	4b21      	ldr	r3, [pc, #132]	; (8000504 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 8000480:	2203      	movs	r2, #3
 8000482:	701a      	strb	r2, [r3, #0]
			break;
 8000484:	e015      	b.n	80004b2 <HAL_GPIO_EXTI_Falling_Callback+0x6a>
		case ESTADO_1:
			printf("El estado actual es: ESTADO 1");
 8000486:	4821      	ldr	r0, [pc, #132]	; (800050c <HAL_GPIO_EXTI_Falling_Callback+0xc4>)
 8000488:	f001 fea2 	bl	80021d0 <iprintf>
			estadoActual = ESTADO_0;
 800048c:	4b1d      	ldr	r3, [pc, #116]	; (8000504 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 800048e:	2200      	movs	r2, #0
 8000490:	701a      	strb	r2, [r3, #0]
			break;
 8000492:	e00e      	b.n	80004b2 <HAL_GPIO_EXTI_Falling_Callback+0x6a>
		case ESTADO_2:
			printf("El estado actual es: ESTADO 2");
 8000494:	481e      	ldr	r0, [pc, #120]	; (8000510 <HAL_GPIO_EXTI_Falling_Callback+0xc8>)
 8000496:	f001 fe9b 	bl	80021d0 <iprintf>
			estadoActual = ESTADO_1;
 800049a:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 800049c:	2201      	movs	r2, #1
 800049e:	701a      	strb	r2, [r3, #0]
			break;
 80004a0:	e007      	b.n	80004b2 <HAL_GPIO_EXTI_Falling_Callback+0x6a>
		case ESTADO_3:
			printf("El estado actual es: ESTADO 3");
 80004a2:	481c      	ldr	r0, [pc, #112]	; (8000514 <HAL_GPIO_EXTI_Falling_Callback+0xcc>)
 80004a4:	f001 fe94 	bl	80021d0 <iprintf>
			estadoActual = ESTADO_2;
 80004a8:	4b16      	ldr	r3, [pc, #88]	; (8000504 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 80004aa:	2202      	movs	r2, #2
 80004ac:	701a      	strb	r2, [r3, #0]
			break;
 80004ae:	e000      	b.n	80004b2 <HAL_GPIO_EXTI_Falling_Callback+0x6a>
		default:
			break;
 80004b0:	bf00      	nop
		}
	}
	if (GPIO_Pin == boton2_Pin){
 80004b2:	88fb      	ldrh	r3, [r7, #6]
 80004b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004b8:	d11f      	bne.n	80004fa <HAL_GPIO_EXTI_Falling_Callback+0xb2>
			switch (estadoActual){
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b03      	cmp	r3, #3
 80004c0:	d81a      	bhi.n	80004f8 <HAL_GPIO_EXTI_Falling_Callback+0xb0>
 80004c2:	a201      	add	r2, pc, #4	; (adr r2, 80004c8 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 80004c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c8:	080004d9 	.word	0x080004d9
 80004cc:	080004e1 	.word	0x080004e1
 80004d0:	080004e9 	.word	0x080004e9
 80004d4:	080004f1 	.word	0x080004f1
			case ESTADO_0:
				estadoActual = ESTADO_1;
 80004d8:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 80004da:	2201      	movs	r2, #1
 80004dc:	701a      	strb	r2, [r3, #0]
				break;
 80004de:	e00c      	b.n	80004fa <HAL_GPIO_EXTI_Falling_Callback+0xb2>
			case ESTADO_1:
				estadoActual = ESTADO_2;
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 80004e2:	2202      	movs	r2, #2
 80004e4:	701a      	strb	r2, [r3, #0]
				break;
 80004e6:	e008      	b.n	80004fa <HAL_GPIO_EXTI_Falling_Callback+0xb2>
			case ESTADO_2:
				estadoActual = ESTADO_3;
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 80004ea:	2203      	movs	r2, #3
 80004ec:	701a      	strb	r2, [r3, #0]
				break;
 80004ee:	e004      	b.n	80004fa <HAL_GPIO_EXTI_Falling_Callback+0xb2>
			case ESTADO_3:
				estadoActual = ESTADO_0;
 80004f0:	4b04      	ldr	r3, [pc, #16]	; (8000504 <HAL_GPIO_EXTI_Falling_Callback+0xbc>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
				break;
 80004f6:	e000      	b.n	80004fa <HAL_GPIO_EXTI_Falling_Callback+0xb2>
			default:
				break;
 80004f8:	bf00      	nop
			}
		}
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000084 	.word	0x20000084
 8000508:	08002efc 	.word	0x08002efc
 800050c:	08002f1c 	.word	0x08002f1c
 8000510:	08002f3c 	.word	0x08002f3c
 8000514:	08002f5c 	.word	0x08002f5c

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	e7fe      	b.n	8000520 <Error_Handler+0x8>
	...

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_MspInit+0x44>)
 800052c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <HAL_MspInit+0x44>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6613      	str	r3, [r2, #96]	; 0x60
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <HAL_MspInit+0x44>)
 8000538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b09      	ldr	r3, [pc, #36]	; (8000568 <HAL_MspInit+0x44>)
 8000544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000546:	4a08      	ldr	r2, [pc, #32]	; (8000568 <HAL_MspInit+0x44>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054c:	6593      	str	r3, [r2, #88]	; 0x58
 800054e:	4b06      	ldr	r3, [pc, #24]	; (8000568 <HAL_MspInit+0x44>)
 8000550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000570:	e7fe      	b.n	8000570 <NMI_Handler+0x4>

08000572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000576:	e7fe      	b.n	8000576 <HardFault_Handler+0x4>

08000578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800057c:	e7fe      	b.n	800057c <MemManage_Handler+0x4>

0800057e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <BusFault_Handler+0x4>

08000584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <UsageFault_Handler+0x4>

0800058a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b8:	f000 f9f4 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(boton2_Pin);
 80005c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005c8:	f000 fcf2 	bl	8000fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(boton_azul_Pin);
 80005d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005d8:	f000 fcea 	bl	8000fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
 80005f0:	e00a      	b.n	8000608 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005f2:	f3af 8000 	nop.w
 80005f6:	4601      	mov	r1, r0
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	1c5a      	adds	r2, r3, #1
 80005fc:	60ba      	str	r2, [r7, #8]
 80005fe:	b2ca      	uxtb	r2, r1
 8000600:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	3301      	adds	r3, #1
 8000606:	617b      	str	r3, [r7, #20]
 8000608:	697a      	ldr	r2, [r7, #20]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	429a      	cmp	r2, r3
 800060e:	dbf0      	blt.n	80005f2 <_read+0x12>
  }

  return len;
 8000610:	687b      	ldr	r3, [r7, #4]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b086      	sub	sp, #24
 800061e:	af00      	add	r7, sp, #0
 8000620:	60f8      	str	r0, [r7, #12]
 8000622:	60b9      	str	r1, [r7, #8]
 8000624:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	e009      	b.n	8000640 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	1c5a      	adds	r2, r3, #1
 8000630:	60ba      	str	r2, [r7, #8]
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	429a      	cmp	r2, r3
 8000646:	dbf1      	blt.n	800062c <_write+0x12>
  }
  return len;
 8000648:	687b      	ldr	r3, [r7, #4]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <_close>:

int _close(int file)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800065a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800065e:	4618      	mov	r0, r3
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr

0800066a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800066a:	b480      	push	{r7}
 800066c:	b083      	sub	sp, #12
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800067a:	605a      	str	r2, [r3, #4]
  return 0;
 800067c:	2300      	movs	r3, #0
}
 800067e:	4618      	mov	r0, r3
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <_isatty>:

int _isatty(int file)
{
 800068a:	b480      	push	{r7}
 800068c:	b083      	sub	sp, #12
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000692:	2301      	movs	r3, #1
}
 8000694:	4618      	mov	r0, r3
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
	...

080006bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006c4:	4a14      	ldr	r2, [pc, #80]	; (8000718 <_sbrk+0x5c>)
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <_sbrk+0x60>)
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <_sbrk+0x64>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d102      	bne.n	80006de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <_sbrk+0x64>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <_sbrk+0x68>)
 80006dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <_sbrk+0x64>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4413      	add	r3, r2
 80006e6:	693a      	ldr	r2, [r7, #16]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d207      	bcs.n	80006fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006ec:	f001 fe14 	bl	8002318 <__errno>
 80006f0:	4603      	mov	r3, r0
 80006f2:	220c      	movs	r2, #12
 80006f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	e009      	b.n	8000710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <_sbrk+0x64>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000702:	4b07      	ldr	r3, [pc, #28]	; (8000720 <_sbrk+0x64>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <_sbrk+0x64>)
 800070c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800070e:	68fb      	ldr	r3, [r7, #12]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3718      	adds	r7, #24
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20030000 	.word	0x20030000
 800071c:	00000400 	.word	0x00000400
 8000720:	20000088 	.word	0x20000088
 8000724:	200001e0 	.word	0x200001e0

08000728 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <SystemInit+0x20>)
 800072e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000732:	4a05      	ldr	r2, [pc, #20]	; (8000748 <SystemInit+0x20>)
 8000734:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000738:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b087      	sub	sp, #28
 8000750:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000752:	4b4f      	ldr	r3, [pc, #316]	; (8000890 <SystemCoreClockUpdate+0x144>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	2b00      	cmp	r3, #0
 800075c:	d107      	bne.n	800076e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800075e:	4b4c      	ldr	r3, [pc, #304]	; (8000890 <SystemCoreClockUpdate+0x144>)
 8000760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	617b      	str	r3, [r7, #20]
 800076c:	e005      	b.n	800077a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800076e:	4b48      	ldr	r3, [pc, #288]	; (8000890 <SystemCoreClockUpdate+0x144>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	091b      	lsrs	r3, r3, #4
 8000774:	f003 030f 	and.w	r3, r3, #15
 8000778:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800077a:	4a46      	ldr	r2, [pc, #280]	; (8000894 <SystemCoreClockUpdate+0x148>)
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000782:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000784:	4b42      	ldr	r3, [pc, #264]	; (8000890 <SystemCoreClockUpdate+0x144>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	f003 030c 	and.w	r3, r3, #12
 800078c:	2b0c      	cmp	r3, #12
 800078e:	d866      	bhi.n	800085e <SystemCoreClockUpdate+0x112>
 8000790:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <SystemCoreClockUpdate+0x4c>)
 8000792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000796:	bf00      	nop
 8000798:	080007cd 	.word	0x080007cd
 800079c:	0800085f 	.word	0x0800085f
 80007a0:	0800085f 	.word	0x0800085f
 80007a4:	0800085f 	.word	0x0800085f
 80007a8:	080007d5 	.word	0x080007d5
 80007ac:	0800085f 	.word	0x0800085f
 80007b0:	0800085f 	.word	0x0800085f
 80007b4:	0800085f 	.word	0x0800085f
 80007b8:	080007dd 	.word	0x080007dd
 80007bc:	0800085f 	.word	0x0800085f
 80007c0:	0800085f 	.word	0x0800085f
 80007c4:	0800085f 	.word	0x0800085f
 80007c8:	080007e5 	.word	0x080007e5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80007cc:	4a32      	ldr	r2, [pc, #200]	; (8000898 <SystemCoreClockUpdate+0x14c>)
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	6013      	str	r3, [r2, #0]
      break;
 80007d2:	e048      	b.n	8000866 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80007d4:	4b30      	ldr	r3, [pc, #192]	; (8000898 <SystemCoreClockUpdate+0x14c>)
 80007d6:	4a31      	ldr	r2, [pc, #196]	; (800089c <SystemCoreClockUpdate+0x150>)
 80007d8:	601a      	str	r2, [r3, #0]
      break;
 80007da:	e044      	b.n	8000866 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80007dc:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <SystemCoreClockUpdate+0x14c>)
 80007de:	4a2f      	ldr	r2, [pc, #188]	; (800089c <SystemCoreClockUpdate+0x150>)
 80007e0:	601a      	str	r2, [r3, #0]
      break;
 80007e2:	e040      	b.n	8000866 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80007e4:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <SystemCoreClockUpdate+0x144>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	f003 0303 	and.w	r3, r3, #3
 80007ec:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80007ee:	4b28      	ldr	r3, [pc, #160]	; (8000890 <SystemCoreClockUpdate+0x144>)
 80007f0:	68db      	ldr	r3, [r3, #12]
 80007f2:	091b      	lsrs	r3, r3, #4
 80007f4:	f003 030f 	and.w	r3, r3, #15
 80007f8:	3301      	adds	r3, #1
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d003      	beq.n	800080a <SystemCoreClockUpdate+0xbe>
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d006      	beq.n	8000816 <SystemCoreClockUpdate+0xca>
 8000808:	e00b      	b.n	8000822 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800080a:	4a24      	ldr	r2, [pc, #144]	; (800089c <SystemCoreClockUpdate+0x150>)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000812:	613b      	str	r3, [r7, #16]
          break;
 8000814:	e00b      	b.n	800082e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000816:	4a21      	ldr	r2, [pc, #132]	; (800089c <SystemCoreClockUpdate+0x150>)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	fbb2 f3f3 	udiv	r3, r2, r3
 800081e:	613b      	str	r3, [r7, #16]
          break;
 8000820:	e005      	b.n	800082e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000822:	697a      	ldr	r2, [r7, #20]
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	613b      	str	r3, [r7, #16]
          break;
 800082c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <SystemCoreClockUpdate+0x144>)
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	0a1b      	lsrs	r3, r3, #8
 8000834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	fb02 f303 	mul.w	r3, r2, r3
 800083e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <SystemCoreClockUpdate+0x144>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	0e5b      	lsrs	r3, r3, #25
 8000846:	f003 0303 	and.w	r3, r3, #3
 800084a:	3301      	adds	r3, #1
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	fbb2 f3f3 	udiv	r3, r2, r3
 8000858:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <SystemCoreClockUpdate+0x14c>)
 800085a:	6013      	str	r3, [r2, #0]
      break;
 800085c:	e003      	b.n	8000866 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <SystemCoreClockUpdate+0x14c>)
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	6013      	str	r3, [r2, #0]
      break;
 8000864:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <SystemCoreClockUpdate+0x144>)
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	091b      	lsrs	r3, r3, #4
 800086c:	f003 030f 	and.w	r3, r3, #15
 8000870:	4a0b      	ldr	r2, [pc, #44]	; (80008a0 <SystemCoreClockUpdate+0x154>)
 8000872:	5cd3      	ldrb	r3, [r2, r3]
 8000874:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <SystemCoreClockUpdate+0x14c>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	fa22 f303 	lsr.w	r3, r2, r3
 8000880:	4a05      	ldr	r2, [pc, #20]	; (8000898 <SystemCoreClockUpdate+0x14c>)
 8000882:	6013      	str	r3, [r2, #0]
}
 8000884:	bf00      	nop
 8000886:	371c      	adds	r7, #28
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000
 8000894:	08002f8c 	.word	0x08002f8c
 8000898:	20000000 	.word	0x20000000
 800089c:	00f42400 	.word	0x00f42400
 80008a0:	08002f7c 	.word	0x08002f7c

080008a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80008a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008a8:	f7ff ff3e 	bl	8000728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008ae:	e003      	b.n	80008b8 <LoopCopyDataInit>

080008b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008b0:	4b0b      	ldr	r3, [pc, #44]	; (80008e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008b6:	3104      	adds	r1, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008b8:	480a      	ldr	r0, [pc, #40]	; (80008e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80008bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008c0:	d3f6      	bcc.n	80008b0 <CopyDataInit>
	ldr	r2, =_sbss
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80008c4:	e002      	b.n	80008cc <LoopFillZerobss>

080008c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80008c8:	f842 3b04 	str.w	r3, [r2], #4

080008cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <LoopForever+0x16>)
	cmp	r2, r3
 80008ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80008d0:	d3f9      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008d2:	f001 fd27 	bl	8002324 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008d6:	f7ff fcad 	bl	8000234 <main>

080008da <LoopForever>:

LoopForever:
    b LoopForever
 80008da:	e7fe      	b.n	80008da <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80008dc:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80008e0:	08003008 	.word	0x08003008
	ldr	r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80008e8:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 80008ec:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 80008f0:	200001dc 	.word	0x200001dc

080008f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f4:	e7fe      	b.n	80008f4 <ADC1_2_IRQHandler>

080008f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008fc:	2300      	movs	r3, #0
 80008fe:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000900:	2004      	movs	r0, #4
 8000902:	f000 f963 	bl	8000bcc <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000906:	f7ff ff21 	bl	800074c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800090a:	2007      	movs	r0, #7
 800090c:	f000 f80e 	bl	800092c <HAL_InitTick>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	71fb      	strb	r3, [r7, #7]
 800091a:	e001      	b.n	8000920 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800091c:	f7ff fe02 	bl	8000524 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000920:	79fb      	ldrb	r3, [r7, #7]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000934:	2300      	movs	r3, #0
 8000936:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_InitTick+0x6c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d023      	beq.n	8000988 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_InitTick+0x70>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b14      	ldr	r3, [pc, #80]	; (8000998 <HAL_InitTick+0x6c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000952:	fbb2 f3f3 	udiv	r3, r2, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f96b 	bl	8000c32 <HAL_SYSTICK_Config>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d10f      	bne.n	8000982 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b07      	cmp	r3, #7
 8000966:	d809      	bhi.n	800097c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 f937 	bl	8000be2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_InitTick+0x74>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
 800097a:	e007      	b.n	800098c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800097c:	2301      	movs	r3, #1
 800097e:	73fb      	strb	r3, [r7, #15]
 8000980:	e004      	b.n	800098c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	73fb      	strb	r3, [r7, #15]
 8000986:	e001      	b.n	800098c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000988:	2301      	movs	r3, #1
 800098a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800098c:	7bfb      	ldrb	r3, [r7, #15]
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000004 	.word	0x20000004

080009a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x20>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <HAL_IncTick+0x24>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4413      	add	r3, r2
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <HAL_IncTick+0x24>)
 80009b6:	6013      	str	r3, [r2, #0]
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	20000008 	.word	0x20000008
 80009c8:	2000008c 	.word	0x2000008c

080009cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return uwTick;
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <HAL_GetTick+0x14>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	2000008c 	.word	0x2000008c

080009e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ec:	f7ff ffee 	bl	80009cc <HAL_GetTick>
 80009f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009fc:	d005      	beq.n	8000a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	; (8000a28 <HAL_Delay+0x44>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	461a      	mov	r2, r3
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	4413      	add	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a0a:	bf00      	nop
 8000a0c:	f7ff ffde 	bl	80009cc <HAL_GetTick>
 8000a10:	4602      	mov	r2, r0
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d8f7      	bhi.n	8000a0c <HAL_Delay+0x28>
  {
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008

08000a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <__NVIC_GetPriorityGrouping+0x18>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	f003 0307 	and.w	r3, r3, #7
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	db0b      	blt.n	8000aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	f003 021f 	and.w	r2, r3, #31
 8000aa8:	4907      	ldr	r1, [pc, #28]	; (8000ac8 <__NVIC_EnableIRQ+0x38>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	095b      	lsrs	r3, r3, #5
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	; (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0152      	lsls	r2, r2, #5
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	; (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0152      	lsls	r2, r2, #5
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	; 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	bf28      	it	cs
 8000b3e:	2303      	movcs	r3, #3
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3303      	adds	r3, #3
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b04      	subs	r3, #4
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	; 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b98:	d301      	bcc.n	8000b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00f      	b.n	8000bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <SysTick_Config+0x40>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba6:	2107      	movs	r1, #7
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f7ff ff8e 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <SysTick_Config+0x40>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <SysTick_Config+0x40>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000e010 	.word	0xe000e010

08000bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff29 	bl	8000a2c <__NVIC_SetPriorityGrouping>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b086      	sub	sp, #24
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf0:	f7ff ff40 	bl	8000a74 <__NVIC_GetPriorityGrouping>
 8000bf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	68b9      	ldr	r1, [r7, #8]
 8000bfa:	6978      	ldr	r0, [r7, #20]
 8000bfc:	f7ff ff90 	bl	8000b20 <NVIC_EncodePriority>
 8000c00:	4602      	mov	r2, r0
 8000c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff5f 	bl	8000acc <__NVIC_SetPriority>
}
 8000c0e:	bf00      	nop
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff33 	bl	8000a90 <__NVIC_EnableIRQ>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffa4 	bl	8000b88 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000c5a:	e158      	b.n	8000f0e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 814a 	beq.w	8000f08 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d005      	beq.n	8000c8c <HAL_GPIO_Init+0x40>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d130      	bne.n	8000cee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	f003 0201 	and.w	r2, r3, #1
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d017      	beq.n	8000d2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d123      	bne.n	8000d7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	08da      	lsrs	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	691a      	ldr	r2, [r3, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	6939      	ldr	r1, [r7, #16]
 8000d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0203 	and.w	r2, r3, #3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 80a4 	beq.w	8000f08 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8000dc0:	4a5a      	ldr	r2, [pc, #360]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3318      	adds	r3, #24
 8000dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a52      	ldr	r2, [pc, #328]	; (8000f30 <HAL_GPIO_Init+0x2e4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d025      	beq.n	8000e38 <HAL_GPIO_Init+0x1ec>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a51      	ldr	r2, [pc, #324]	; (8000f34 <HAL_GPIO_Init+0x2e8>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d01f      	beq.n	8000e34 <HAL_GPIO_Init+0x1e8>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a50      	ldr	r2, [pc, #320]	; (8000f38 <HAL_GPIO_Init+0x2ec>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d019      	beq.n	8000e30 <HAL_GPIO_Init+0x1e4>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a4f      	ldr	r2, [pc, #316]	; (8000f3c <HAL_GPIO_Init+0x2f0>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d013      	beq.n	8000e2c <HAL_GPIO_Init+0x1e0>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a4e      	ldr	r2, [pc, #312]	; (8000f40 <HAL_GPIO_Init+0x2f4>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d00d      	beq.n	8000e28 <HAL_GPIO_Init+0x1dc>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a4d      	ldr	r2, [pc, #308]	; (8000f44 <HAL_GPIO_Init+0x2f8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_Init+0x1d8>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a4c      	ldr	r2, [pc, #304]	; (8000f48 <HAL_GPIO_Init+0x2fc>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d101      	bne.n	8000e20 <HAL_GPIO_Init+0x1d4>
 8000e1c:	2306      	movs	r3, #6
 8000e1e:	e00c      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e20:	2307      	movs	r3, #7
 8000e22:	e00a      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e24:	2305      	movs	r3, #5
 8000e26:	e008      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e28:	2304      	movs	r3, #4
 8000e2a:	e006      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e004      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e30:	2302      	movs	r3, #2
 8000e32:	e002      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e34:	2301      	movs	r3, #1
 8000e36:	e000      	b.n	8000e3a <HAL_GPIO_Init+0x1ee>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	f002 0203 	and.w	r2, r2, #3
 8000e40:	00d2      	lsls	r2, r2, #3
 8000e42:	4093      	lsls	r3, r2
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8000e4a:	4938      	ldr	r1, [pc, #224]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3318      	adds	r3, #24
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e58:	4b34      	ldr	r3, [pc, #208]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e7c:	4a2b      	ldr	r2, [pc, #172]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e82:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ea6:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000eae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ed2:	4a16      	ldr	r2, [pc, #88]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f47f ae9f 	bne.w	8000c5c <HAL_GPIO_Init+0x10>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	bf00      	nop
 8000f22:	371c      	adds	r7, #28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	4002f400 	.word	0x4002f400
 8000f30:	42020000 	.word	0x42020000
 8000f34:	42020400 	.word	0x42020400
 8000f38:	42020800 	.word	0x42020800
 8000f3c:	42020c00 	.word	0x42020c00
 8000f40:	42021000 	.word	0x42021000
 8000f44:	42021400 	.word	0x42021400
 8000f48:	42021800 	.word	0x42021800

08000f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	807b      	strh	r3, [r7, #2]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f5c:	787b      	ldrb	r3, [r7, #1]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f62:	887a      	ldrh	r2, [r7, #2]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f68:	e002      	b.n	8000f70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	695b      	ldr	r3, [r3, #20]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4013      	ands	r3, r2
 8000f94:	041a      	lsls	r2, r3, #16
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	43d9      	mvns	r1, r3
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	400b      	ands	r3, r1
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	619a      	str	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d006      	beq.n	8000fd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000fc6:	4a0c      	ldr	r2, [pc, #48]	; (8000ff8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f814 	bl	8000ffc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000fd6:	691a      	ldr	r2, [r3, #16]
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d006      	beq.n	8000fee <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000fe0:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fa2d 	bl	8000448 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	4002f400 	.word	0x4002f400

08000ffc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <HAL_PWREx_GetVoltageRange+0x18>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40007000 	.word	0x40007000

08001030 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001040:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8001042:	f000 f851 	bl	80010e8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8001046:	4603      	mov	r3, r0
 8001048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800104c:	d101      	bne.n	8001052 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e03e      	b.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800105a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800105e:	d101      	bne.n	8001064 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e035      	b.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	d101      	bne.n	8001070 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	e02f      	b.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001078:	4917      	ldr	r1, [pc, #92]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0xac>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	095b      	lsrs	r3, r3, #5
 8001086:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001088:	fba2 2303 	umull	r2, r3, r2, r3
 800108c:	09db      	lsrs	r3, r3, #7
 800108e:	2232      	movs	r2, #50	; 0x32
 8001090:	fb02 f303 	mul.w	r3, r2, r3
 8001094:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001096:	fba2 2303 	umull	r2, r3, r2, r3
 800109a:	08db      	lsrs	r3, r3, #3
 800109c:	3301      	adds	r3, #1
 800109e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010a0:	e002      	b.n	80010a8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010aa:	695b      	ldr	r3, [r3, #20]
 80010ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b4:	d102      	bne.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x8c>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f2      	bne.n	80010a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c8:	d101      	bne.n	80010ce <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e000      	b.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40007000 	.word	0x40007000
 80010dc:	20000000 	.word	0x20000000
 80010e0:	0a7c5ac5 	.word	0x0a7c5ac5
 80010e4:	cccccccd 	.word	0xcccccccd

080010e8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	e00a      	b.n	800111c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d103      	bne.n	8001118 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	e001      	b.n	800111c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001118:	2300      	movs	r3, #0
 800111a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800111c:	687b      	ldr	r3, [r7, #4]
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40007000 	.word	0x40007000

08001130 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	f000 bcc2 	b.w	8001ac8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001144:	4b99      	ldr	r3, [pc, #612]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800114e:	4b97      	ldr	r3, [pc, #604]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0310 	and.w	r3, r3, #16
 8001160:	2b00      	cmp	r3, #0
 8001162:	f000 80e9 	beq.w	8001338 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <HAL_RCC_OscConfig+0x4a>
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2b0c      	cmp	r3, #12
 8001170:	f040 8083 	bne.w	800127a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d17f      	bne.n	800127a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800117a:	4b8c      	ldr	r3, [pc, #560]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d006      	beq.n	8001194 <HAL_RCC_OscConfig+0x64>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	f000 bc9a 	b.w	8001ac8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001198:	4b84      	ldr	r3, [pc, #528]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <HAL_RCC_OscConfig+0x7e>
 80011a4:	4b81      	ldr	r3, [pc, #516]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ac:	e005      	b.n	80011ba <HAL_RCC_OscConfig+0x8a>
 80011ae:	4b7f      	ldr	r3, [pc, #508]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80011b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d224      	bcs.n	8001208 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fe72 	bl	8001eac <RCC_SetFlashLatencyFromMSIRange>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d002      	beq.n	80011d4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	f000 bc7a 	b.w	8001ac8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d4:	4b75      	ldr	r3, [pc, #468]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a74      	ldr	r2, [pc, #464]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b72      	ldr	r3, [pc, #456]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	496f      	ldr	r1, [pc, #444]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f2:	4b6e      	ldr	r3, [pc, #440]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1b      	ldr	r3, [r3, #32]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	496a      	ldr	r1, [pc, #424]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]
 8001206:	e026      	b.n	8001256 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001208:	4b68      	ldr	r3, [pc, #416]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a67      	ldr	r2, [pc, #412]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 800120e:	f043 0308 	orr.w	r3, r3, #8
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	4b65      	ldr	r3, [pc, #404]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	4962      	ldr	r1, [pc, #392]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001226:	4b61      	ldr	r3, [pc, #388]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	495d      	ldr	r1, [pc, #372]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 8001236:	4313      	orrs	r3, r2
 8001238:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d10a      	bne.n	8001256 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fe31 	bl	8001eac <RCC_SetFlashLatencyFromMSIRange>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	f000 bc39 	b.w	8001ac8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001256:	f000 fe15 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 800125a:	4603      	mov	r3, r0
 800125c:	4a54      	ldr	r2, [pc, #336]	; (80013b0 <HAL_RCC_OscConfig+0x280>)
 800125e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001260:	4b54      	ldr	r3, [pc, #336]	; (80013b4 <HAL_RCC_OscConfig+0x284>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fb61 	bl	800092c <HAL_InitTick>
 800126a:	4603      	mov	r3, r0
 800126c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d060      	beq.n	8001336 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	f000 bc27 	b.w	8001ac8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d039      	beq.n	80012f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001282:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a49      	ldr	r2, [pc, #292]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800128e:	f7ff fb9d 	bl	80009cc <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001294:	e00f      	b.n	80012b6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001296:	f7ff fb99 	bl	80009cc <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d908      	bls.n	80012b6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012a4:	4b41      	ldr	r3, [pc, #260]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	f000 bc09 	b.w	8001ac8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012b6:	4b3d      	ldr	r3, [pc, #244]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0e9      	beq.n	8001296 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c2:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a39      	ldr	r2, [pc, #228]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b37      	ldr	r3, [pc, #220]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	4934      	ldr	r1, [pc, #208]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e0:	4b32      	ldr	r3, [pc, #200]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	492f      	ldr	r1, [pc, #188]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
 80012f4:	e020      	b.n	8001338 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a2c      	ldr	r2, [pc, #176]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80012fc:	f023 0301 	bic.w	r3, r3, #1
 8001300:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001302:	f7ff fb63 	bl	80009cc <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001308:	e00e      	b.n	8001328 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800130a:	f7ff fb5f 	bl	80009cc <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d907      	bls.n	8001328 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e3cf      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001328:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1ea      	bne.n	800130a <HAL_RCC_OscConfig+0x1da>
 8001334:	e000      	b.n	8001338 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001336:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d07e      	beq.n	8001442 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b08      	cmp	r3, #8
 8001348:	d005      	beq.n	8001356 <HAL_RCC_OscConfig+0x226>
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	2b0c      	cmp	r3, #12
 800134e:	d10e      	bne.n	800136e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	2b03      	cmp	r3, #3
 8001354:	d10b      	bne.n	800136e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d06e      	beq.n	8001440 <HAL_RCC_OscConfig+0x310>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d16a      	bne.n	8001440 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e3ac      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x256>
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 800137e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	e024      	b.n	80013d0 <HAL_RCC_OscConfig+0x2a0>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800138e:	d113      	bne.n	80013b8 <HAL_RCC_OscConfig+0x288>
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a05      	ldr	r2, [pc, #20]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 8001396:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a02      	ldr	r2, [pc, #8]	; (80013ac <HAL_RCC_OscConfig+0x27c>)
 80013a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e012      	b.n	80013d0 <HAL_RCC_OscConfig+0x2a0>
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	20000000 	.word	0x20000000
 80013b4:	20000004 	.word	0x20000004
 80013b8:	4b8b      	ldr	r3, [pc, #556]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a8a      	ldr	r2, [pc, #552]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80013be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b88      	ldr	r3, [pc, #544]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a87      	ldr	r2, [pc, #540]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80013ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d019      	beq.n	800140c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff faf8 	bl	80009cc <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013de:	e00e      	b.n	80013fe <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e0:	f7ff faf4 	bl	80009cc <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	d907      	bls.n	80013fe <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ee:	4b7e      	ldr	r3, [pc, #504]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e364      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013fe:	4b7a      	ldr	r3, [pc, #488]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0ea      	beq.n	80013e0 <HAL_RCC_OscConfig+0x2b0>
 800140a:	e01a      	b.n	8001442 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fade 	bl	80009cc <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001412:	e00e      	b.n	8001432 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff fada 	bl	80009cc <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	; 0x64
 8001420:	d907      	bls.n	8001432 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001422:	4b71      	ldr	r3, [pc, #452]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e34a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001432:	4b6d      	ldr	r3, [pc, #436]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1ea      	bne.n	8001414 <HAL_RCC_OscConfig+0x2e4>
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d06c      	beq.n	8001528 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b04      	cmp	r3, #4
 8001452:	d005      	beq.n	8001460 <HAL_RCC_OscConfig+0x330>
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b0c      	cmp	r3, #12
 8001458:	d119      	bne.n	800148e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d116      	bne.n	800148e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001460:	4b61      	ldr	r3, [pc, #388]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_OscConfig+0x348>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e327      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001478:	4b5b      	ldr	r3, [pc, #364]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	061b      	lsls	r3, r3, #24
 8001486:	4958      	ldr	r1, [pc, #352]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800148c:	e04c      	b.n	8001528 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d029      	beq.n	80014ea <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001496:	4b54      	ldr	r3, [pc, #336]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a53      	ldr	r2, [pc, #332]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a2:	f7ff fa93 	bl	80009cc <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a8:	e00e      	b.n	80014c8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014aa:	f7ff fa8f 	bl	80009cc <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d907      	bls.n	80014c8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b8:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e2ff      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c8:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0ea      	beq.n	80014aa <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4b44      	ldr	r3, [pc, #272]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	061b      	lsls	r3, r3, #24
 80014e2:	4941      	ldr	r1, [pc, #260]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]
 80014e8:	e01e      	b.n	8001528 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ea:	4b3f      	ldr	r3, [pc, #252]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a3e      	ldr	r2, [pc, #248]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80014f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff fa69 	bl	80009cc <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014fc:	e00e      	b.n	800151c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff fa65 	bl	80009cc <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d907      	bls.n	800151c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800150c:	4b36      	ldr	r3, [pc, #216]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e2d5      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800151c:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1ea      	bne.n	80014fe <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d062      	beq.n	80015fa <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d038      	beq.n	80015ae <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d108      	bne.n	8001556 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 8001546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154a:	4a27      	ldr	r2, [pc, #156]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 800154c:	f023 0310 	bic.w	r3, r3, #16
 8001550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001554:	e007      	b.n	8001566 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 8001558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155c:	4a22      	ldr	r2, [pc, #136]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001566:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 8001568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800156c:	4a1e      	ldr	r2, [pc, #120]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7ff fa29 	bl	80009cc <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157c:	e00f      	b.n	800159e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157e:	f7ff fa25 	bl	80009cc <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b07      	cmp	r3, #7
 800158a:	d908      	bls.n	800159e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 800158e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e294      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80015a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0e8      	beq.n	800157e <HAL_RCC_OscConfig+0x44e>
 80015ac:	e025      	b.n	80015fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80015b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b4:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80015b6:	f023 0301 	bic.w	r3, r3, #1
 80015ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015be:	f7ff fa05 	bl	80009cc <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c4:	e012      	b.n	80015ec <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c6:	f7ff fa01 	bl	80009cc <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b07      	cmp	r3, #7
 80015d2:	d90b      	bls.n	80015ec <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <HAL_RCC_OscConfig+0x4b8>)
 80015d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d004      	beq.n	80015ec <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e270      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
 80015e6:	bf00      	nop
 80015e8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ec:	4ba8      	ldr	r3, [pc, #672]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 80015ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1e5      	bne.n	80015c6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 812d 	beq.w	8001862 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800160c:	4ba0      	ldr	r3, [pc, #640]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10d      	bne.n	8001634 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001618:	4b9d      	ldr	r3, [pc, #628]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	4a9c      	ldr	r2, [pc, #624]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 800161e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001622:	6593      	str	r3, [r2, #88]	; 0x58
 8001624:	4b9a      	ldr	r3, [pc, #616]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 8001626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001630:	2301      	movs	r3, #1
 8001632:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001634:	4b97      	ldr	r3, [pc, #604]	; (8001894 <HAL_RCC_OscConfig+0x764>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d11e      	bne.n	800167e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001640:	4b94      	ldr	r3, [pc, #592]	; (8001894 <HAL_RCC_OscConfig+0x764>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a93      	ldr	r2, [pc, #588]	; (8001894 <HAL_RCC_OscConfig+0x764>)
 8001646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164c:	f7ff f9be 	bl	80009cc <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001652:	e00e      	b.n	8001672 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001654:	f7ff f9ba 	bl	80009cc <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d907      	bls.n	8001672 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001662:	4b8c      	ldr	r3, [pc, #560]	; (8001894 <HAL_RCC_OscConfig+0x764>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e22a      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001672:	4b88      	ldr	r3, [pc, #544]	; (8001894 <HAL_RCC_OscConfig+0x764>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0ea      	beq.n	8001654 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d01f      	beq.n	80016ca <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	d010      	beq.n	80016b8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001696:	4b7e      	ldr	r3, [pc, #504]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 8001698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169c:	4a7c      	ldr	r2, [pc, #496]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016a6:	4b7a      	ldr	r3, [pc, #488]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 80016a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ac:	4a78      	ldr	r2, [pc, #480]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b6:	e018      	b.n	80016ea <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016b8:	4b75      	ldr	r3, [pc, #468]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 80016ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016be:	4a74      	ldr	r2, [pc, #464]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c8:	e00f      	b.n	80016ea <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80016ca:	4b71      	ldr	r3, [pc, #452]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 80016cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d0:	4a6f      	ldr	r2, [pc, #444]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016da:	4b6d      	ldr	r3, [pc, #436]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 80016dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e0:	4a6b      	ldr	r2, [pc, #428]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 80016e2:	f023 0304 	bic.w	r3, r3, #4
 80016e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d068      	beq.n	80017c4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f2:	f7ff f96b 	bl	80009cc <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f8:	e011      	b.n	800171e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fa:	f7ff f967 	bl	80009cc <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	f241 3288 	movw	r2, #5000	; 0x1388
 8001708:	4293      	cmp	r3, r2
 800170a:	d908      	bls.n	800171e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170c:	4b60      	ldr	r3, [pc, #384]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1d4      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800171e:	4b5c      	ldr	r3, [pc, #368]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 8001720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0e6      	beq.n	80016fa <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001734:	2b00      	cmp	r3, #0
 8001736:	d022      	beq.n	800177e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001738:	4b55      	ldr	r3, [pc, #340]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 800173a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173e:	4a54      	ldr	r2, [pc, #336]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 8001740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001748:	e011      	b.n	800176e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174a:	f7ff f93f 	bl	80009cc <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f241 3288 	movw	r2, #5000	; 0x1388
 8001758:	4293      	cmp	r3, r2
 800175a:	d908      	bls.n	800176e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800175c:	4b4c      	ldr	r3, [pc, #304]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 800175e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001762:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e1ac      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800176e:	4b48      	ldr	r3, [pc, #288]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 8001770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001774:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0e6      	beq.n	800174a <HAL_RCC_OscConfig+0x61a>
 800177c:	e068      	b.n	8001850 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800177e:	4b44      	ldr	r3, [pc, #272]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001784:	4a42      	ldr	r2, [pc, #264]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 8001786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800178a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800178e:	e011      	b.n	80017b4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff f91c 	bl	80009cc <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d908      	bls.n	80017b4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017a2:	4b3b      	ldr	r3, [pc, #236]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 80017a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e189      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80017b4:	4b36      	ldr	r3, [pc, #216]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 80017b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1e6      	bne.n	8001790 <HAL_RCC_OscConfig+0x660>
 80017c2:	e045      	b.n	8001850 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c4:	f7ff f902 	bl	80009cc <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017ca:	e011      	b.n	80017f0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017cc:	f7ff f8fe 	bl	80009cc <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017da:	4293      	cmp	r3, r2
 80017dc:	d908      	bls.n	80017f0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017de:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 80017e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e16b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f0:	4b27      	ldr	r3, [pc, #156]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 80017f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1e6      	bne.n	80017cc <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80017fe:	4b24      	ldr	r3, [pc, #144]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 8001800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001808:	2b00      	cmp	r3, #0
 800180a:	d021      	beq.n	8001850 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001812:	4a1f      	ldr	r2, [pc, #124]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 8001814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800181c:	e011      	b.n	8001842 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff f8d5 	bl	80009cc <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	f241 3288 	movw	r2, #5000	; 0x1388
 800182c:	4293      	cmp	r3, r2
 800182e:	d908      	bls.n	8001842 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 8001832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001836:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e142      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1e6      	bne.n	800181e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001850:	7ffb      	ldrb	r3, [r7, #31]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d105      	bne.n	8001862 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 800185c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001860:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0320 	and.w	r3, r3, #32
 800186a:	2b00      	cmp	r3, #0
 800186c:	d04f      	beq.n	800190e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	2b00      	cmp	r3, #0
 8001874:	d028      	beq.n	80018c8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 8001878:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800187c:	4a04      	ldr	r2, [pc, #16]	; (8001890 <HAL_RCC_OscConfig+0x760>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001886:	f7ff f8a1 	bl	80009cc <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800188c:	e014      	b.n	80018b8 <HAL_RCC_OscConfig+0x788>
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000
 8001894:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001898:	f7ff f898 	bl	80009cc <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d908      	bls.n	80018b8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018a6:	4b8a      	ldr	r3, [pc, #552]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 80018a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e107      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018b8:	4b85      	ldr	r3, [pc, #532]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 80018ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0e8      	beq.n	8001898 <HAL_RCC_OscConfig+0x768>
 80018c6:	e022      	b.n	800190e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018c8:	4b81      	ldr	r3, [pc, #516]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 80018ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ce:	4a80      	ldr	r2, [pc, #512]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d8:	f7ff f878 	bl	80009cc <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018de:	e00f      	b.n	8001900 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018e0:	f7ff f874 	bl	80009cc <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d908      	bls.n	8001900 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018ee:	4b78      	ldr	r3, [pc, #480]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 80018f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e0e3      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001900:	4b73      	ldr	r3, [pc, #460]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 8001902:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1e8      	bne.n	80018e0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 80d7 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001918:	4b6d      	ldr	r3, [pc, #436]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b0c      	cmp	r3, #12
 8001922:	f000 8091 	beq.w	8001a48 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	2b02      	cmp	r3, #2
 800192c:	d166      	bne.n	80019fc <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192e:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 8001934:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff f847 	bl	80009cc <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001940:	e00e      	b.n	8001960 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001942:	f7ff f843 	bl	80009cc <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d907      	bls.n	8001960 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001950:	4b5f      	ldr	r3, [pc, #380]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e0b3      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001960:	4b5b      	ldr	r3, [pc, #364]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1ea      	bne.n	8001942 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196c:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	4b58      	ldr	r3, [pc, #352]	; (8001ad4 <HAL_RCC_OscConfig+0x9a4>)
 8001972:	4013      	ands	r3, r2
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800197c:	3a01      	subs	r2, #1
 800197e:	0112      	lsls	r2, r2, #4
 8001980:	4311      	orrs	r1, r2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001986:	0212      	lsls	r2, r2, #8
 8001988:	4311      	orrs	r1, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800198e:	0852      	lsrs	r2, r2, #1
 8001990:	3a01      	subs	r2, #1
 8001992:	0552      	lsls	r2, r2, #21
 8001994:	4311      	orrs	r1, r2
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800199a:	0852      	lsrs	r2, r2, #1
 800199c:	3a01      	subs	r2, #1
 800199e:	0652      	lsls	r2, r2, #25
 80019a0:	4311      	orrs	r1, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019a6:	06d2      	lsls	r2, r2, #27
 80019a8:	430a      	orrs	r2, r1
 80019aa:	4949      	ldr	r1, [pc, #292]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b0:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019bc:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a43      	ldr	r2, [pc, #268]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff f800 	bl	80009cc <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	e00e      	b.n	80019ee <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7fe fffc 	bl	80009cc <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d907      	bls.n	80019ee <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019de:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e06c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ee:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d0ea      	beq.n	80019d0 <HAL_RCC_OscConfig+0x8a0>
 80019fa:	e064      	b.n	8001ac6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019fc:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a33      	ldr	r2, [pc, #204]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 8001a02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	f7fe ffe0 	bl	80009cc <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a0e:	e00e      	b.n	8001a2e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a10:	f7fe ffdc 	bl	80009cc <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d907      	bls.n	8001a2e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e04c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1ea      	bne.n	8001a10 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a3a:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	4924      	ldr	r1, [pc, #144]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <HAL_RCC_OscConfig+0x9a8>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	60cb      	str	r3, [r1, #12]
 8001a46:	e03e      	b.n	8001ac6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e039      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <HAL_RCC_OscConfig+0x9a0>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f003 0203 	and.w	r2, r3, #3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d12c      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a72:	3b01      	subs	r3, #1
 8001a74:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d123      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a84:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d11b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a94:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d113      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	085b      	lsrs	r3, r3, #1
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d109      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	3b01      	subs	r3, #1
 8001abc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e000      	b.n	8001ac8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	019f800c 	.word	0x019f800c
 8001ad8:	feeefffc 	.word	0xfeeefffc

08001adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e11c      	b.n	8001d2e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af4:	4b90      	ldr	r3, [pc, #576]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d910      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b02:	4b8d      	ldr	r3, [pc, #564]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 020f 	bic.w	r2, r3, #15
 8001b0a:	498b      	ldr	r1, [pc, #556]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b89      	ldr	r3, [pc, #548]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e104      	b.n	8001d2e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d010      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	4b81      	ldr	r3, [pc, #516]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d908      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b40:	4b7e      	ldr	r3, [pc, #504]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	497b      	ldr	r1, [pc, #492]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8085 	beq.w	8001c6a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d11f      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b68:	4b74      	ldr	r3, [pc, #464]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0da      	b.n	8001d2e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b78:	f000 f9fc 	bl	8001f74 <RCC_GetSysClockFreqFromPLLSource>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4a6f      	ldr	r2, [pc, #444]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d947      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b86:	4b6d      	ldr	r3, [pc, #436]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d141      	bne.n	8001c16 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b92:	4b6a      	ldr	r3, [pc, #424]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b9a:	4a68      	ldr	r2, [pc, #416]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ba0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e036      	b.n	8001c16 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb0:	4b62      	ldr	r3, [pc, #392]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d115      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0b6      	b.n	8001d2e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc8:	4b5c      	ldr	r3, [pc, #368]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0aa      	b.n	8001d2e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd8:	4b58      	ldr	r3, [pc, #352]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e0a2      	b.n	8001d2e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001be8:	f000 f8b0 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001bec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4a53      	ldr	r2, [pc, #332]	; (8001d40 <HAL_RCC_ClockConfig+0x264>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d90f      	bls.n	8001c16 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001bf6:	4b51      	ldr	r3, [pc, #324]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d109      	bne.n	8001c16 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c02:	4b4e      	ldr	r3, [pc, #312]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c0a:	4a4c      	ldr	r2, [pc, #304]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c10:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c16:	4b49      	ldr	r3, [pc, #292]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f023 0203 	bic.w	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4946      	ldr	r1, [pc, #280]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c28:	f7fe fed0 	bl	80009cc <HAL_GetTick>
 8001c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	e013      	b.n	8001c58 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c30:	f7fe fecc 	bl	80009cc <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d90a      	bls.n	8001c58 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 020c 	and.w	r2, r3, #12
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e06a      	b.n	8001d2e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c58:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 020c 	and.w	r2, r3, #12
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d1e2      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b80      	cmp	r3, #128	; 0x80
 8001c6e:	d105      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001c70:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a31      	ldr	r2, [pc, #196]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c7a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d010      	beq.n	8001caa <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d208      	bcs.n	8001caa <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c98:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	4925      	ldr	r1, [pc, #148]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d210      	bcs.n	8001cda <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 020f 	bic.w	r2, r3, #15
 8001cc0:	491d      	ldr	r1, [pc, #116]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_RCC_ClockConfig+0x25c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e029      	b.n	8001d2e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d008      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	4912      	ldr	r1, [pc, #72]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	490a      	ldr	r1, [pc, #40]	; (8001d3c <HAL_RCC_ClockConfig+0x260>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d18:	f000 f8b4 	bl	8001e84 <HAL_RCC_GetHCLKFreq>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_RCC_ClockConfig+0x268>)
 8001d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_ClockConfig+0x26c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fe00 	bl	800092c <HAL_InitTick>
 8001d2c:	4603      	mov	r3, r0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	04c4b400 	.word	0x04c4b400
 8001d44:	20000000 	.word	0x20000000
 8001d48:	20000004 	.word	0x20000004

08001d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d5a:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d64:	4b44      	ldr	r3, [pc, #272]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x34>
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d121      	bne.n	8001dbe <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d11e      	bne.n	8001dbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d80:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d107      	bne.n	8001d9c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d8c:	4b3a      	ldr	r3, [pc, #232]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	f003 030f 	and.w	r3, r3, #15
 8001d98:	61fb      	str	r3, [r7, #28]
 8001d9a:	e005      	b.n	8001da8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d9c:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8001da8:	4a34      	ldr	r2, [pc, #208]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x130>)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10d      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d102      	bne.n	8001dca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x134>)
 8001dc6:	61bb      	str	r3, [r7, #24]
 8001dc8:	e004      	b.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dd0:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x134>)
 8001dd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d146      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001dda:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3301      	adds	r3, #1
 8001df0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d003      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0xb4>
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	d00d      	beq.n	8001e1a <HAL_RCC_GetSysClockFreq+0xce>
 8001dfe:	e019      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e00:	4a1f      	ldr	r2, [pc, #124]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x134>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e0a:	68d2      	ldr	r2, [r2, #12]
 8001e0c:	0a12      	lsrs	r2, r2, #8
 8001e0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	617b      	str	r3, [r7, #20]
        break;
 8001e18:	e019      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e1a:	4a19      	ldr	r2, [pc, #100]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x134>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4a15      	ldr	r2, [pc, #84]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e24:	68d2      	ldr	r2, [r2, #12]
 8001e26:	0a12      	lsrs	r2, r2, #8
 8001e28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	617b      	str	r3, [r7, #20]
        break;
 8001e32:	e00c      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e34:	69fa      	ldr	r2, [r7, #28]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e3e:	68d2      	ldr	r2, [r2, #12]
 8001e40:	0a12      	lsrs	r2, r2, #8
 8001e42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	617b      	str	r3, [r7, #20]
        break;
 8001e4c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	0e5b      	lsrs	r3, r3, #25
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e68:	69bb      	ldr	r3, [r7, #24]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	08002f8c 	.word	0x08002f8c
 8001e80:	00f42400 	.word	0x00f42400

08001e84 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8001e88:	f7ff ff60 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RCC_GetHCLKFreq+0x20>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	091b      	lsrs	r3, r3, #4
 8001e94:	f003 030f 	and.w	r3, r3, #15
 8001e98:	4903      	ldr	r1, [pc, #12]	; (8001ea8 <HAL_RCC_GetHCLKFreq+0x24>)
 8001e9a:	5ccb      	ldrb	r3, [r1, r3]
 8001e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	08002f7c 	.word	0x08002f7c

08001eac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eb8:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ec4:	f7ff f8a6 	bl	8001014 <HAL_PWREx_GetVoltageRange>
 8001ec8:	6138      	str	r0, [r7, #16]
 8001eca:	e014      	b.n	8001ef6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ecc:	4b27      	ldr	r3, [pc, #156]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed0:	4a26      	ldr	r2, [pc, #152]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed8:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ee4:	f7ff f896 	bl	8001014 <HAL_PWREx_GetVoltageRange>
 8001ee8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	4a1f      	ldr	r2, [pc, #124]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8001ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f02:	d10b      	bne.n	8001f1c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b80      	cmp	r3, #128	; 0x80
 8001f08:	d919      	bls.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2ba0      	cmp	r3, #160	; 0xa0
 8001f0e:	d902      	bls.n	8001f16 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f10:	2302      	movs	r3, #2
 8001f12:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001f14:	e013      	b.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f16:	2301      	movs	r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8001f1a:	e010      	b.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b80      	cmp	r3, #128	; 0x80
 8001f20:	d902      	bls.n	8001f28 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f22:	2303      	movs	r3, #3
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	e00a      	b.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b80      	cmp	r3, #128	; 0x80
 8001f2c:	d102      	bne.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f2e:	2302      	movs	r3, #2
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	e004      	b.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b70      	cmp	r3, #112	; 0x70
 8001f38:	d101      	bne.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 020f 	bic.w	r2, r3, #15
 8001f46:	490a      	ldr	r1, [pc, #40]	; (8001f70 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40022000 	.word	0x40022000

08001f74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f7a:	4b31      	ldr	r3, [pc, #196]	; (8002040 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f84:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3301      	adds	r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d015      	beq.n	8001fc4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b03      	cmp	r3, #3
 8001f9c:	d839      	bhi.n	8002012 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d01c      	beq.n	8001fde <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d133      	bne.n	8002012 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001faa:	4a26      	ldr	r2, [pc, #152]	; (8002044 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4a23      	ldr	r2, [pc, #140]	; (8002040 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001fb4:	68d2      	ldr	r2, [r2, #12]
 8001fb6:	0a12      	lsrs	r2, r2, #8
 8001fb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fbc:	fb02 f303 	mul.w	r3, r2, r3
 8001fc0:	613b      	str	r3, [r7, #16]
      break;
 8001fc2:	e029      	b.n	8002018 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fc4:	4a1f      	ldr	r2, [pc, #124]	; (8002044 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001fce:	68d2      	ldr	r2, [r2, #12]
 8001fd0:	0a12      	lsrs	r2, r2, #8
 8001fd2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
 8001fda:	613b      	str	r3, [r7, #16]
      break;
 8001fdc:	e01c      	b.n	8002018 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fde:	4b18      	ldr	r3, [pc, #96]	; (8002040 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d107      	bne.n	8001ffa <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e005      	b.n	8002006 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8002006:	4a10      	ldr	r2, [pc, #64]	; (8002048 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	613b      	str	r3, [r7, #16]
        break;
 8002010:	e002      	b.n	8002018 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
      break;
 8002016:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002018:	4b09      	ldr	r3, [pc, #36]	; (8002040 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	0e5b      	lsrs	r3, r3, #25
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	3301      	adds	r3, #1
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002032:	683b      	ldr	r3, [r7, #0]
}
 8002034:	4618      	mov	r0, r3
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	40021000 	.word	0x40021000
 8002044:	00f42400 	.word	0x00f42400
 8002048:	08002f8c 	.word	0x08002f8c

0800204c <std>:
 800204c:	2300      	movs	r3, #0
 800204e:	b510      	push	{r4, lr}
 8002050:	4604      	mov	r4, r0
 8002052:	6083      	str	r3, [r0, #8]
 8002054:	8181      	strh	r1, [r0, #12]
 8002056:	4619      	mov	r1, r3
 8002058:	6643      	str	r3, [r0, #100]	; 0x64
 800205a:	81c2      	strh	r2, [r0, #14]
 800205c:	2208      	movs	r2, #8
 800205e:	6183      	str	r3, [r0, #24]
 8002060:	e9c0 3300 	strd	r3, r3, [r0]
 8002064:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002068:	305c      	adds	r0, #92	; 0x5c
 800206a:	f000 f906 	bl	800227a <memset>
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <std+0x58>)
 8002070:	6224      	str	r4, [r4, #32]
 8002072:	6263      	str	r3, [r4, #36]	; 0x24
 8002074:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <std+0x5c>)
 8002076:	62a3      	str	r3, [r4, #40]	; 0x28
 8002078:	4b0c      	ldr	r3, [pc, #48]	; (80020ac <std+0x60>)
 800207a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <std+0x64>)
 800207e:	6323      	str	r3, [r4, #48]	; 0x30
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <std+0x68>)
 8002082:	429c      	cmp	r4, r3
 8002084:	d006      	beq.n	8002094 <std+0x48>
 8002086:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800208a:	4294      	cmp	r4, r2
 800208c:	d002      	beq.n	8002094 <std+0x48>
 800208e:	33d0      	adds	r3, #208	; 0xd0
 8002090:	429c      	cmp	r4, r3
 8002092:	d105      	bne.n	80020a0 <std+0x54>
 8002094:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800209c:	f000 b966 	b.w	800236c <__retarget_lock_init_recursive>
 80020a0:	bd10      	pop	{r4, pc}
 80020a2:	bf00      	nop
 80020a4:	080021f5 	.word	0x080021f5
 80020a8:	08002217 	.word	0x08002217
 80020ac:	0800224f 	.word	0x0800224f
 80020b0:	08002273 	.word	0x08002273
 80020b4:	20000090 	.word	0x20000090

080020b8 <stdio_exit_handler>:
 80020b8:	4a02      	ldr	r2, [pc, #8]	; (80020c4 <stdio_exit_handler+0xc>)
 80020ba:	4903      	ldr	r1, [pc, #12]	; (80020c8 <stdio_exit_handler+0x10>)
 80020bc:	4803      	ldr	r0, [pc, #12]	; (80020cc <stdio_exit_handler+0x14>)
 80020be:	f000 b869 	b.w	8002194 <_fwalk_sglue>
 80020c2:	bf00      	nop
 80020c4:	2000000c 	.word	0x2000000c
 80020c8:	08002c19 	.word	0x08002c19
 80020cc:	20000018 	.word	0x20000018

080020d0 <cleanup_stdio>:
 80020d0:	6841      	ldr	r1, [r0, #4]
 80020d2:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <cleanup_stdio+0x34>)
 80020d4:	4299      	cmp	r1, r3
 80020d6:	b510      	push	{r4, lr}
 80020d8:	4604      	mov	r4, r0
 80020da:	d001      	beq.n	80020e0 <cleanup_stdio+0x10>
 80020dc:	f000 fd9c 	bl	8002c18 <_fflush_r>
 80020e0:	68a1      	ldr	r1, [r4, #8]
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <cleanup_stdio+0x38>)
 80020e4:	4299      	cmp	r1, r3
 80020e6:	d002      	beq.n	80020ee <cleanup_stdio+0x1e>
 80020e8:	4620      	mov	r0, r4
 80020ea:	f000 fd95 	bl	8002c18 <_fflush_r>
 80020ee:	68e1      	ldr	r1, [r4, #12]
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <cleanup_stdio+0x3c>)
 80020f2:	4299      	cmp	r1, r3
 80020f4:	d004      	beq.n	8002100 <cleanup_stdio+0x30>
 80020f6:	4620      	mov	r0, r4
 80020f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020fc:	f000 bd8c 	b.w	8002c18 <_fflush_r>
 8002100:	bd10      	pop	{r4, pc}
 8002102:	bf00      	nop
 8002104:	20000090 	.word	0x20000090
 8002108:	200000f8 	.word	0x200000f8
 800210c:	20000160 	.word	0x20000160

08002110 <global_stdio_init.part.0>:
 8002110:	b510      	push	{r4, lr}
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <global_stdio_init.part.0+0x30>)
 8002114:	2104      	movs	r1, #4
 8002116:	4c0b      	ldr	r4, [pc, #44]	; (8002144 <global_stdio_init.part.0+0x34>)
 8002118:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <global_stdio_init.part.0+0x38>)
 800211a:	4620      	mov	r0, r4
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	2200      	movs	r2, #0
 8002120:	f7ff ff94 	bl	800204c <std>
 8002124:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002128:	2201      	movs	r2, #1
 800212a:	2109      	movs	r1, #9
 800212c:	f7ff ff8e 	bl	800204c <std>
 8002130:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002134:	2202      	movs	r2, #2
 8002136:	2112      	movs	r1, #18
 8002138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800213c:	f7ff bf86 	b.w	800204c <std>
 8002140:	200001c8 	.word	0x200001c8
 8002144:	20000090 	.word	0x20000090
 8002148:	080020b9 	.word	0x080020b9

0800214c <__sfp_lock_acquire>:
 800214c:	4801      	ldr	r0, [pc, #4]	; (8002154 <__sfp_lock_acquire+0x8>)
 800214e:	f000 b90e 	b.w	800236e <__retarget_lock_acquire_recursive>
 8002152:	bf00      	nop
 8002154:	200001d1 	.word	0x200001d1

08002158 <__sfp_lock_release>:
 8002158:	4801      	ldr	r0, [pc, #4]	; (8002160 <__sfp_lock_release+0x8>)
 800215a:	f000 b909 	b.w	8002370 <__retarget_lock_release_recursive>
 800215e:	bf00      	nop
 8002160:	200001d1 	.word	0x200001d1

08002164 <__sinit>:
 8002164:	b510      	push	{r4, lr}
 8002166:	4604      	mov	r4, r0
 8002168:	f7ff fff0 	bl	800214c <__sfp_lock_acquire>
 800216c:	6a23      	ldr	r3, [r4, #32]
 800216e:	b11b      	cbz	r3, 8002178 <__sinit+0x14>
 8002170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002174:	f7ff bff0 	b.w	8002158 <__sfp_lock_release>
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <__sinit+0x28>)
 800217a:	6223      	str	r3, [r4, #32]
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <__sinit+0x2c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f5      	bne.n	8002170 <__sinit+0xc>
 8002184:	f7ff ffc4 	bl	8002110 <global_stdio_init.part.0>
 8002188:	e7f2      	b.n	8002170 <__sinit+0xc>
 800218a:	bf00      	nop
 800218c:	080020d1 	.word	0x080020d1
 8002190:	200001c8 	.word	0x200001c8

08002194 <_fwalk_sglue>:
 8002194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002198:	4607      	mov	r7, r0
 800219a:	4688      	mov	r8, r1
 800219c:	4614      	mov	r4, r2
 800219e:	2600      	movs	r6, #0
 80021a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80021a4:	f1b9 0901 	subs.w	r9, r9, #1
 80021a8:	d505      	bpl.n	80021b6 <_fwalk_sglue+0x22>
 80021aa:	6824      	ldr	r4, [r4, #0]
 80021ac:	2c00      	cmp	r4, #0
 80021ae:	d1f7      	bne.n	80021a0 <_fwalk_sglue+0xc>
 80021b0:	4630      	mov	r0, r6
 80021b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021b6:	89ab      	ldrh	r3, [r5, #12]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d907      	bls.n	80021cc <_fwalk_sglue+0x38>
 80021bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80021c0:	3301      	adds	r3, #1
 80021c2:	d003      	beq.n	80021cc <_fwalk_sglue+0x38>
 80021c4:	4629      	mov	r1, r5
 80021c6:	4638      	mov	r0, r7
 80021c8:	47c0      	blx	r8
 80021ca:	4306      	orrs	r6, r0
 80021cc:	3568      	adds	r5, #104	; 0x68
 80021ce:	e7e9      	b.n	80021a4 <_fwalk_sglue+0x10>

080021d0 <iprintf>:
 80021d0:	b40f      	push	{r0, r1, r2, r3}
 80021d2:	b507      	push	{r0, r1, r2, lr}
 80021d4:	4906      	ldr	r1, [pc, #24]	; (80021f0 <iprintf+0x20>)
 80021d6:	ab04      	add	r3, sp, #16
 80021d8:	6808      	ldr	r0, [r1, #0]
 80021da:	f853 2b04 	ldr.w	r2, [r3], #4
 80021de:	6881      	ldr	r1, [r0, #8]
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	f000 f9e9 	bl	80025b8 <_vfiprintf_r>
 80021e6:	b003      	add	sp, #12
 80021e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80021ec:	b004      	add	sp, #16
 80021ee:	4770      	bx	lr
 80021f0:	20000064 	.word	0x20000064

080021f4 <__sread>:
 80021f4:	b510      	push	{r4, lr}
 80021f6:	460c      	mov	r4, r1
 80021f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021fc:	f000 f868 	bl	80022d0 <_read_r>
 8002200:	2800      	cmp	r0, #0
 8002202:	bfab      	itete	ge
 8002204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002206:	89a3      	ldrhlt	r3, [r4, #12]
 8002208:	181b      	addge	r3, r3, r0
 800220a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800220e:	bfac      	ite	ge
 8002210:	6563      	strge	r3, [r4, #84]	; 0x54
 8002212:	81a3      	strhlt	r3, [r4, #12]
 8002214:	bd10      	pop	{r4, pc}

08002216 <__swrite>:
 8002216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800221a:	461f      	mov	r7, r3
 800221c:	898b      	ldrh	r3, [r1, #12]
 800221e:	4605      	mov	r5, r0
 8002220:	460c      	mov	r4, r1
 8002222:	05db      	lsls	r3, r3, #23
 8002224:	4616      	mov	r6, r2
 8002226:	d505      	bpl.n	8002234 <__swrite+0x1e>
 8002228:	2302      	movs	r3, #2
 800222a:	2200      	movs	r2, #0
 800222c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002230:	f000 f83c 	bl	80022ac <_lseek_r>
 8002234:	89a3      	ldrh	r3, [r4, #12]
 8002236:	4632      	mov	r2, r6
 8002238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800223c:	4628      	mov	r0, r5
 800223e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002242:	81a3      	strh	r3, [r4, #12]
 8002244:	463b      	mov	r3, r7
 8002246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800224a:	f000 b853 	b.w	80022f4 <_write_r>

0800224e <__sseek>:
 800224e:	b510      	push	{r4, lr}
 8002250:	460c      	mov	r4, r1
 8002252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002256:	f000 f829 	bl	80022ac <_lseek_r>
 800225a:	1c43      	adds	r3, r0, #1
 800225c:	89a3      	ldrh	r3, [r4, #12]
 800225e:	bf15      	itete	ne
 8002260:	6560      	strne	r0, [r4, #84]	; 0x54
 8002262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800226a:	81a3      	strheq	r3, [r4, #12]
 800226c:	bf18      	it	ne
 800226e:	81a3      	strhne	r3, [r4, #12]
 8002270:	bd10      	pop	{r4, pc}

08002272 <__sclose>:
 8002272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002276:	f000 b809 	b.w	800228c <_close_r>

0800227a <memset>:
 800227a:	4402      	add	r2, r0
 800227c:	4603      	mov	r3, r0
 800227e:	4293      	cmp	r3, r2
 8002280:	d100      	bne.n	8002284 <memset+0xa>
 8002282:	4770      	bx	lr
 8002284:	f803 1b01 	strb.w	r1, [r3], #1
 8002288:	e7f9      	b.n	800227e <memset+0x4>
	...

0800228c <_close_r>:
 800228c:	b538      	push	{r3, r4, r5, lr}
 800228e:	2300      	movs	r3, #0
 8002290:	4d05      	ldr	r5, [pc, #20]	; (80022a8 <_close_r+0x1c>)
 8002292:	4604      	mov	r4, r0
 8002294:	4608      	mov	r0, r1
 8002296:	602b      	str	r3, [r5, #0]
 8002298:	f7fe f9db 	bl	8000652 <_close>
 800229c:	1c43      	adds	r3, r0, #1
 800229e:	d102      	bne.n	80022a6 <_close_r+0x1a>
 80022a0:	682b      	ldr	r3, [r5, #0]
 80022a2:	b103      	cbz	r3, 80022a6 <_close_r+0x1a>
 80022a4:	6023      	str	r3, [r4, #0]
 80022a6:	bd38      	pop	{r3, r4, r5, pc}
 80022a8:	200001cc 	.word	0x200001cc

080022ac <_lseek_r>:
 80022ac:	b538      	push	{r3, r4, r5, lr}
 80022ae:	4604      	mov	r4, r0
 80022b0:	4d06      	ldr	r5, [pc, #24]	; (80022cc <_lseek_r+0x20>)
 80022b2:	4608      	mov	r0, r1
 80022b4:	4611      	mov	r1, r2
 80022b6:	2200      	movs	r2, #0
 80022b8:	602a      	str	r2, [r5, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	f7fe f9f0 	bl	80006a0 <_lseek>
 80022c0:	1c43      	adds	r3, r0, #1
 80022c2:	d102      	bne.n	80022ca <_lseek_r+0x1e>
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	b103      	cbz	r3, 80022ca <_lseek_r+0x1e>
 80022c8:	6023      	str	r3, [r4, #0]
 80022ca:	bd38      	pop	{r3, r4, r5, pc}
 80022cc:	200001cc 	.word	0x200001cc

080022d0 <_read_r>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	4604      	mov	r4, r0
 80022d4:	4d06      	ldr	r5, [pc, #24]	; (80022f0 <_read_r+0x20>)
 80022d6:	4608      	mov	r0, r1
 80022d8:	4611      	mov	r1, r2
 80022da:	2200      	movs	r2, #0
 80022dc:	602a      	str	r2, [r5, #0]
 80022de:	461a      	mov	r2, r3
 80022e0:	f7fe f97e 	bl	80005e0 <_read>
 80022e4:	1c43      	adds	r3, r0, #1
 80022e6:	d102      	bne.n	80022ee <_read_r+0x1e>
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	b103      	cbz	r3, 80022ee <_read_r+0x1e>
 80022ec:	6023      	str	r3, [r4, #0]
 80022ee:	bd38      	pop	{r3, r4, r5, pc}
 80022f0:	200001cc 	.word	0x200001cc

080022f4 <_write_r>:
 80022f4:	b538      	push	{r3, r4, r5, lr}
 80022f6:	4604      	mov	r4, r0
 80022f8:	4d06      	ldr	r5, [pc, #24]	; (8002314 <_write_r+0x20>)
 80022fa:	4608      	mov	r0, r1
 80022fc:	4611      	mov	r1, r2
 80022fe:	2200      	movs	r2, #0
 8002300:	602a      	str	r2, [r5, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	f7fe f989 	bl	800061a <_write>
 8002308:	1c43      	adds	r3, r0, #1
 800230a:	d102      	bne.n	8002312 <_write_r+0x1e>
 800230c:	682b      	ldr	r3, [r5, #0]
 800230e:	b103      	cbz	r3, 8002312 <_write_r+0x1e>
 8002310:	6023      	str	r3, [r4, #0]
 8002312:	bd38      	pop	{r3, r4, r5, pc}
 8002314:	200001cc 	.word	0x200001cc

08002318 <__errno>:
 8002318:	4b01      	ldr	r3, [pc, #4]	; (8002320 <__errno+0x8>)
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000064 	.word	0x20000064

08002324 <__libc_init_array>:
 8002324:	b570      	push	{r4, r5, r6, lr}
 8002326:	4d0d      	ldr	r5, [pc, #52]	; (800235c <__libc_init_array+0x38>)
 8002328:	2600      	movs	r6, #0
 800232a:	4c0d      	ldr	r4, [pc, #52]	; (8002360 <__libc_init_array+0x3c>)
 800232c:	1b64      	subs	r4, r4, r5
 800232e:	10a4      	asrs	r4, r4, #2
 8002330:	42a6      	cmp	r6, r4
 8002332:	d109      	bne.n	8002348 <__libc_init_array+0x24>
 8002334:	4d0b      	ldr	r5, [pc, #44]	; (8002364 <__libc_init_array+0x40>)
 8002336:	2600      	movs	r6, #0
 8002338:	4c0b      	ldr	r4, [pc, #44]	; (8002368 <__libc_init_array+0x44>)
 800233a:	f000 fdcd 	bl	8002ed8 <_init>
 800233e:	1b64      	subs	r4, r4, r5
 8002340:	10a4      	asrs	r4, r4, #2
 8002342:	42a6      	cmp	r6, r4
 8002344:	d105      	bne.n	8002352 <__libc_init_array+0x2e>
 8002346:	bd70      	pop	{r4, r5, r6, pc}
 8002348:	f855 3b04 	ldr.w	r3, [r5], #4
 800234c:	3601      	adds	r6, #1
 800234e:	4798      	blx	r3
 8002350:	e7ee      	b.n	8002330 <__libc_init_array+0xc>
 8002352:	f855 3b04 	ldr.w	r3, [r5], #4
 8002356:	3601      	adds	r6, #1
 8002358:	4798      	blx	r3
 800235a:	e7f2      	b.n	8002342 <__libc_init_array+0x1e>
 800235c:	08003000 	.word	0x08003000
 8002360:	08003000 	.word	0x08003000
 8002364:	08003000 	.word	0x08003000
 8002368:	08003004 	.word	0x08003004

0800236c <__retarget_lock_init_recursive>:
 800236c:	4770      	bx	lr

0800236e <__retarget_lock_acquire_recursive>:
 800236e:	4770      	bx	lr

08002370 <__retarget_lock_release_recursive>:
 8002370:	4770      	bx	lr
	...

08002374 <_free_r>:
 8002374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002376:	2900      	cmp	r1, #0
 8002378:	d043      	beq.n	8002402 <_free_r+0x8e>
 800237a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800237e:	1f0c      	subs	r4, r1, #4
 8002380:	9001      	str	r0, [sp, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	bfb8      	it	lt
 8002386:	18e4      	addlt	r4, r4, r3
 8002388:	f000 f8e0 	bl	800254c <__malloc_lock>
 800238c:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <_free_r+0x94>)
 800238e:	9801      	ldr	r0, [sp, #4]
 8002390:	6813      	ldr	r3, [r2, #0]
 8002392:	b933      	cbnz	r3, 80023a2 <_free_r+0x2e>
 8002394:	6063      	str	r3, [r4, #4]
 8002396:	6014      	str	r4, [r2, #0]
 8002398:	b003      	add	sp, #12
 800239a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800239e:	f000 b8db 	b.w	8002558 <__malloc_unlock>
 80023a2:	42a3      	cmp	r3, r4
 80023a4:	d908      	bls.n	80023b8 <_free_r+0x44>
 80023a6:	6825      	ldr	r5, [r4, #0]
 80023a8:	1961      	adds	r1, r4, r5
 80023aa:	428b      	cmp	r3, r1
 80023ac:	bf01      	itttt	eq
 80023ae:	6819      	ldreq	r1, [r3, #0]
 80023b0:	685b      	ldreq	r3, [r3, #4]
 80023b2:	1949      	addeq	r1, r1, r5
 80023b4:	6021      	streq	r1, [r4, #0]
 80023b6:	e7ed      	b.n	8002394 <_free_r+0x20>
 80023b8:	461a      	mov	r2, r3
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	b10b      	cbz	r3, 80023c2 <_free_r+0x4e>
 80023be:	42a3      	cmp	r3, r4
 80023c0:	d9fa      	bls.n	80023b8 <_free_r+0x44>
 80023c2:	6811      	ldr	r1, [r2, #0]
 80023c4:	1855      	adds	r5, r2, r1
 80023c6:	42a5      	cmp	r5, r4
 80023c8:	d10b      	bne.n	80023e2 <_free_r+0x6e>
 80023ca:	6824      	ldr	r4, [r4, #0]
 80023cc:	4421      	add	r1, r4
 80023ce:	1854      	adds	r4, r2, r1
 80023d0:	6011      	str	r1, [r2, #0]
 80023d2:	42a3      	cmp	r3, r4
 80023d4:	d1e0      	bne.n	8002398 <_free_r+0x24>
 80023d6:	681c      	ldr	r4, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	440c      	add	r4, r1
 80023dc:	6053      	str	r3, [r2, #4]
 80023de:	6014      	str	r4, [r2, #0]
 80023e0:	e7da      	b.n	8002398 <_free_r+0x24>
 80023e2:	d902      	bls.n	80023ea <_free_r+0x76>
 80023e4:	230c      	movs	r3, #12
 80023e6:	6003      	str	r3, [r0, #0]
 80023e8:	e7d6      	b.n	8002398 <_free_r+0x24>
 80023ea:	6825      	ldr	r5, [r4, #0]
 80023ec:	1961      	adds	r1, r4, r5
 80023ee:	428b      	cmp	r3, r1
 80023f0:	bf02      	ittt	eq
 80023f2:	6819      	ldreq	r1, [r3, #0]
 80023f4:	685b      	ldreq	r3, [r3, #4]
 80023f6:	1949      	addeq	r1, r1, r5
 80023f8:	6063      	str	r3, [r4, #4]
 80023fa:	bf08      	it	eq
 80023fc:	6021      	streq	r1, [r4, #0]
 80023fe:	6054      	str	r4, [r2, #4]
 8002400:	e7ca      	b.n	8002398 <_free_r+0x24>
 8002402:	b003      	add	sp, #12
 8002404:	bd30      	pop	{r4, r5, pc}
 8002406:	bf00      	nop
 8002408:	200001d4 	.word	0x200001d4

0800240c <sbrk_aligned>:
 800240c:	b570      	push	{r4, r5, r6, lr}
 800240e:	4e0e      	ldr	r6, [pc, #56]	; (8002448 <sbrk_aligned+0x3c>)
 8002410:	460c      	mov	r4, r1
 8002412:	4605      	mov	r5, r0
 8002414:	6831      	ldr	r1, [r6, #0]
 8002416:	b911      	cbnz	r1, 800241e <sbrk_aligned+0x12>
 8002418:	f000 fcbc 	bl	8002d94 <_sbrk_r>
 800241c:	6030      	str	r0, [r6, #0]
 800241e:	4621      	mov	r1, r4
 8002420:	4628      	mov	r0, r5
 8002422:	f000 fcb7 	bl	8002d94 <_sbrk_r>
 8002426:	1c43      	adds	r3, r0, #1
 8002428:	d00a      	beq.n	8002440 <sbrk_aligned+0x34>
 800242a:	1cc4      	adds	r4, r0, #3
 800242c:	f024 0403 	bic.w	r4, r4, #3
 8002430:	42a0      	cmp	r0, r4
 8002432:	d007      	beq.n	8002444 <sbrk_aligned+0x38>
 8002434:	1a21      	subs	r1, r4, r0
 8002436:	4628      	mov	r0, r5
 8002438:	f000 fcac 	bl	8002d94 <_sbrk_r>
 800243c:	3001      	adds	r0, #1
 800243e:	d101      	bne.n	8002444 <sbrk_aligned+0x38>
 8002440:	f04f 34ff 	mov.w	r4, #4294967295
 8002444:	4620      	mov	r0, r4
 8002446:	bd70      	pop	{r4, r5, r6, pc}
 8002448:	200001d8 	.word	0x200001d8

0800244c <_malloc_r>:
 800244c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002450:	1ccd      	adds	r5, r1, #3
 8002452:	4607      	mov	r7, r0
 8002454:	f025 0503 	bic.w	r5, r5, #3
 8002458:	3508      	adds	r5, #8
 800245a:	2d0c      	cmp	r5, #12
 800245c:	bf38      	it	cc
 800245e:	250c      	movcc	r5, #12
 8002460:	2d00      	cmp	r5, #0
 8002462:	db01      	blt.n	8002468 <_malloc_r+0x1c>
 8002464:	42a9      	cmp	r1, r5
 8002466:	d905      	bls.n	8002474 <_malloc_r+0x28>
 8002468:	230c      	movs	r3, #12
 800246a:	2600      	movs	r6, #0
 800246c:	603b      	str	r3, [r7, #0]
 800246e:	4630      	mov	r0, r6
 8002470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002474:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002548 <_malloc_r+0xfc>
 8002478:	f000 f868 	bl	800254c <__malloc_lock>
 800247c:	f8d8 3000 	ldr.w	r3, [r8]
 8002480:	461c      	mov	r4, r3
 8002482:	bb5c      	cbnz	r4, 80024dc <_malloc_r+0x90>
 8002484:	4629      	mov	r1, r5
 8002486:	4638      	mov	r0, r7
 8002488:	f7ff ffc0 	bl	800240c <sbrk_aligned>
 800248c:	1c43      	adds	r3, r0, #1
 800248e:	4604      	mov	r4, r0
 8002490:	d155      	bne.n	800253e <_malloc_r+0xf2>
 8002492:	f8d8 4000 	ldr.w	r4, [r8]
 8002496:	4626      	mov	r6, r4
 8002498:	2e00      	cmp	r6, #0
 800249a:	d145      	bne.n	8002528 <_malloc_r+0xdc>
 800249c:	2c00      	cmp	r4, #0
 800249e:	d048      	beq.n	8002532 <_malloc_r+0xe6>
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	4631      	mov	r1, r6
 80024a4:	4638      	mov	r0, r7
 80024a6:	eb04 0903 	add.w	r9, r4, r3
 80024aa:	f000 fc73 	bl	8002d94 <_sbrk_r>
 80024ae:	4581      	cmp	r9, r0
 80024b0:	d13f      	bne.n	8002532 <_malloc_r+0xe6>
 80024b2:	6821      	ldr	r1, [r4, #0]
 80024b4:	4638      	mov	r0, r7
 80024b6:	1a6d      	subs	r5, r5, r1
 80024b8:	4629      	mov	r1, r5
 80024ba:	f7ff ffa7 	bl	800240c <sbrk_aligned>
 80024be:	3001      	adds	r0, #1
 80024c0:	d037      	beq.n	8002532 <_malloc_r+0xe6>
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	442b      	add	r3, r5
 80024c6:	6023      	str	r3, [r4, #0]
 80024c8:	f8d8 3000 	ldr.w	r3, [r8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d038      	beq.n	8002542 <_malloc_r+0xf6>
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	42a2      	cmp	r2, r4
 80024d4:	d12b      	bne.n	800252e <_malloc_r+0xe2>
 80024d6:	2200      	movs	r2, #0
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	e00f      	b.n	80024fc <_malloc_r+0xb0>
 80024dc:	6822      	ldr	r2, [r4, #0]
 80024de:	1b52      	subs	r2, r2, r5
 80024e0:	d41f      	bmi.n	8002522 <_malloc_r+0xd6>
 80024e2:	2a0b      	cmp	r2, #11
 80024e4:	d917      	bls.n	8002516 <_malloc_r+0xca>
 80024e6:	1961      	adds	r1, r4, r5
 80024e8:	42a3      	cmp	r3, r4
 80024ea:	6025      	str	r5, [r4, #0]
 80024ec:	bf18      	it	ne
 80024ee:	6059      	strne	r1, [r3, #4]
 80024f0:	6863      	ldr	r3, [r4, #4]
 80024f2:	bf08      	it	eq
 80024f4:	f8c8 1000 	streq.w	r1, [r8]
 80024f8:	5162      	str	r2, [r4, r5]
 80024fa:	604b      	str	r3, [r1, #4]
 80024fc:	f104 060b 	add.w	r6, r4, #11
 8002500:	4638      	mov	r0, r7
 8002502:	f000 f829 	bl	8002558 <__malloc_unlock>
 8002506:	1d23      	adds	r3, r4, #4
 8002508:	f026 0607 	bic.w	r6, r6, #7
 800250c:	1af2      	subs	r2, r6, r3
 800250e:	d0ae      	beq.n	800246e <_malloc_r+0x22>
 8002510:	1b9b      	subs	r3, r3, r6
 8002512:	50a3      	str	r3, [r4, r2]
 8002514:	e7ab      	b.n	800246e <_malloc_r+0x22>
 8002516:	42a3      	cmp	r3, r4
 8002518:	6862      	ldr	r2, [r4, #4]
 800251a:	d1dd      	bne.n	80024d8 <_malloc_r+0x8c>
 800251c:	f8c8 2000 	str.w	r2, [r8]
 8002520:	e7ec      	b.n	80024fc <_malloc_r+0xb0>
 8002522:	4623      	mov	r3, r4
 8002524:	6864      	ldr	r4, [r4, #4]
 8002526:	e7ac      	b.n	8002482 <_malloc_r+0x36>
 8002528:	4634      	mov	r4, r6
 800252a:	6876      	ldr	r6, [r6, #4]
 800252c:	e7b4      	b.n	8002498 <_malloc_r+0x4c>
 800252e:	4613      	mov	r3, r2
 8002530:	e7cc      	b.n	80024cc <_malloc_r+0x80>
 8002532:	230c      	movs	r3, #12
 8002534:	4638      	mov	r0, r7
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	f000 f80e 	bl	8002558 <__malloc_unlock>
 800253c:	e797      	b.n	800246e <_malloc_r+0x22>
 800253e:	6025      	str	r5, [r4, #0]
 8002540:	e7dc      	b.n	80024fc <_malloc_r+0xb0>
 8002542:	605b      	str	r3, [r3, #4]
 8002544:	deff      	udf	#255	; 0xff
 8002546:	bf00      	nop
 8002548:	200001d4 	.word	0x200001d4

0800254c <__malloc_lock>:
 800254c:	4801      	ldr	r0, [pc, #4]	; (8002554 <__malloc_lock+0x8>)
 800254e:	f7ff bf0e 	b.w	800236e <__retarget_lock_acquire_recursive>
 8002552:	bf00      	nop
 8002554:	200001d0 	.word	0x200001d0

08002558 <__malloc_unlock>:
 8002558:	4801      	ldr	r0, [pc, #4]	; (8002560 <__malloc_unlock+0x8>)
 800255a:	f7ff bf09 	b.w	8002370 <__retarget_lock_release_recursive>
 800255e:	bf00      	nop
 8002560:	200001d0 	.word	0x200001d0

08002564 <__sfputc_r>:
 8002564:	6893      	ldr	r3, [r2, #8]
 8002566:	3b01      	subs	r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	6093      	str	r3, [r2, #8]
 800256c:	b410      	push	{r4}
 800256e:	da08      	bge.n	8002582 <__sfputc_r+0x1e>
 8002570:	6994      	ldr	r4, [r2, #24]
 8002572:	42a3      	cmp	r3, r4
 8002574:	db01      	blt.n	800257a <__sfputc_r+0x16>
 8002576:	290a      	cmp	r1, #10
 8002578:	d103      	bne.n	8002582 <__sfputc_r+0x1e>
 800257a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800257e:	f000 bb73 	b.w	8002c68 <__swbuf_r>
 8002582:	6813      	ldr	r3, [r2, #0]
 8002584:	1c58      	adds	r0, r3, #1
 8002586:	6010      	str	r0, [r2, #0]
 8002588:	4608      	mov	r0, r1
 800258a:	7019      	strb	r1, [r3, #0]
 800258c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002590:	4770      	bx	lr

08002592 <__sfputs_r>:
 8002592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002594:	4606      	mov	r6, r0
 8002596:	460f      	mov	r7, r1
 8002598:	4614      	mov	r4, r2
 800259a:	18d5      	adds	r5, r2, r3
 800259c:	42ac      	cmp	r4, r5
 800259e:	d101      	bne.n	80025a4 <__sfputs_r+0x12>
 80025a0:	2000      	movs	r0, #0
 80025a2:	e007      	b.n	80025b4 <__sfputs_r+0x22>
 80025a4:	463a      	mov	r2, r7
 80025a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025aa:	4630      	mov	r0, r6
 80025ac:	f7ff ffda 	bl	8002564 <__sfputc_r>
 80025b0:	1c43      	adds	r3, r0, #1
 80025b2:	d1f3      	bne.n	800259c <__sfputs_r+0xa>
 80025b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025b8 <_vfiprintf_r>:
 80025b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025bc:	460d      	mov	r5, r1
 80025be:	b09d      	sub	sp, #116	; 0x74
 80025c0:	4614      	mov	r4, r2
 80025c2:	4698      	mov	r8, r3
 80025c4:	4606      	mov	r6, r0
 80025c6:	b118      	cbz	r0, 80025d0 <_vfiprintf_r+0x18>
 80025c8:	6a03      	ldr	r3, [r0, #32]
 80025ca:	b90b      	cbnz	r3, 80025d0 <_vfiprintf_r+0x18>
 80025cc:	f7ff fdca 	bl	8002164 <__sinit>
 80025d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025d2:	07d9      	lsls	r1, r3, #31
 80025d4:	d405      	bmi.n	80025e2 <_vfiprintf_r+0x2a>
 80025d6:	89ab      	ldrh	r3, [r5, #12]
 80025d8:	059a      	lsls	r2, r3, #22
 80025da:	d402      	bmi.n	80025e2 <_vfiprintf_r+0x2a>
 80025dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025de:	f7ff fec6 	bl	800236e <__retarget_lock_acquire_recursive>
 80025e2:	89ab      	ldrh	r3, [r5, #12]
 80025e4:	071b      	lsls	r3, r3, #28
 80025e6:	d501      	bpl.n	80025ec <_vfiprintf_r+0x34>
 80025e8:	692b      	ldr	r3, [r5, #16]
 80025ea:	b99b      	cbnz	r3, 8002614 <_vfiprintf_r+0x5c>
 80025ec:	4629      	mov	r1, r5
 80025ee:	4630      	mov	r0, r6
 80025f0:	f000 fb78 	bl	8002ce4 <__swsetup_r>
 80025f4:	b170      	cbz	r0, 8002614 <_vfiprintf_r+0x5c>
 80025f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025f8:	07dc      	lsls	r4, r3, #31
 80025fa:	d504      	bpl.n	8002606 <_vfiprintf_r+0x4e>
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002600:	b01d      	add	sp, #116	; 0x74
 8002602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002606:	89ab      	ldrh	r3, [r5, #12]
 8002608:	0598      	lsls	r0, r3, #22
 800260a:	d4f7      	bmi.n	80025fc <_vfiprintf_r+0x44>
 800260c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800260e:	f7ff feaf 	bl	8002370 <__retarget_lock_release_recursive>
 8002612:	e7f3      	b.n	80025fc <_vfiprintf_r+0x44>
 8002614:	2300      	movs	r3, #0
 8002616:	f8cd 800c 	str.w	r8, [sp, #12]
 800261a:	f04f 0901 	mov.w	r9, #1
 800261e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80027d8 <_vfiprintf_r+0x220>
 8002622:	9309      	str	r3, [sp, #36]	; 0x24
 8002624:	2320      	movs	r3, #32
 8002626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800262a:	2330      	movs	r3, #48	; 0x30
 800262c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002630:	4623      	mov	r3, r4
 8002632:	469a      	mov	sl, r3
 8002634:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002638:	b10a      	cbz	r2, 800263e <_vfiprintf_r+0x86>
 800263a:	2a25      	cmp	r2, #37	; 0x25
 800263c:	d1f9      	bne.n	8002632 <_vfiprintf_r+0x7a>
 800263e:	ebba 0b04 	subs.w	fp, sl, r4
 8002642:	d00b      	beq.n	800265c <_vfiprintf_r+0xa4>
 8002644:	465b      	mov	r3, fp
 8002646:	4622      	mov	r2, r4
 8002648:	4629      	mov	r1, r5
 800264a:	4630      	mov	r0, r6
 800264c:	f7ff ffa1 	bl	8002592 <__sfputs_r>
 8002650:	3001      	adds	r0, #1
 8002652:	f000 80a9 	beq.w	80027a8 <_vfiprintf_r+0x1f0>
 8002656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002658:	445a      	add	r2, fp
 800265a:	9209      	str	r2, [sp, #36]	; 0x24
 800265c:	f89a 3000 	ldrb.w	r3, [sl]
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80a1 	beq.w	80027a8 <_vfiprintf_r+0x1f0>
 8002666:	2300      	movs	r3, #0
 8002668:	f04f 32ff 	mov.w	r2, #4294967295
 800266c:	f10a 0a01 	add.w	sl, sl, #1
 8002670:	9304      	str	r3, [sp, #16]
 8002672:	9307      	str	r3, [sp, #28]
 8002674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002678:	931a      	str	r3, [sp, #104]	; 0x68
 800267a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800267e:	4654      	mov	r4, sl
 8002680:	2205      	movs	r2, #5
 8002682:	4855      	ldr	r0, [pc, #340]	; (80027d8 <_vfiprintf_r+0x220>)
 8002684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002688:	f000 fb94 	bl	8002db4 <memchr>
 800268c:	9a04      	ldr	r2, [sp, #16]
 800268e:	b9d8      	cbnz	r0, 80026c8 <_vfiprintf_r+0x110>
 8002690:	06d1      	lsls	r1, r2, #27
 8002692:	bf44      	itt	mi
 8002694:	2320      	movmi	r3, #32
 8002696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800269a:	0713      	lsls	r3, r2, #28
 800269c:	bf44      	itt	mi
 800269e:	232b      	movmi	r3, #43	; 0x2b
 80026a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026a4:	f89a 3000 	ldrb.w	r3, [sl]
 80026a8:	2b2a      	cmp	r3, #42	; 0x2a
 80026aa:	d015      	beq.n	80026d8 <_vfiprintf_r+0x120>
 80026ac:	9a07      	ldr	r2, [sp, #28]
 80026ae:	4654      	mov	r4, sl
 80026b0:	2000      	movs	r0, #0
 80026b2:	f04f 0c0a 	mov.w	ip, #10
 80026b6:	4621      	mov	r1, r4
 80026b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026bc:	3b30      	subs	r3, #48	; 0x30
 80026be:	2b09      	cmp	r3, #9
 80026c0:	d94d      	bls.n	800275e <_vfiprintf_r+0x1a6>
 80026c2:	b1b0      	cbz	r0, 80026f2 <_vfiprintf_r+0x13a>
 80026c4:	9207      	str	r2, [sp, #28]
 80026c6:	e014      	b.n	80026f2 <_vfiprintf_r+0x13a>
 80026c8:	eba0 0308 	sub.w	r3, r0, r8
 80026cc:	46a2      	mov	sl, r4
 80026ce:	fa09 f303 	lsl.w	r3, r9, r3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	9304      	str	r3, [sp, #16]
 80026d6:	e7d2      	b.n	800267e <_vfiprintf_r+0xc6>
 80026d8:	9b03      	ldr	r3, [sp, #12]
 80026da:	1d19      	adds	r1, r3, #4
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	9103      	str	r1, [sp, #12]
 80026e2:	bfbb      	ittet	lt
 80026e4:	425b      	neglt	r3, r3
 80026e6:	f042 0202 	orrlt.w	r2, r2, #2
 80026ea:	9307      	strge	r3, [sp, #28]
 80026ec:	9307      	strlt	r3, [sp, #28]
 80026ee:	bfb8      	it	lt
 80026f0:	9204      	strlt	r2, [sp, #16]
 80026f2:	7823      	ldrb	r3, [r4, #0]
 80026f4:	2b2e      	cmp	r3, #46	; 0x2e
 80026f6:	d10c      	bne.n	8002712 <_vfiprintf_r+0x15a>
 80026f8:	7863      	ldrb	r3, [r4, #1]
 80026fa:	2b2a      	cmp	r3, #42	; 0x2a
 80026fc:	d134      	bne.n	8002768 <_vfiprintf_r+0x1b0>
 80026fe:	9b03      	ldr	r3, [sp, #12]
 8002700:	3402      	adds	r4, #2
 8002702:	1d1a      	adds	r2, r3, #4
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	9203      	str	r2, [sp, #12]
 800270a:	bfb8      	it	lt
 800270c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002710:	9305      	str	r3, [sp, #20]
 8002712:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80027e8 <_vfiprintf_r+0x230>
 8002716:	2203      	movs	r2, #3
 8002718:	7821      	ldrb	r1, [r4, #0]
 800271a:	4650      	mov	r0, sl
 800271c:	f000 fb4a 	bl	8002db4 <memchr>
 8002720:	b138      	cbz	r0, 8002732 <_vfiprintf_r+0x17a>
 8002722:	eba0 000a 	sub.w	r0, r0, sl
 8002726:	2240      	movs	r2, #64	; 0x40
 8002728:	9b04      	ldr	r3, [sp, #16]
 800272a:	3401      	adds	r4, #1
 800272c:	4082      	lsls	r2, r0
 800272e:	4313      	orrs	r3, r2
 8002730:	9304      	str	r3, [sp, #16]
 8002732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002736:	2206      	movs	r2, #6
 8002738:	4828      	ldr	r0, [pc, #160]	; (80027dc <_vfiprintf_r+0x224>)
 800273a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800273e:	f000 fb39 	bl	8002db4 <memchr>
 8002742:	2800      	cmp	r0, #0
 8002744:	d03f      	beq.n	80027c6 <_vfiprintf_r+0x20e>
 8002746:	4b26      	ldr	r3, [pc, #152]	; (80027e0 <_vfiprintf_r+0x228>)
 8002748:	bb1b      	cbnz	r3, 8002792 <_vfiprintf_r+0x1da>
 800274a:	9b03      	ldr	r3, [sp, #12]
 800274c:	3307      	adds	r3, #7
 800274e:	f023 0307 	bic.w	r3, r3, #7
 8002752:	3308      	adds	r3, #8
 8002754:	9303      	str	r3, [sp, #12]
 8002756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002758:	443b      	add	r3, r7
 800275a:	9309      	str	r3, [sp, #36]	; 0x24
 800275c:	e768      	b.n	8002630 <_vfiprintf_r+0x78>
 800275e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002762:	460c      	mov	r4, r1
 8002764:	2001      	movs	r0, #1
 8002766:	e7a6      	b.n	80026b6 <_vfiprintf_r+0xfe>
 8002768:	2300      	movs	r3, #0
 800276a:	3401      	adds	r4, #1
 800276c:	f04f 0c0a 	mov.w	ip, #10
 8002770:	4619      	mov	r1, r3
 8002772:	9305      	str	r3, [sp, #20]
 8002774:	4620      	mov	r0, r4
 8002776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800277a:	3a30      	subs	r2, #48	; 0x30
 800277c:	2a09      	cmp	r2, #9
 800277e:	d903      	bls.n	8002788 <_vfiprintf_r+0x1d0>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0c6      	beq.n	8002712 <_vfiprintf_r+0x15a>
 8002784:	9105      	str	r1, [sp, #20]
 8002786:	e7c4      	b.n	8002712 <_vfiprintf_r+0x15a>
 8002788:	fb0c 2101 	mla	r1, ip, r1, r2
 800278c:	4604      	mov	r4, r0
 800278e:	2301      	movs	r3, #1
 8002790:	e7f0      	b.n	8002774 <_vfiprintf_r+0x1bc>
 8002792:	ab03      	add	r3, sp, #12
 8002794:	462a      	mov	r2, r5
 8002796:	a904      	add	r1, sp, #16
 8002798:	4630      	mov	r0, r6
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <_vfiprintf_r+0x22c>)
 800279e:	f3af 8000 	nop.w
 80027a2:	4607      	mov	r7, r0
 80027a4:	1c78      	adds	r0, r7, #1
 80027a6:	d1d6      	bne.n	8002756 <_vfiprintf_r+0x19e>
 80027a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027aa:	07d9      	lsls	r1, r3, #31
 80027ac:	d405      	bmi.n	80027ba <_vfiprintf_r+0x202>
 80027ae:	89ab      	ldrh	r3, [r5, #12]
 80027b0:	059a      	lsls	r2, r3, #22
 80027b2:	d402      	bmi.n	80027ba <_vfiprintf_r+0x202>
 80027b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027b6:	f7ff fddb 	bl	8002370 <__retarget_lock_release_recursive>
 80027ba:	89ab      	ldrh	r3, [r5, #12]
 80027bc:	065b      	lsls	r3, r3, #25
 80027be:	f53f af1d 	bmi.w	80025fc <_vfiprintf_r+0x44>
 80027c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027c4:	e71c      	b.n	8002600 <_vfiprintf_r+0x48>
 80027c6:	ab03      	add	r3, sp, #12
 80027c8:	462a      	mov	r2, r5
 80027ca:	a904      	add	r1, sp, #16
 80027cc:	4630      	mov	r0, r6
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <_vfiprintf_r+0x22c>)
 80027d2:	f000 f87d 	bl	80028d0 <_printf_i>
 80027d6:	e7e4      	b.n	80027a2 <_vfiprintf_r+0x1ea>
 80027d8:	08002fcc 	.word	0x08002fcc
 80027dc:	08002fd6 	.word	0x08002fd6
 80027e0:	00000000 	.word	0x00000000
 80027e4:	08002593 	.word	0x08002593
 80027e8:	08002fd2 	.word	0x08002fd2

080027ec <_printf_common>:
 80027ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027f0:	4616      	mov	r6, r2
 80027f2:	4699      	mov	r9, r3
 80027f4:	688a      	ldr	r2, [r1, #8]
 80027f6:	4607      	mov	r7, r0
 80027f8:	690b      	ldr	r3, [r1, #16]
 80027fa:	460c      	mov	r4, r1
 80027fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002800:	4293      	cmp	r3, r2
 8002802:	bfb8      	it	lt
 8002804:	4613      	movlt	r3, r2
 8002806:	6033      	str	r3, [r6, #0]
 8002808:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800280c:	b10a      	cbz	r2, 8002812 <_printf_common+0x26>
 800280e:	3301      	adds	r3, #1
 8002810:	6033      	str	r3, [r6, #0]
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	0699      	lsls	r1, r3, #26
 8002816:	bf42      	ittt	mi
 8002818:	6833      	ldrmi	r3, [r6, #0]
 800281a:	3302      	addmi	r3, #2
 800281c:	6033      	strmi	r3, [r6, #0]
 800281e:	6825      	ldr	r5, [r4, #0]
 8002820:	f015 0506 	ands.w	r5, r5, #6
 8002824:	d106      	bne.n	8002834 <_printf_common+0x48>
 8002826:	f104 0a19 	add.w	sl, r4, #25
 800282a:	68e3      	ldr	r3, [r4, #12]
 800282c:	6832      	ldr	r2, [r6, #0]
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	42ab      	cmp	r3, r5
 8002832:	dc2b      	bgt.n	800288c <_printf_common+0xa0>
 8002834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002838:	1e13      	subs	r3, r2, #0
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	bf18      	it	ne
 800283e:	2301      	movne	r3, #1
 8002840:	0692      	lsls	r2, r2, #26
 8002842:	d430      	bmi.n	80028a6 <_printf_common+0xba>
 8002844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002848:	4649      	mov	r1, r9
 800284a:	4638      	mov	r0, r7
 800284c:	47c0      	blx	r8
 800284e:	3001      	adds	r0, #1
 8002850:	d023      	beq.n	800289a <_printf_common+0xae>
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	341a      	adds	r4, #26
 8002856:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800285a:	f003 0306 	and.w	r3, r3, #6
 800285e:	2b04      	cmp	r3, #4
 8002860:	bf0a      	itet	eq
 8002862:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8002866:	2500      	movne	r5, #0
 8002868:	6833      	ldreq	r3, [r6, #0]
 800286a:	f04f 0600 	mov.w	r6, #0
 800286e:	bf08      	it	eq
 8002870:	1aed      	subeq	r5, r5, r3
 8002872:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002876:	bf08      	it	eq
 8002878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800287c:	4293      	cmp	r3, r2
 800287e:	bfc4      	itt	gt
 8002880:	1a9b      	subgt	r3, r3, r2
 8002882:	18ed      	addgt	r5, r5, r3
 8002884:	42b5      	cmp	r5, r6
 8002886:	d11a      	bne.n	80028be <_printf_common+0xd2>
 8002888:	2000      	movs	r0, #0
 800288a:	e008      	b.n	800289e <_printf_common+0xb2>
 800288c:	2301      	movs	r3, #1
 800288e:	4652      	mov	r2, sl
 8002890:	4649      	mov	r1, r9
 8002892:	4638      	mov	r0, r7
 8002894:	47c0      	blx	r8
 8002896:	3001      	adds	r0, #1
 8002898:	d103      	bne.n	80028a2 <_printf_common+0xb6>
 800289a:	f04f 30ff 	mov.w	r0, #4294967295
 800289e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a2:	3501      	adds	r5, #1
 80028a4:	e7c1      	b.n	800282a <_printf_common+0x3e>
 80028a6:	18e1      	adds	r1, r4, r3
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	2030      	movs	r0, #48	; 0x30
 80028ac:	3302      	adds	r3, #2
 80028ae:	4422      	add	r2, r4
 80028b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028bc:	e7c2      	b.n	8002844 <_printf_common+0x58>
 80028be:	2301      	movs	r3, #1
 80028c0:	4622      	mov	r2, r4
 80028c2:	4649      	mov	r1, r9
 80028c4:	4638      	mov	r0, r7
 80028c6:	47c0      	blx	r8
 80028c8:	3001      	adds	r0, #1
 80028ca:	d0e6      	beq.n	800289a <_printf_common+0xae>
 80028cc:	3601      	adds	r6, #1
 80028ce:	e7d9      	b.n	8002884 <_printf_common+0x98>

080028d0 <_printf_i>:
 80028d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028d4:	7e0f      	ldrb	r7, [r1, #24]
 80028d6:	4691      	mov	r9, r2
 80028d8:	4680      	mov	r8, r0
 80028da:	460c      	mov	r4, r1
 80028dc:	2f78      	cmp	r7, #120	; 0x78
 80028de:	469a      	mov	sl, r3
 80028e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028e6:	d807      	bhi.n	80028f8 <_printf_i+0x28>
 80028e8:	2f62      	cmp	r7, #98	; 0x62
 80028ea:	d80a      	bhi.n	8002902 <_printf_i+0x32>
 80028ec:	2f00      	cmp	r7, #0
 80028ee:	f000 80d3 	beq.w	8002a98 <_printf_i+0x1c8>
 80028f2:	2f58      	cmp	r7, #88	; 0x58
 80028f4:	f000 80bf 	beq.w	8002a76 <_printf_i+0x1a6>
 80028f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002900:	e03a      	b.n	8002978 <_printf_i+0xa8>
 8002902:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002906:	2b15      	cmp	r3, #21
 8002908:	d8f6      	bhi.n	80028f8 <_printf_i+0x28>
 800290a:	a101      	add	r1, pc, #4	; (adr r1, 8002910 <_printf_i+0x40>)
 800290c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002910:	08002969 	.word	0x08002969
 8002914:	0800297d 	.word	0x0800297d
 8002918:	080028f9 	.word	0x080028f9
 800291c:	080028f9 	.word	0x080028f9
 8002920:	080028f9 	.word	0x080028f9
 8002924:	080028f9 	.word	0x080028f9
 8002928:	0800297d 	.word	0x0800297d
 800292c:	080028f9 	.word	0x080028f9
 8002930:	080028f9 	.word	0x080028f9
 8002934:	080028f9 	.word	0x080028f9
 8002938:	080028f9 	.word	0x080028f9
 800293c:	08002a7f 	.word	0x08002a7f
 8002940:	080029a9 	.word	0x080029a9
 8002944:	08002a3b 	.word	0x08002a3b
 8002948:	080028f9 	.word	0x080028f9
 800294c:	080028f9 	.word	0x080028f9
 8002950:	08002aa1 	.word	0x08002aa1
 8002954:	080028f9 	.word	0x080028f9
 8002958:	080029a9 	.word	0x080029a9
 800295c:	080028f9 	.word	0x080028f9
 8002960:	080028f9 	.word	0x080028f9
 8002964:	08002a43 	.word	0x08002a43
 8002968:	682b      	ldr	r3, [r5, #0]
 800296a:	1d1a      	adds	r2, r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	602a      	str	r2, [r5, #0]
 8002970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002978:	2301      	movs	r3, #1
 800297a:	e09e      	b.n	8002aba <_printf_i+0x1ea>
 800297c:	6820      	ldr	r0, [r4, #0]
 800297e:	682b      	ldr	r3, [r5, #0]
 8002980:	0607      	lsls	r7, r0, #24
 8002982:	f103 0104 	add.w	r1, r3, #4
 8002986:	6029      	str	r1, [r5, #0]
 8002988:	d501      	bpl.n	800298e <_printf_i+0xbe>
 800298a:	681e      	ldr	r6, [r3, #0]
 800298c:	e003      	b.n	8002996 <_printf_i+0xc6>
 800298e:	0646      	lsls	r6, r0, #25
 8002990:	d5fb      	bpl.n	800298a <_printf_i+0xba>
 8002992:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002996:	2e00      	cmp	r6, #0
 8002998:	da03      	bge.n	80029a2 <_printf_i+0xd2>
 800299a:	232d      	movs	r3, #45	; 0x2d
 800299c:	4276      	negs	r6, r6
 800299e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029a2:	4859      	ldr	r0, [pc, #356]	; (8002b08 <_printf_i+0x238>)
 80029a4:	230a      	movs	r3, #10
 80029a6:	e012      	b.n	80029ce <_printf_i+0xfe>
 80029a8:	682b      	ldr	r3, [r5, #0]
 80029aa:	6820      	ldr	r0, [r4, #0]
 80029ac:	1d19      	adds	r1, r3, #4
 80029ae:	6029      	str	r1, [r5, #0]
 80029b0:	0605      	lsls	r5, r0, #24
 80029b2:	d501      	bpl.n	80029b8 <_printf_i+0xe8>
 80029b4:	681e      	ldr	r6, [r3, #0]
 80029b6:	e002      	b.n	80029be <_printf_i+0xee>
 80029b8:	0641      	lsls	r1, r0, #25
 80029ba:	d5fb      	bpl.n	80029b4 <_printf_i+0xe4>
 80029bc:	881e      	ldrh	r6, [r3, #0]
 80029be:	2f6f      	cmp	r7, #111	; 0x6f
 80029c0:	4851      	ldr	r0, [pc, #324]	; (8002b08 <_printf_i+0x238>)
 80029c2:	bf0c      	ite	eq
 80029c4:	2308      	moveq	r3, #8
 80029c6:	230a      	movne	r3, #10
 80029c8:	2100      	movs	r1, #0
 80029ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029ce:	6865      	ldr	r5, [r4, #4]
 80029d0:	2d00      	cmp	r5, #0
 80029d2:	60a5      	str	r5, [r4, #8]
 80029d4:	bfa2      	ittt	ge
 80029d6:	6821      	ldrge	r1, [r4, #0]
 80029d8:	f021 0104 	bicge.w	r1, r1, #4
 80029dc:	6021      	strge	r1, [r4, #0]
 80029de:	b90e      	cbnz	r6, 80029e4 <_printf_i+0x114>
 80029e0:	2d00      	cmp	r5, #0
 80029e2:	d04a      	beq.n	8002a7a <_printf_i+0x1aa>
 80029e4:	4615      	mov	r5, r2
 80029e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80029ea:	fb03 6711 	mls	r7, r3, r1, r6
 80029ee:	5dc7      	ldrb	r7, [r0, r7]
 80029f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029f4:	4637      	mov	r7, r6
 80029f6:	460e      	mov	r6, r1
 80029f8:	42bb      	cmp	r3, r7
 80029fa:	d9f4      	bls.n	80029e6 <_printf_i+0x116>
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d10b      	bne.n	8002a18 <_printf_i+0x148>
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	07de      	lsls	r6, r3, #31
 8002a04:	d508      	bpl.n	8002a18 <_printf_i+0x148>
 8002a06:	6923      	ldr	r3, [r4, #16]
 8002a08:	6861      	ldr	r1, [r4, #4]
 8002a0a:	4299      	cmp	r1, r3
 8002a0c:	bfde      	ittt	le
 8002a0e:	2330      	movle	r3, #48	; 0x30
 8002a10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a18:	1b52      	subs	r2, r2, r5
 8002a1a:	6122      	str	r2, [r4, #16]
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	aa03      	add	r2, sp, #12
 8002a20:	4621      	mov	r1, r4
 8002a22:	4640      	mov	r0, r8
 8002a24:	f8cd a000 	str.w	sl, [sp]
 8002a28:	f7ff fee0 	bl	80027ec <_printf_common>
 8002a2c:	3001      	adds	r0, #1
 8002a2e:	d149      	bne.n	8002ac4 <_printf_i+0x1f4>
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295
 8002a34:	b004      	add	sp, #16
 8002a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	f043 0320 	orr.w	r3, r3, #32
 8002a40:	6023      	str	r3, [r4, #0]
 8002a42:	2778      	movs	r7, #120	; 0x78
 8002a44:	4831      	ldr	r0, [pc, #196]	; (8002b0c <_printf_i+0x23c>)
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a4c:	061f      	lsls	r7, r3, #24
 8002a4e:	6829      	ldr	r1, [r5, #0]
 8002a50:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a54:	d402      	bmi.n	8002a5c <_printf_i+0x18c>
 8002a56:	065f      	lsls	r7, r3, #25
 8002a58:	bf48      	it	mi
 8002a5a:	b2b6      	uxthmi	r6, r6
 8002a5c:	07df      	lsls	r7, r3, #31
 8002a5e:	6029      	str	r1, [r5, #0]
 8002a60:	bf44      	itt	mi
 8002a62:	f043 0320 	orrmi.w	r3, r3, #32
 8002a66:	6023      	strmi	r3, [r4, #0]
 8002a68:	b91e      	cbnz	r6, 8002a72 <_printf_i+0x1a2>
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	f023 0320 	bic.w	r3, r3, #32
 8002a70:	6023      	str	r3, [r4, #0]
 8002a72:	2310      	movs	r3, #16
 8002a74:	e7a8      	b.n	80029c8 <_printf_i+0xf8>
 8002a76:	4824      	ldr	r0, [pc, #144]	; (8002b08 <_printf_i+0x238>)
 8002a78:	e7e5      	b.n	8002a46 <_printf_i+0x176>
 8002a7a:	4615      	mov	r5, r2
 8002a7c:	e7be      	b.n	80029fc <_printf_i+0x12c>
 8002a7e:	682b      	ldr	r3, [r5, #0]
 8002a80:	6826      	ldr	r6, [r4, #0]
 8002a82:	1d18      	adds	r0, r3, #4
 8002a84:	6961      	ldr	r1, [r4, #20]
 8002a86:	6028      	str	r0, [r5, #0]
 8002a88:	0635      	lsls	r5, r6, #24
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	d501      	bpl.n	8002a92 <_printf_i+0x1c2>
 8002a8e:	6019      	str	r1, [r3, #0]
 8002a90:	e002      	b.n	8002a98 <_printf_i+0x1c8>
 8002a92:	0670      	lsls	r0, r6, #25
 8002a94:	d5fb      	bpl.n	8002a8e <_printf_i+0x1be>
 8002a96:	8019      	strh	r1, [r3, #0]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	4615      	mov	r5, r2
 8002a9c:	6123      	str	r3, [r4, #16]
 8002a9e:	e7bd      	b.n	8002a1c <_printf_i+0x14c>
 8002aa0:	682b      	ldr	r3, [r5, #0]
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	1d1a      	adds	r2, r3, #4
 8002aa6:	602a      	str	r2, [r5, #0]
 8002aa8:	681d      	ldr	r5, [r3, #0]
 8002aaa:	6862      	ldr	r2, [r4, #4]
 8002aac:	4628      	mov	r0, r5
 8002aae:	f000 f981 	bl	8002db4 <memchr>
 8002ab2:	b108      	cbz	r0, 8002ab8 <_printf_i+0x1e8>
 8002ab4:	1b40      	subs	r0, r0, r5
 8002ab6:	6060      	str	r0, [r4, #4]
 8002ab8:	6863      	ldr	r3, [r4, #4]
 8002aba:	6123      	str	r3, [r4, #16]
 8002abc:	2300      	movs	r3, #0
 8002abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ac2:	e7ab      	b.n	8002a1c <_printf_i+0x14c>
 8002ac4:	6923      	ldr	r3, [r4, #16]
 8002ac6:	462a      	mov	r2, r5
 8002ac8:	4649      	mov	r1, r9
 8002aca:	4640      	mov	r0, r8
 8002acc:	47d0      	blx	sl
 8002ace:	3001      	adds	r0, #1
 8002ad0:	d0ae      	beq.n	8002a30 <_printf_i+0x160>
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	079b      	lsls	r3, r3, #30
 8002ad6:	d413      	bmi.n	8002b00 <_printf_i+0x230>
 8002ad8:	68e0      	ldr	r0, [r4, #12]
 8002ada:	9b03      	ldr	r3, [sp, #12]
 8002adc:	4298      	cmp	r0, r3
 8002ade:	bfb8      	it	lt
 8002ae0:	4618      	movlt	r0, r3
 8002ae2:	e7a7      	b.n	8002a34 <_printf_i+0x164>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	4632      	mov	r2, r6
 8002ae8:	4649      	mov	r1, r9
 8002aea:	4640      	mov	r0, r8
 8002aec:	47d0      	blx	sl
 8002aee:	3001      	adds	r0, #1
 8002af0:	d09e      	beq.n	8002a30 <_printf_i+0x160>
 8002af2:	3501      	adds	r5, #1
 8002af4:	68e3      	ldr	r3, [r4, #12]
 8002af6:	9903      	ldr	r1, [sp, #12]
 8002af8:	1a5b      	subs	r3, r3, r1
 8002afa:	42ab      	cmp	r3, r5
 8002afc:	dcf2      	bgt.n	8002ae4 <_printf_i+0x214>
 8002afe:	e7eb      	b.n	8002ad8 <_printf_i+0x208>
 8002b00:	2500      	movs	r5, #0
 8002b02:	f104 0619 	add.w	r6, r4, #25
 8002b06:	e7f5      	b.n	8002af4 <_printf_i+0x224>
 8002b08:	08002fdd 	.word	0x08002fdd
 8002b0c:	08002fee 	.word	0x08002fee

08002b10 <__sflush_r>:
 8002b10:	898a      	ldrh	r2, [r1, #12]
 8002b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b16:	4605      	mov	r5, r0
 8002b18:	0710      	lsls	r0, r2, #28
 8002b1a:	460c      	mov	r4, r1
 8002b1c:	d458      	bmi.n	8002bd0 <__sflush_r+0xc0>
 8002b1e:	684b      	ldr	r3, [r1, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	dc05      	bgt.n	8002b30 <__sflush_r+0x20>
 8002b24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	dc02      	bgt.n	8002b30 <__sflush_r+0x20>
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b32:	2e00      	cmp	r6, #0
 8002b34:	d0f9      	beq.n	8002b2a <__sflush_r+0x1a>
 8002b36:	2300      	movs	r3, #0
 8002b38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b3c:	682f      	ldr	r7, [r5, #0]
 8002b3e:	6a21      	ldr	r1, [r4, #32]
 8002b40:	602b      	str	r3, [r5, #0]
 8002b42:	d032      	beq.n	8002baa <__sflush_r+0x9a>
 8002b44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b46:	89a3      	ldrh	r3, [r4, #12]
 8002b48:	075a      	lsls	r2, r3, #29
 8002b4a:	d505      	bpl.n	8002b58 <__sflush_r+0x48>
 8002b4c:	6863      	ldr	r3, [r4, #4]
 8002b4e:	1ac0      	subs	r0, r0, r3
 8002b50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b52:	b10b      	cbz	r3, 8002b58 <__sflush_r+0x48>
 8002b54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b56:	1ac0      	subs	r0, r0, r3
 8002b58:	2300      	movs	r3, #0
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b5e:	4628      	mov	r0, r5
 8002b60:	6a21      	ldr	r1, [r4, #32]
 8002b62:	47b0      	blx	r6
 8002b64:	1c43      	adds	r3, r0, #1
 8002b66:	89a3      	ldrh	r3, [r4, #12]
 8002b68:	d106      	bne.n	8002b78 <__sflush_r+0x68>
 8002b6a:	6829      	ldr	r1, [r5, #0]
 8002b6c:	291d      	cmp	r1, #29
 8002b6e:	d82b      	bhi.n	8002bc8 <__sflush_r+0xb8>
 8002b70:	4a28      	ldr	r2, [pc, #160]	; (8002c14 <__sflush_r+0x104>)
 8002b72:	410a      	asrs	r2, r1
 8002b74:	07d6      	lsls	r6, r2, #31
 8002b76:	d427      	bmi.n	8002bc8 <__sflush_r+0xb8>
 8002b78:	2200      	movs	r2, #0
 8002b7a:	04d9      	lsls	r1, r3, #19
 8002b7c:	6062      	str	r2, [r4, #4]
 8002b7e:	6922      	ldr	r2, [r4, #16]
 8002b80:	6022      	str	r2, [r4, #0]
 8002b82:	d504      	bpl.n	8002b8e <__sflush_r+0x7e>
 8002b84:	1c42      	adds	r2, r0, #1
 8002b86:	d101      	bne.n	8002b8c <__sflush_r+0x7c>
 8002b88:	682b      	ldr	r3, [r5, #0]
 8002b8a:	b903      	cbnz	r3, 8002b8e <__sflush_r+0x7e>
 8002b8c:	6560      	str	r0, [r4, #84]	; 0x54
 8002b8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b90:	602f      	str	r7, [r5, #0]
 8002b92:	2900      	cmp	r1, #0
 8002b94:	d0c9      	beq.n	8002b2a <__sflush_r+0x1a>
 8002b96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b9a:	4299      	cmp	r1, r3
 8002b9c:	d002      	beq.n	8002ba4 <__sflush_r+0x94>
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	f7ff fbe8 	bl	8002374 <_free_r>
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	6360      	str	r0, [r4, #52]	; 0x34
 8002ba8:	e7c0      	b.n	8002b2c <__sflush_r+0x1c>
 8002baa:	2301      	movs	r3, #1
 8002bac:	4628      	mov	r0, r5
 8002bae:	47b0      	blx	r6
 8002bb0:	1c41      	adds	r1, r0, #1
 8002bb2:	d1c8      	bne.n	8002b46 <__sflush_r+0x36>
 8002bb4:	682b      	ldr	r3, [r5, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0c5      	beq.n	8002b46 <__sflush_r+0x36>
 8002bba:	2b1d      	cmp	r3, #29
 8002bbc:	d001      	beq.n	8002bc2 <__sflush_r+0xb2>
 8002bbe:	2b16      	cmp	r3, #22
 8002bc0:	d101      	bne.n	8002bc6 <__sflush_r+0xb6>
 8002bc2:	602f      	str	r7, [r5, #0]
 8002bc4:	e7b1      	b.n	8002b2a <__sflush_r+0x1a>
 8002bc6:	89a3      	ldrh	r3, [r4, #12]
 8002bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bcc:	81a3      	strh	r3, [r4, #12]
 8002bce:	e7ad      	b.n	8002b2c <__sflush_r+0x1c>
 8002bd0:	690f      	ldr	r7, [r1, #16]
 8002bd2:	2f00      	cmp	r7, #0
 8002bd4:	d0a9      	beq.n	8002b2a <__sflush_r+0x1a>
 8002bd6:	0793      	lsls	r3, r2, #30
 8002bd8:	680e      	ldr	r6, [r1, #0]
 8002bda:	600f      	str	r7, [r1, #0]
 8002bdc:	bf0c      	ite	eq
 8002bde:	694b      	ldreq	r3, [r1, #20]
 8002be0:	2300      	movne	r3, #0
 8002be2:	eba6 0807 	sub.w	r8, r6, r7
 8002be6:	608b      	str	r3, [r1, #8]
 8002be8:	f1b8 0f00 	cmp.w	r8, #0
 8002bec:	dd9d      	ble.n	8002b2a <__sflush_r+0x1a>
 8002bee:	4643      	mov	r3, r8
 8002bf0:	463a      	mov	r2, r7
 8002bf2:	6a21      	ldr	r1, [r4, #32]
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002bf8:	47b0      	blx	r6
 8002bfa:	2800      	cmp	r0, #0
 8002bfc:	dc06      	bgt.n	8002c0c <__sflush_r+0xfc>
 8002bfe:	89a3      	ldrh	r3, [r4, #12]
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295
 8002c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c08:	81a3      	strh	r3, [r4, #12]
 8002c0a:	e78f      	b.n	8002b2c <__sflush_r+0x1c>
 8002c0c:	4407      	add	r7, r0
 8002c0e:	eba8 0800 	sub.w	r8, r8, r0
 8002c12:	e7e9      	b.n	8002be8 <__sflush_r+0xd8>
 8002c14:	dfbffffe 	.word	0xdfbffffe

08002c18 <_fflush_r>:
 8002c18:	b538      	push	{r3, r4, r5, lr}
 8002c1a:	690b      	ldr	r3, [r1, #16]
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	460c      	mov	r4, r1
 8002c20:	b913      	cbnz	r3, 8002c28 <_fflush_r+0x10>
 8002c22:	2500      	movs	r5, #0
 8002c24:	4628      	mov	r0, r5
 8002c26:	bd38      	pop	{r3, r4, r5, pc}
 8002c28:	b118      	cbz	r0, 8002c32 <_fflush_r+0x1a>
 8002c2a:	6a03      	ldr	r3, [r0, #32]
 8002c2c:	b90b      	cbnz	r3, 8002c32 <_fflush_r+0x1a>
 8002c2e:	f7ff fa99 	bl	8002164 <__sinit>
 8002c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f3      	beq.n	8002c22 <_fflush_r+0xa>
 8002c3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c3c:	07d0      	lsls	r0, r2, #31
 8002c3e:	d404      	bmi.n	8002c4a <_fflush_r+0x32>
 8002c40:	0599      	lsls	r1, r3, #22
 8002c42:	d402      	bmi.n	8002c4a <_fflush_r+0x32>
 8002c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c46:	f7ff fb92 	bl	800236e <__retarget_lock_acquire_recursive>
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	f7ff ff5f 	bl	8002b10 <__sflush_r>
 8002c52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c54:	4605      	mov	r5, r0
 8002c56:	07da      	lsls	r2, r3, #31
 8002c58:	d4e4      	bmi.n	8002c24 <_fflush_r+0xc>
 8002c5a:	89a3      	ldrh	r3, [r4, #12]
 8002c5c:	059b      	lsls	r3, r3, #22
 8002c5e:	d4e1      	bmi.n	8002c24 <_fflush_r+0xc>
 8002c60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c62:	f7ff fb85 	bl	8002370 <__retarget_lock_release_recursive>
 8002c66:	e7dd      	b.n	8002c24 <_fflush_r+0xc>

08002c68 <__swbuf_r>:
 8002c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6a:	460e      	mov	r6, r1
 8002c6c:	4614      	mov	r4, r2
 8002c6e:	4605      	mov	r5, r0
 8002c70:	b118      	cbz	r0, 8002c7a <__swbuf_r+0x12>
 8002c72:	6a03      	ldr	r3, [r0, #32]
 8002c74:	b90b      	cbnz	r3, 8002c7a <__swbuf_r+0x12>
 8002c76:	f7ff fa75 	bl	8002164 <__sinit>
 8002c7a:	69a3      	ldr	r3, [r4, #24]
 8002c7c:	60a3      	str	r3, [r4, #8]
 8002c7e:	89a3      	ldrh	r3, [r4, #12]
 8002c80:	071a      	lsls	r2, r3, #28
 8002c82:	d525      	bpl.n	8002cd0 <__swbuf_r+0x68>
 8002c84:	6923      	ldr	r3, [r4, #16]
 8002c86:	b31b      	cbz	r3, 8002cd0 <__swbuf_r+0x68>
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	b2f6      	uxtb	r6, r6
 8002c8c:	6922      	ldr	r2, [r4, #16]
 8002c8e:	4637      	mov	r7, r6
 8002c90:	1a98      	subs	r0, r3, r2
 8002c92:	6963      	ldr	r3, [r4, #20]
 8002c94:	4283      	cmp	r3, r0
 8002c96:	dc04      	bgt.n	8002ca2 <__swbuf_r+0x3a>
 8002c98:	4621      	mov	r1, r4
 8002c9a:	4628      	mov	r0, r5
 8002c9c:	f7ff ffbc 	bl	8002c18 <_fflush_r>
 8002ca0:	b9e0      	cbnz	r0, 8002cdc <__swbuf_r+0x74>
 8002ca2:	68a3      	ldr	r3, [r4, #8]
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	60a3      	str	r3, [r4, #8]
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	6022      	str	r2, [r4, #0]
 8002cae:	701e      	strb	r6, [r3, #0]
 8002cb0:	1c43      	adds	r3, r0, #1
 8002cb2:	6962      	ldr	r2, [r4, #20]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d004      	beq.n	8002cc2 <__swbuf_r+0x5a>
 8002cb8:	89a3      	ldrh	r3, [r4, #12]
 8002cba:	07db      	lsls	r3, r3, #31
 8002cbc:	d506      	bpl.n	8002ccc <__swbuf_r+0x64>
 8002cbe:	2e0a      	cmp	r6, #10
 8002cc0:	d104      	bne.n	8002ccc <__swbuf_r+0x64>
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	4628      	mov	r0, r5
 8002cc6:	f7ff ffa7 	bl	8002c18 <_fflush_r>
 8002cca:	b938      	cbnz	r0, 8002cdc <__swbuf_r+0x74>
 8002ccc:	4638      	mov	r0, r7
 8002cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	f000 f806 	bl	8002ce4 <__swsetup_r>
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d0d5      	beq.n	8002c88 <__swbuf_r+0x20>
 8002cdc:	f04f 37ff 	mov.w	r7, #4294967295
 8002ce0:	e7f4      	b.n	8002ccc <__swbuf_r+0x64>
	...

08002ce4 <__swsetup_r>:
 8002ce4:	b538      	push	{r3, r4, r5, lr}
 8002ce6:	4b2a      	ldr	r3, [pc, #168]	; (8002d90 <__swsetup_r+0xac>)
 8002ce8:	4605      	mov	r5, r0
 8002cea:	460c      	mov	r4, r1
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	b118      	cbz	r0, 8002cf8 <__swsetup_r+0x14>
 8002cf0:	6a03      	ldr	r3, [r0, #32]
 8002cf2:	b90b      	cbnz	r3, 8002cf8 <__swsetup_r+0x14>
 8002cf4:	f7ff fa36 	bl	8002164 <__sinit>
 8002cf8:	89a3      	ldrh	r3, [r4, #12]
 8002cfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002cfe:	0718      	lsls	r0, r3, #28
 8002d00:	d422      	bmi.n	8002d48 <__swsetup_r+0x64>
 8002d02:	06d9      	lsls	r1, r3, #27
 8002d04:	d407      	bmi.n	8002d16 <__swsetup_r+0x32>
 8002d06:	2309      	movs	r3, #9
 8002d08:	602b      	str	r3, [r5, #0]
 8002d0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d12:	81a3      	strh	r3, [r4, #12]
 8002d14:	e034      	b.n	8002d80 <__swsetup_r+0x9c>
 8002d16:	0758      	lsls	r0, r3, #29
 8002d18:	d512      	bpl.n	8002d40 <__swsetup_r+0x5c>
 8002d1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d1c:	b141      	cbz	r1, 8002d30 <__swsetup_r+0x4c>
 8002d1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d22:	4299      	cmp	r1, r3
 8002d24:	d002      	beq.n	8002d2c <__swsetup_r+0x48>
 8002d26:	4628      	mov	r0, r5
 8002d28:	f7ff fb24 	bl	8002374 <_free_r>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	6363      	str	r3, [r4, #52]	; 0x34
 8002d30:	89a3      	ldrh	r3, [r4, #12]
 8002d32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d36:	81a3      	strh	r3, [r4, #12]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	6063      	str	r3, [r4, #4]
 8002d3c:	6923      	ldr	r3, [r4, #16]
 8002d3e:	6023      	str	r3, [r4, #0]
 8002d40:	89a3      	ldrh	r3, [r4, #12]
 8002d42:	f043 0308 	orr.w	r3, r3, #8
 8002d46:	81a3      	strh	r3, [r4, #12]
 8002d48:	6923      	ldr	r3, [r4, #16]
 8002d4a:	b94b      	cbnz	r3, 8002d60 <__swsetup_r+0x7c>
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d56:	d003      	beq.n	8002d60 <__swsetup_r+0x7c>
 8002d58:	4621      	mov	r1, r4
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	f000 f85d 	bl	8002e1a <__smakebuf_r>
 8002d60:	89a0      	ldrh	r0, [r4, #12]
 8002d62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d66:	f010 0301 	ands.w	r3, r0, #1
 8002d6a:	d00a      	beq.n	8002d82 <__swsetup_r+0x9e>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60a3      	str	r3, [r4, #8]
 8002d70:	6963      	ldr	r3, [r4, #20]
 8002d72:	425b      	negs	r3, r3
 8002d74:	61a3      	str	r3, [r4, #24]
 8002d76:	6923      	ldr	r3, [r4, #16]
 8002d78:	b943      	cbnz	r3, 8002d8c <__swsetup_r+0xa8>
 8002d7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002d7e:	d1c4      	bne.n	8002d0a <__swsetup_r+0x26>
 8002d80:	bd38      	pop	{r3, r4, r5, pc}
 8002d82:	0781      	lsls	r1, r0, #30
 8002d84:	bf58      	it	pl
 8002d86:	6963      	ldrpl	r3, [r4, #20]
 8002d88:	60a3      	str	r3, [r4, #8]
 8002d8a:	e7f4      	b.n	8002d76 <__swsetup_r+0x92>
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	e7f7      	b.n	8002d80 <__swsetup_r+0x9c>
 8002d90:	20000064 	.word	0x20000064

08002d94 <_sbrk_r>:
 8002d94:	b538      	push	{r3, r4, r5, lr}
 8002d96:	2300      	movs	r3, #0
 8002d98:	4d05      	ldr	r5, [pc, #20]	; (8002db0 <_sbrk_r+0x1c>)
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	602b      	str	r3, [r5, #0]
 8002da0:	f7fd fc8c 	bl	80006bc <_sbrk>
 8002da4:	1c43      	adds	r3, r0, #1
 8002da6:	d102      	bne.n	8002dae <_sbrk_r+0x1a>
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	b103      	cbz	r3, 8002dae <_sbrk_r+0x1a>
 8002dac:	6023      	str	r3, [r4, #0]
 8002dae:	bd38      	pop	{r3, r4, r5, pc}
 8002db0:	200001cc 	.word	0x200001cc

08002db4 <memchr>:
 8002db4:	b2c9      	uxtb	r1, r1
 8002db6:	4402      	add	r2, r0
 8002db8:	b510      	push	{r4, lr}
 8002dba:	4290      	cmp	r0, r2
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	d101      	bne.n	8002dc4 <memchr+0x10>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	e003      	b.n	8002dcc <memchr+0x18>
 8002dc4:	781c      	ldrb	r4, [r3, #0]
 8002dc6:	3001      	adds	r0, #1
 8002dc8:	428c      	cmp	r4, r1
 8002dca:	d1f6      	bne.n	8002dba <memchr+0x6>
 8002dcc:	4618      	mov	r0, r3
 8002dce:	bd10      	pop	{r4, pc}

08002dd0 <__swhatbuf_r>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dd8:	b096      	sub	sp, #88	; 0x58
 8002dda:	4615      	mov	r5, r2
 8002ddc:	2900      	cmp	r1, #0
 8002dde:	461e      	mov	r6, r3
 8002de0:	da0c      	bge.n	8002dfc <__swhatbuf_r+0x2c>
 8002de2:	89a3      	ldrh	r3, [r4, #12]
 8002de4:	2100      	movs	r1, #0
 8002de6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002dea:	bf0c      	ite	eq
 8002dec:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002df0:	2340      	movne	r3, #64	; 0x40
 8002df2:	2000      	movs	r0, #0
 8002df4:	6031      	str	r1, [r6, #0]
 8002df6:	602b      	str	r3, [r5, #0]
 8002df8:	b016      	add	sp, #88	; 0x58
 8002dfa:	bd70      	pop	{r4, r5, r6, pc}
 8002dfc:	466a      	mov	r2, sp
 8002dfe:	f000 f849 	bl	8002e94 <_fstat_r>
 8002e02:	2800      	cmp	r0, #0
 8002e04:	dbed      	blt.n	8002de2 <__swhatbuf_r+0x12>
 8002e06:	9901      	ldr	r1, [sp, #4]
 8002e08:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002e0c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002e10:	4259      	negs	r1, r3
 8002e12:	4159      	adcs	r1, r3
 8002e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e18:	e7eb      	b.n	8002df2 <__swhatbuf_r+0x22>

08002e1a <__smakebuf_r>:
 8002e1a:	898b      	ldrh	r3, [r1, #12]
 8002e1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e1e:	079d      	lsls	r5, r3, #30
 8002e20:	4606      	mov	r6, r0
 8002e22:	460c      	mov	r4, r1
 8002e24:	d507      	bpl.n	8002e36 <__smakebuf_r+0x1c>
 8002e26:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e2a:	6023      	str	r3, [r4, #0]
 8002e2c:	6123      	str	r3, [r4, #16]
 8002e2e:	2301      	movs	r3, #1
 8002e30:	6163      	str	r3, [r4, #20]
 8002e32:	b002      	add	sp, #8
 8002e34:	bd70      	pop	{r4, r5, r6, pc}
 8002e36:	ab01      	add	r3, sp, #4
 8002e38:	466a      	mov	r2, sp
 8002e3a:	f7ff ffc9 	bl	8002dd0 <__swhatbuf_r>
 8002e3e:	9900      	ldr	r1, [sp, #0]
 8002e40:	4605      	mov	r5, r0
 8002e42:	4630      	mov	r0, r6
 8002e44:	f7ff fb02 	bl	800244c <_malloc_r>
 8002e48:	b948      	cbnz	r0, 8002e5e <__smakebuf_r+0x44>
 8002e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e4e:	059a      	lsls	r2, r3, #22
 8002e50:	d4ef      	bmi.n	8002e32 <__smakebuf_r+0x18>
 8002e52:	f023 0303 	bic.w	r3, r3, #3
 8002e56:	f043 0302 	orr.w	r3, r3, #2
 8002e5a:	81a3      	strh	r3, [r4, #12]
 8002e5c:	e7e3      	b.n	8002e26 <__smakebuf_r+0xc>
 8002e5e:	89a3      	ldrh	r3, [r4, #12]
 8002e60:	6020      	str	r0, [r4, #0]
 8002e62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e66:	6120      	str	r0, [r4, #16]
 8002e68:	81a3      	strh	r3, [r4, #12]
 8002e6a:	9b00      	ldr	r3, [sp, #0]
 8002e6c:	6163      	str	r3, [r4, #20]
 8002e6e:	9b01      	ldr	r3, [sp, #4]
 8002e70:	b15b      	cbz	r3, 8002e8a <__smakebuf_r+0x70>
 8002e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e76:	4630      	mov	r0, r6
 8002e78:	f000 f81e 	bl	8002eb8 <_isatty_r>
 8002e7c:	b128      	cbz	r0, 8002e8a <__smakebuf_r+0x70>
 8002e7e:	89a3      	ldrh	r3, [r4, #12]
 8002e80:	f023 0303 	bic.w	r3, r3, #3
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	81a3      	strh	r3, [r4, #12]
 8002e8a:	89a3      	ldrh	r3, [r4, #12]
 8002e8c:	431d      	orrs	r5, r3
 8002e8e:	81a5      	strh	r5, [r4, #12]
 8002e90:	e7cf      	b.n	8002e32 <__smakebuf_r+0x18>
	...

08002e94 <_fstat_r>:
 8002e94:	b538      	push	{r3, r4, r5, lr}
 8002e96:	2300      	movs	r3, #0
 8002e98:	4d06      	ldr	r5, [pc, #24]	; (8002eb4 <_fstat_r+0x20>)
 8002e9a:	4604      	mov	r4, r0
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	602b      	str	r3, [r5, #0]
 8002ea2:	f7fd fbe2 	bl	800066a <_fstat>
 8002ea6:	1c43      	adds	r3, r0, #1
 8002ea8:	d102      	bne.n	8002eb0 <_fstat_r+0x1c>
 8002eaa:	682b      	ldr	r3, [r5, #0]
 8002eac:	b103      	cbz	r3, 8002eb0 <_fstat_r+0x1c>
 8002eae:	6023      	str	r3, [r4, #0]
 8002eb0:	bd38      	pop	{r3, r4, r5, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200001cc 	.word	0x200001cc

08002eb8 <_isatty_r>:
 8002eb8:	b538      	push	{r3, r4, r5, lr}
 8002eba:	2300      	movs	r3, #0
 8002ebc:	4d05      	ldr	r5, [pc, #20]	; (8002ed4 <_isatty_r+0x1c>)
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	602b      	str	r3, [r5, #0]
 8002ec4:	f7fd fbe1 	bl	800068a <_isatty>
 8002ec8:	1c43      	adds	r3, r0, #1
 8002eca:	d102      	bne.n	8002ed2 <_isatty_r+0x1a>
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	b103      	cbz	r3, 8002ed2 <_isatty_r+0x1a>
 8002ed0:	6023      	str	r3, [r4, #0]
 8002ed2:	bd38      	pop	{r3, r4, r5, pc}
 8002ed4:	200001cc 	.word	0x200001cc

08002ed8 <_init>:
 8002ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eda:	bf00      	nop
 8002edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ede:	bc08      	pop	{r3}
 8002ee0:	469e      	mov	lr, r3
 8002ee2:	4770      	bx	lr

08002ee4 <_fini>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	bf00      	nop
 8002ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eea:	bc08      	pop	{r3}
 8002eec:	469e      	mov	lr, r3
 8002eee:	4770      	bx	lr
